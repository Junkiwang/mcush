from Arm.Stm32 import *

NON_OS = True
NON_OS = False

#env = Stm32f030xx()
#haldir='stm32f030xx'
#env.setLinkfile( '/ld/stm32f030x4_min.ld' )
#port = 'ARM_CM0'

#env = Stm32f1hd()
#haldir='stm32f103ze_redbull'
#env.setLinkfile( '/ld/stm32f103xe_min.ld' )
#port = 'ARM_CM3'

#env = Stm32f1hd()
#haldir='stm32f103ze_redbull'
#env.setLinkfile( '/ld/stm32f103ze_redbull.ld' )
##env.appendDefineFlags( ['DATA_IN_ExtSRAM'] )
#port = 'ARM_CM3'

#env = Stm32f1md()
#haldir='stm32f103xb'
##env.setLinkfile( '/ld/stm32f103x8_min.ld' )
#env.setLinkfile( '/ld/stm32f103xb_min.ld' )
#port = 'ARM_CM3'

env = Stm32f1md()
haldir='stm32f103xb_pyeasycontrol'
#env.setLinkfile( '/ld/stm32f103x8_min.ld' )
env.setLinkfile( '/ld/stm32f103xb_min.ld' )
env.appendDriver(STM32_USB_FS_Driver())
port = 'ARM_CM3'

#env = Stm32f1md()
#haldir='stm32f103x8_xtw'
#env.setLinkfile( '/ld/stm32f103x8_min.ld' )
#env.appendDriver(STM32_USB_FS_Driver())
#port = 'ARM_CM3'

#env = Stm32f407xx()
#haldir='stm32f407zg_eu'
#env.setLinkfile( '/ld/stm32f407zg_min.ld' )
#port = 'ARM_CM4F'

#env = Stm32f767xx()
#haldir='stm32f767zi_nucleo'
#env.setLinkfile( '/ld/stm32f767zi_min.ld' )
#port = 'ARM_CM7'


# disable some commands and reduce flash size
env.appendDefineFlags( [
    #'USE_CMD_HELP=0',
    #'USE_CMD_SCPI_IDN=0',
    #'USE_CMD_SCPI_RST=0',
    #'USE_CMD_RESET=0',
    #'USE_CMD_GPIO=0',
    #'USE_CMD_LED=0',
    #'USE_CMD_DUMP=0',
    #'USE_CMD_WRITE=0',
    #'USE_CMD_MFILL=0',
    #'USE_CMD_WAIT=0',
    #'USE_CMD_WDG=0',
    #'USE_CMD_UPTIME=0',
    #'USE_CMD_SYSTEM=0',
    #'USE_CMD_MAPI=0',
    #'MCUSH_FREERTOS_PEEK_API=0',
    #'configUSE_TIMERS=0',
    #'configUSE_MUTEX=0',
    #'configCHECK_FOR_STACK_OVERFLOW=0',
    #'configTOTAL_HEAP_SIZE=10240',
    #'MCUSH_STACK_SIZE=10240',
    #'SHELL_QUOTE_PARSE_ENALBE=0',
    ] ) 

if NON_OS:
    env.appendDefineFlags( [ 'MCUSH_NON_OS=1' ] )


env.appendPath([
    '.',
    '/libFreeRTOS',
    '/libFreeRTOS/include',
    '/libFreeRTOS/portable/GCC/%s'% port,
    '/mcush',
    '/hal%s'% haldir,
])


env.appendGlobSource([
    '*.c',
    '/mcush/*.c',
    '/hal%s/*.c'% haldir,
])

if not NON_OS:
    env.appendGlobSource([
        '/libFreeRTOS/*.c',
        #'/libFreeRTOS/portable/MemMang/heap_1.c',  # simple malloc, no free
        #'/libFreeRTOS/portable/MemMang/heap_2.c',  # simple malloc, with free, no combine
        '/libFreeRTOS/portable/MemMang/heap_3.c',  # normal
        '/libFreeRTOS/portable/GCC/%s/port.c'% port,
        ])



#env.appendCompilerFlag(['-std=gnu90'])
#env.appendLinkFlag(['--specs=nano.specs'])
env.makeApp()

