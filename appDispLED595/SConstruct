from Arm.Stm32 import *

#env = Stm32f030xx()
#haldir='stm32f030xx'
#env.setLinkfile( '/ld/stm32f030xx_min.ld' )
#port = 'ARM_CM0'

#env = Stm32f1md()
#haldir='stm32f103ze_redbull'
#env.setLinkfile( '/ld/stm32f103xe_min.ld' )
#port = 'ARM_CM3'

#env = Stm32f1md()
#haldir='stm32f103xb'
#env.setLinkfile( '/ld/stm32f103xb_min.ld' )
#port = 'ARM_CM3'

#env = Stm32f1md()
#haldir='stm32f103xb_pyeasycontrol'
#env.setLinkfile( '/ld/stm32f103xb_min.ld' )
#env.appendDriver(STM32_USB_FS_Driver())
#port = 'ARM_CM3'

env = Stm32f407xx()
haldir='stm32f407zg_eu'
env.setLinkfile( '/ld/stm32f407zg_min.ld' )
port = 'ARM_CM4F'

#env = Stm32f767xx()
#haldir='stm32f767zi_nucleo'
#env.setLinkfile( '/ld/stm32f767zi_min.ld' )
#port = 'ARM_CM7'


if env.DEBUG:
    env.appendCompilerFlag(['-g', '-O0'] )
    DEFINES = ['DEBUG']
else:
    env.appendCompilerFlag(['-Os', '-Werror'] )
    DEFINES = ['NDEBUG']
 
env.appendCompilerFlag(['-D%s'% d for d in DEFINES])

env.appendPath([
    '.',
    '/libFreeRTOS',
    '/libFreeRTOS/include',
    '/libFreeRTOS/portable/GCC/%s'% port,
    '/mcush',
    '/hal%s'% haldir,
])


env.appendGlobSource([
    '*.c',
    '/mcush/*.c',
    '/hal%s/*.c'% haldir,
    '/libFreeRTOS/*.c',
    '/libFreeRTOS/portable/MemMang/heap_3.c',
    '/libFreeRTOS/portable/GCC/%s/port.c'% port,
])


env.makeApp()

