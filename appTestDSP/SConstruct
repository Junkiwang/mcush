from Arm.Stm32 import *


env = Stm32f407xx()
haldir='stm32f407zg_eu'
env.setLinkfile( '/ld/stm32f407zg_min.ld' )
port = 'ARM_CM4F'

#env = Stm32f767xx()
#haldir='stm32f767zi_nucleo'
#env.setLinkfile( '/ld/stm32f767zi_min.ld' )
#port = 'ARM_CM7'


if env.DEBUG:
    env.appendCompilerFlag(['-g', '-O0'] )
    DEFINES = ['DEBUG']
else:
    env.appendCompilerFlag(['-Os', '-Werror'] )
    DEFINES = ['NDEBUG']
   
#DEFINES += ['MCUSH_STACK_SIZE=40000'] 
DEFINES += ['ARM_MATH_CM4'] 
env.appendCompilerFlag(['-D%s'% d for d in DEFINES])


env.appendPath([
    '.',
    '/libFreeRTOS',
    '/libFreeRTOS/include',
    '/libFreeRTOS/portable/GCC/%s'% port,
    '/mcush',
    '/hal%s'% haldir,
    '/CMSIS/Lib/GCC',
])


env.appendGlobSource([
    '*.c',
    '/mcush/*.c',
    '/hal%s/*.c'% haldir,
    '/libFreeRTOS/*.c',
    '/libFreeRTOS/portable/MemMang/heap_3.c',
    '/libFreeRTOS/portable/GCC/%s/port.c'% port,
])

env.appendLibPath( ['/CMSIS/Lib/GCC'] )
#env.appendLib( ['arm_cortexM4lf_math'] )
env.appendLib( ['arm_cortexM4l_math'] )


env.makeApp()

