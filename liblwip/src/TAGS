
include/ipv4/lwip/igmp.h,746
#define __LWIP_IGMP_H____LWIP_IGMP_H__36,1831
#define IGMP_TMR_INTERVAL IGMP_TMR_INTERVAL51,2083
#define IGMP_V1_DELAYING_MEMBER_TMR IGMP_V1_DELAYING_MEMBER_TMR52,2145
#define IGMP_JOIN_DELAYING_MEMBER_TMR IGMP_JOIN_DELAYING_MEMBER_TMR53,2208
#define IGMP_DEL_MAC_FILTER IGMP_DEL_MAC_FILTER57,2366
#define IGMP_ADD_MAC_FILTER IGMP_ADD_MAC_FILTER58,2407
struct igmp_group {igmp_group72,2841
  struct igmp_group *next;next74,2880
  struct netif      *netif;netif76,2955
  ip_addr_t          group_address;group_address78,3010
  u8_t               last_reporter_flag;last_reporter_flag80,3099
  u8_t               group_state;group_state82,3176
  u16_t              timer;timer84,3256
  u8_t               use;use86,3322

include/ipv4/lwip/inet.h,1705
#define __LWIP_INET_H____LWIP_INET_H__33,1632
struct in_addr {in_addr44,1807
  u32_t s_addr;s_addr45,1824
#define INADDR_NONE INADDR_NONE49,1867
#define INADDR_LOOPBACK INADDR_LOOPBACK51,1924
#define INADDR_ANY INADDR_ANY53,1983
#define INADDR_BROADCAST INADDR_BROADCAST55,2045
#define IN_CLASSA(IN_CLASSA61,2253
#define IN_CLASSA_NET IN_CLASSA_NET62,2294
#define IN_CLASSA_NSHIFT IN_CLASSA_NSHIFT63,2336
#define IN_CLASSA_HOST IN_CLASSA_HOST64,2381
#define IN_CLASSA_MAX IN_CLASSA_MAX65,2424
#define IN_CLASSB(IN_CLASSB67,2467
#define IN_CLASSB_NET IN_CLASSB_NET68,2508
#define IN_CLASSB_NSHIFT IN_CLASSB_NSHIFT69,2550
#define IN_CLASSB_HOST IN_CLASSB_HOST70,2595
#define IN_CLASSB_MAX IN_CLASSB_MAX71,2638
#define IN_CLASSC(IN_CLASSC73,2681
#define IN_CLASSC_NET IN_CLASSC_NET74,2722
#define IN_CLASSC_NSHIFT IN_CLASSC_NSHIFT75,2764
#define IN_CLASSC_HOST IN_CLASSC_HOST76,2809
#define IN_CLASSC_MAX IN_CLASSC_MAX77,2852
#define IN_CLASSD(IN_CLASSD79,2895
#define IN_CLASSD_NET IN_CLASSD_NET80,2936
#define IN_CLASSD_NSHIFT IN_CLASSD_NSHIFT81,3013
#define IN_CLASSD_HOST IN_CLASSD_HOST82,3092
#define IN_CLASSD_MAX IN_CLASSD_MAX83,3168
#define IN_MULTICAST(IN_MULTICAST85,3211
#define IN_EXPERIMENTAL(IN_EXPERIMENTAL87,3256
#define IN_BADCLASS(IN_BADCLASS88,3303
#define IN_LOOPBACKNET IN_LOOPBACKNET90,3347
#define inet_addr_from_ipaddr(inet_addr_from_ipaddr92,3391
#define inet_addr_to_ipaddr(inet_addr_to_ipaddr93,3511
#define inet_addr_to_ipaddr_p(inet_addr_to_ipaddr_p95,3734
#define inet_addr(inet_addr98,3915
#define inet_aton(inet_aton99,3961
#define inet_ntoa(inet_ntoa100,4025
#define inet_ntoa_r(inet_ntoa_r101,4088

include/ipv4/lwip/icmp.h,1364
#define __LWIP_ICMP_H____LWIP_ICMP_H__33,1632
#define ICMP_ER ICMP_ER44,1793
#define ICMP_DUR ICMP_DUR45,1833
#define ICMP_SQ ICMP_SQ46,1886
#define ICMP_RD ICMP_RD47,1929
#define ICMP_ECHO ICMP_ECHO48,1967
#define ICMP_TE ICMP_TE49,2001
#define ICMP_PP ICMP_PP50,2044
#define ICMP_TS ICMP_TS51,2091
#define ICMP_TSR ICMP_TSR52,2130
#define ICMP_IRQ ICMP_IRQ53,2175
#define ICMP_IR ICMP_IR54,2224
enum icmp_dur_type {icmp_dur_type56,2272
  ICMP_DUR_NET   = 0,  /* net unreachable */ICMP_DUR_NET57,2293
  ICMP_DUR_HOST  = 1,  /* host unreachable */ICMP_DUR_HOST58,2338
  ICMP_DUR_PROTO = 2,  /* protocol unreachable */ICMP_DUR_PROTO59,2384
  ICMP_DUR_PORT  = 3,  /* port unreachable */ICMP_DUR_PORT60,2434
  ICMP_DUR_FRAG  = 4,  /* fragmentation needed and DF set */ICMP_DUR_FRAG61,2480
  ICMP_DUR_SR    = 5   /* source route failed */ICMP_DUR_SR62,2541
enum icmp_te_type {icmp_te_type65,2594
  ICMP_TE_TTL  = 0,    /* time to live exceeded in transit */ICMP_TE_TTL66,2614
  ICMP_TE_FRAG = 1     /* fragment reassembly time exceeded */ICMP_TE_FRAG67,2676
struct icmp_echo_hdr {icmp_echo_hdr79,3034
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT85,3221
#define ICMPH_TYPE(ICMPH_TYPE91,3328
#define ICMPH_CODE(ICMPH_CODE92,3366
#define ICMPH_TYPE_SET(ICMPH_TYPE_SET95,3447
#define ICMPH_CODE_SET(ICMPH_CODE_SET96,3498

include/ipv4/lwip/inet_chksum.h,402
#define __LWIP_INET_CHKSUM_H____LWIP_INET_CHKSUM_H__33,1639
#define SWAP_BYTES_IN_WORD(SWAP_BYTES_IN_WORD44,1952
#define SWAP_BYTES_IN_WORD(SWAP_BYTES_IN_WORD47,2147
#define FOLD_U32T(FOLD_U32T53,2392
#define LWIP_CHKSUM_COPY(LWIP_CHKSUM_COPY60,2614
#define LWIP_CHKSUM_COPY_ALGORITHM LWIP_CHKSUM_COPY_ALGORITHM62,2721
#define LWIP_CHKSUM_COPY_ALGORITHM LWIP_CHKSUM_COPY_ALGORITHM66,2862

include/ipv4/lwip/ip.h,2029
#define __LWIP_IP_H____LWIP_IP_H__33,1630
#define IP_OPTIONS_SEND IP_OPTIONS_SEND48,1907
#define IP_HLEN IP_HLEN50,1944
#define IP_PROTO_ICMP IP_PROTO_ICMP52,1964
#define IP_PROTO_IGMP IP_PROTO_IGMP53,1991
#define IP_PROTO_UDP IP_PROTO_UDP54,2018
#define IP_PROTO_UDPLITE IP_PROTO_UDPLITE55,2046
#define IP_PROTO_TCP IP_PROTO_TCP56,2075
#undef IP_HDRINCLIP_HDRINCL62,2308
#define IP_HDRINCL IP_HDRINCL64,2350
#define IP_PCB_ADDRHINT IP_PCB_ADDRHINT67,2402
#define IP_PCB_ADDRHINTIP_PCB_ADDRHINT69,2448
#define IP_PCB IP_PCB76,2748
struct ip_pcb {ip_pcb89,3084
  IP_PCB;IP_PCB91,3138
#define SOF_ACCEPTCONN SOF_ACCEPTCONN98,3312
#define SOF_REUSEADDR SOF_REUSEADDR99,3381
#define SOF_KEEPALIVE SOF_KEEPALIVE100,3452
#define SOF_BROADCAST SOF_BROADCAST102,3609
#define SOF_LINGER SOF_LINGER104,3823
#define SOF_INHERITED SOF_INHERITED109,4170
struct ip_hdr {ip_hdr116,4365
#define IP_RF IP_RF125,4644
#define IP_DF IP_DF126,4702
#define IP_MF IP_MF127,4756
#define IP_OFFMASK IP_OFFMASK128,4811
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT138,5150
#define IPH_V(IPH_V144,5257
#define IPH_HL(IPH_HL145,5309
#define IPH_TOS(IPH_TOS146,5369
#define IPH_LEN(IPH_LEN147,5423
#define IPH_ID(IPH_ID148,5458
#define IPH_OFFSET(IPH_OFFSET149,5491
#define IPH_TTL(IPH_TTL150,5532
#define IPH_PROTO(IPH_PROTO151,5567
#define IPH_CHKSUM(IPH_CHKSUM152,5606
#define IPH_VHLTOS_SET(IPH_VHLTOS_SET154,5648
#define IPH_LEN_SET(IPH_LEN_SET155,5750
#define IPH_ID_SET(IPH_ID_SET156,5800
#define IPH_OFFSET_SET(IPH_OFFSET_SET157,5846
#define IPH_TTL_SET(IPH_TTL_SET158,5902
#define IPH_PROTO_SET(IPH_PROTO_SET159,5958
#define IPH_CHKSUM_SET(IPH_CHKSUM_SET160,6022
#define ip_init(ip_init171,6474
#define ip_current_netif(ip_current_netif191,7469
#define ip_current_header(ip_current_header195,7690
#define ip_current_src_addr(ip_current_src_addr197,7778
#define ip_current_dest_addr(ip_current_dest_addr199,7878
#define ip_debug_print(ip_debug_print204,7988

include/ipv4/lwip/autoip.h,1487
#define __LWIP_AUTOIP_H____LWIP_AUTOIP_H__45,1828
#define AUTOIP_TMR_INTERVAL AUTOIP_TMR_INTERVAL60,2086
#define AUTOIP_TICKS_PER_SECOND AUTOIP_TICKS_PER_SECOND61,2123
#define PROBE_WAIT PROBE_WAIT64,2210
#define PROBE_MIN PROBE_MIN65,2301
#define PROBE_MAX PROBE_MAX66,2392
#define PROBE_NUM PROBE_NUM67,2483
#define ANNOUNCE_NUM ANNOUNCE_NUM68,2574
#define ANNOUNCE_INTERVAL ANNOUNCE_INTERVAL69,2665
#define ANNOUNCE_WAIT ANNOUNCE_WAIT70,2756
#define MAX_CONFLICTS MAX_CONFLICTS71,2847
#define RATE_LIMIT_INTERVAL RATE_LIMIT_INTERVAL72,2938
#define DEFEND_INTERVAL DEFEND_INTERVAL73,3029
#define AUTOIP_STATE_OFF AUTOIP_STATE_OFF76,3148
#define AUTOIP_STATE_PROBING AUTOIP_STATE_PROBING77,3183
#define AUTOIP_STATE_ANNOUNCING AUTOIP_STATE_ANNOUNCING78,3218
#define AUTOIP_STATE_BOUND AUTOIP_STATE_BOUND79,3253
struct autoipautoip81,3289
  ip_addr_t llipaddr;       /* the currently selected, probed, announced or used LL IP-Address */llipaddr83,3305
  u8_t state;               /* current AutoIP state machine state */state84,3403
  u8_t sent_num;            /* sent number of probes or announces, dependent on state */sent_num85,3472
  u16_t ttw;                /* ticks to wait, tick is AUTOIP_TMR_INTERVAL long */ttw86,3561
  u8_t lastconflict;        /* ticks until a conflict can be solved by defending */lastconflict87,3643
  u8_t tried_llipaddr;      /* total number of probed/used Link Local IP-Addresses */tried_llipaddr88,3727

include/ipv4/lwip/ip_frag.h,479
#define __LWIP_IP_FRAG_H____LWIP_IP_FRAG_H__34,1634
#define IP_TMR_INTERVAL IP_TMR_INTERVAL49,1915
struct ip_reassdata {ip_reassdata54,2038
  struct ip_reassdata *next;next55,2060
  struct pbuf *p;p56,2089
  struct ip_hdr iphdr;iphdr57,2107
  u16_t datagram_len;datagram_len58,2130
  u8_t flags;flags59,2152
  u8_t timer;timer60,2166
struct pbuf_custom_ref {pbuf_custom_ref73,2565
  struct pbuf_custom pc;pc75,2612
  struct pbuf *original;original77,2694

include/ipv4/lwip/ip_addr.h,3067
#define __LWIP_IP_ADDR_H____LWIP_IP_ADDR_H__33,1621
struct ip_addr {ip_addr44,1828
  u32_t addr;addr45,1845
struct ip_addr_packed {ip_addr_packed54,2046
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT56,2103
typedef struct ip_addr ip_addr_t;ip_addr_t64,2348
typedef struct ip_addr_packed ip_addr_p_t;ip_addr_p_t65,2382
struct ip_addr2 {ip_addr275,2656
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT77,2711
#define IP_ADDR_ANY IP_ADDR_ANY92,3059
#define IP_ADDR_BROADCAST IP_ADDR_BROADCAST93,3115
#define IPADDR_NONE IPADDR_NONE96,3201
#define IPADDR_LOOPBACK IPADDR_LOOPBACK98,3268
#define IPADDR_ANY IPADDR_ANY100,3333
#define IPADDR_BROADCAST IPADDR_BROADCAST102,3406
#define IP_CLASSA(IP_CLASSA108,3619
#define IP_CLASSA_NET IP_CLASSA_NET109,3684
#define IP_CLASSA_NSHIFT IP_CLASSA_NSHIFT110,3723
#define IP_CLASSA_HOST IP_CLASSA_HOST111,3754
#define IP_CLASSA_MAX IP_CLASSA_MAX112,3812
#define IP_CLASSB(IP_CLASSB114,3845
#define IP_CLASSB_NET IP_CLASSB_NET115,3921
#define IP_CLASSB_NSHIFT IP_CLASSB_NSHIFT116,3960
#define IP_CLASSB_HOST IP_CLASSB_HOST117,3991
#define IP_CLASSB_MAX IP_CLASSB_MAX118,4049
#define IP_CLASSC(IP_CLASSC120,4084
#define IP_CLASSC_NET IP_CLASSC_NET121,4160
#define IP_CLASSC_NSHIFT IP_CLASSC_NSHIFT122,4199
#define IP_CLASSC_HOST IP_CLASSC_HOST123,4229
#define IP_CLASSD(IP_CLASSD125,4288
#define IP_CLASSD_NET IP_CLASSD_NET126,4362
#define IP_CLASSD_NSHIFT IP_CLASSD_NSHIFT127,4441
#define IP_CLASSD_HOST IP_CLASSD_HOST128,4522
#define IP_MULTICAST(IP_MULTICAST129,4600
#define IP_EXPERIMENTAL(IP_EXPERIMENTAL131,4642
#define IP_BADCLASS(IP_BADCLASS132,4716
#define IP_LOOPBACKNET IP_LOOPBACKNET134,4791
#define IP4_ADDR(IP4_ADDR139,4940
#define IP4_ADDR(IP4_ADDR147,5312
#define IPADDR2_COPY(IPADDR2_COPY158,5812
#define ip_addr_copy(ip_addr_copy162,5954
#define ip_addr_set(ip_addr_set164,6076
#define ip_addr_set_zero(ip_addr_set_zero168,6270
#define ip_addr_set_any(ip_addr_set_any170,6384
#define ip_addr_set_loopback(ip_addr_set_loopback172,6491
#define ip_addr_set_hton(ip_addr_set_hton175,6673
#define ip4_addr_set_u32(ip4_addr_set_u32179,6886
#define ip4_addr_get_u32(ip4_addr_get_u32181,7016
#define ip_addr_get_network(ip_addr_get_network184,7145
#define ip_addr_netcmp(ip_addr_netcmp194,7469
#define ip_addr_cmp(ip_addr_cmp198,7722
#define ip_addr_isany(ip_addr_isany200,7790
#define ip_addr_isbroadcast(ip_addr_isbroadcast202,7869
#define ip_addr_netmask_valid(ip_addr_netmask_valid205,8025
#define ip_addr_ismulticast(ip_addr_ismulticast208,8149
#define ip_addr_islinklocal(ip_addr_islinklocal210,8254
#define ip_addr_debug_print(ip_addr_debug_print212,8359
#define ip4_addr1(ip4_addr1220,8806
#define ip4_addr2(ip4_addr2221,8855
#define ip4_addr3(ip4_addr3222,8904
#define ip4_addr4(ip4_addr4223,8953
#define ip4_addr1_16(ip4_addr1_16226,9126
#define ip4_addr2_16(ip4_addr2_16227,9182
#define ip4_addr3_16(ip4_addr3_16228,9238
#define ip4_addr4_16(ip4_addr4_16229,9294
#define ip_ntoa(ip_ntoa232,9386

include/lwip/pbuf.h,1335
#define __LWIP_PBUF_H____LWIP_PBUF_H__34,1633
#define LWIP_SUPPORT_CUSTOM_PBUF LWIP_SUPPORT_CUSTOM_PBUF45,1842
#define PBUF_TRANSPORT_HLEN PBUF_TRANSPORT_HLEN47,1944
#define PBUF_IP_HLEN PBUF_IP_HLEN48,1975
  PBUF_TRANSPORT,PBUF_TRANSPORT51,2022
  PBUF_IP,PBUF_IP52,2040
  PBUF_LINK,PBUF_LINK53,2051
  PBUF_RAWPBUF_RAW54,2064
} pbuf_layer;pbuf_layer55,2075
  PBUF_RAM, /* pbuf data is stored in RAM */PBUF_RAM58,2105
  PBUF_ROM, /* pbuf data is stored in ROM */PBUF_ROM59,2150
  PBUF_REF, /* pbuf comes from the pbuf pool */PBUF_REF60,2195
  PBUF_POOL /* pbuf payload refers to RAM */PBUF_POOL61,2243
} pbuf_type;pbuf_type62,2288
#define PBUF_FLAG_PUSH PBUF_FLAG_PUSH66,2387
#define PBUF_FLAG_IS_CUSTOM PBUF_FLAG_IS_CUSTOM69,2524
#define PBUF_FLAG_MCASTLOOP PBUF_FLAG_MCASTLOOP71,2620
struct pbuf {pbuf73,2655
  struct pbuf *next;next75,2716
  void *payload;payload78,2788
  u16_t tot_len;tot_len87,3036
  u16_t len;len90,3085
  u8_t /*pbuf_type*/ type;type93,3156
  u8_t flags;flags96,3204
  u16_t ref;ref103,3425
typedef void (*pbuf_free_custom_fn)(struct pbuf *p);pbuf_free_custom_fn108,3525
struct pbuf_custom {pbuf_custom111,3659
  struct pbuf pbuf;pbuf113,3705
  pbuf_free_custom_fn custom_free_function;custom_free_function115,3804
#define pbuf_init(pbuf_init120,3979

include/lwip/tcp_impl.h,4108
#define __LWIP_TCP_IMPL_H____LWIP_TCP_IMPL_H__33,1636
#define tcp_init(tcp_init54,2035
#define tcp_do_output_nagle(tcp_do_output_nagle84,3510
#define tcp_output_nagle(tcp_output_nagle89,3855
#define TCP_SEQ_LT(TCP_SEQ_LT92,3944
#define TCP_SEQ_LEQ(TCP_SEQ_LEQ93,3995
#define TCP_SEQ_GT(TCP_SEQ_GT94,4047
#define TCP_SEQ_GEQ(TCP_SEQ_GEQ95,4098
#define TCP_SEQ_BETWEEN(TCP_SEQ_BETWEEN100,4254
#define TCP_FIN TCP_FIN101,4324
#define TCP_SYN TCP_SYN102,4346
#define TCP_RST TCP_RST103,4368
#define TCP_PSH TCP_PSH104,4390
#define TCP_ACK TCP_ACK105,4412
#define TCP_URG TCP_URG106,4434
#define TCP_ECE TCP_ECE107,4456
#define TCP_CWR TCP_CWR108,4478
#define TCP_FLAGS TCP_FLAGS110,4501
#define TCP_HLEN TCP_HLEN113,4577
#define TCP_TMR_INTERVAL TCP_TMR_INTERVAL116,4623
#define TCP_FAST_INTERVAL TCP_FAST_INTERVAL120,4762
#define TCP_SLOW_INTERVAL TCP_SLOW_INTERVAL124,4915
#define TCP_FIN_WAIT_TIMEOUT TCP_FIN_WAIT_TIMEOUT127,5049
#define TCP_SYN_RCVD_TIMEOUT TCP_SYN_RCVD_TIMEOUT128,5103
#define TCP_OOSEQ_TIMEOUT TCP_OOSEQ_TIMEOUT130,5158
#define TCP_MSL TCP_MSL133,5223
#define  TCP_KEEPIDLE_DEFAULT TCP_KEEPIDLE_DEFAULT138,5437
#define  TCP_KEEPINTVL_DEFAULT TCP_KEEPINTVL_DEFAULT142,5566
#define  TCP_KEEPCNT_DEFAULT TCP_KEEPCNT_DEFAULT146,5707
#define  TCP_MAXIDLE TCP_MAXIDLE149,5802
struct tcp_hdr {tcp_hdr158,6120
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT167,6417
#define TCPH_OFFSET(TCPH_OFFSET173,6524
#define TCPH_HDRLEN(TCPH_HDRLEN174,6591
#define TCPH_FLAGS(TCPH_FLAGS175,6659
#define TCPH_OFFSET_SET(TCPH_OFFSET_SET177,6734
#define TCPH_HDRLEN_SET(TCPH_HDRLEN_SET178,6843
#define TCPH_FLAGS_SET(TCPH_FLAGS_SET179,6947
#define TCPH_HDRLEN_FLAGS_SET(TCPH_HDRLEN_FLAGS_SET180,7099
#define TCPH_SET_FLAG(TCPH_SET_FLAG182,7208
#define TCPH_UNSET_FLAG(TCPH_UNSET_FLAG183,7317
#define TCP_TCPLEN(TCP_TCPLEN185,7458
#define TF_RESET TF_RESET189,7612
#define TF_CLOSED TF_CLOSED190,7675
#define TF_GOT_FIN TF_GOT_FIN191,7751
#define TCP_EVENT_ACCEPT(TCP_EVENT_ACCEPT196,7855
#define TCP_EVENT_SENT(TCP_EVENT_SENT198,7995
#define TCP_EVENT_RECV(TCP_EVENT_RECV200,8140
#define TCP_EVENT_CLOSED(TCP_EVENT_CLOSED202,8276
#define TCP_EVENT_CONNECTED(TCP_EVENT_CONNECTED204,8410
#define TCP_EVENT_POLL(TCP_EVENT_POLL206,8555
#define TCP_EVENT_ERR(TCP_EVENT_ERR208,8693
#define TCP_OVERSIZE_DBGCHECK TCP_OVERSIZE_DBGCHECK269,11574
#define TCP_CHECKSUM_ON_COPY TCP_CHECKSUM_ON_COPY275,11723
struct tcp_seg {tcp_seg278,11884
  struct tcp_seg *next;    /* used when putting segements on a queue */next279,11901
  struct pbuf *p;          /* buffer containing data + TCP header */p280,11973
  u16_t len;               /* the TCP length of this segment */len281,12042
  u16_t oversize_left;     /* Extra bytes available at the end of the lastoversize_left283,12132
  u16_t chksum;chksum288,12401
  u8_t  chksum_swapped;chksum_swapped289,12417
  u8_t  flags;flags291,12475
#define TF_SEG_OPTS_MSS TF_SEG_OPTS_MSS292,12490
#define TF_SEG_OPTS_TS TF_SEG_OPTS_TS293,12560
#define TF_SEG_DATA_CHECKSUMMED TF_SEG_DATA_CHECKSUMMED294,12636
  struct tcp_hdr *tcphdr;  /* the TCP header */tcphdr296,12788
#define LWIP_TCP_OPT_LENGTH(LWIP_TCP_OPT_LENGTH299,12840
#define TCP_BUILD_MSS_OPTION(TCP_BUILD_MSS_OPTION304,13038
union tcp_listen_pcbs_t { /* List of all TCP PCBs in LISTEN state. */tcp_listen_pcbs_t314,13450
  struct tcp_pcb_listen *listen_pcbs; listen_pcbs315,13520
  struct tcp_pcb *pcbs;pcbs316,13559
#define TCP_DEBUG_PCB_LISTS TCP_DEBUG_PCB_LISTS336,14417
#define TCP_REG(TCP_REG339,14478
#define TCP_RMV(TCP_RMV353,15391
#define TCP_REG(TCP_REG371,16404
#define TCP_RMV(TCP_RMV378,16684
#define tcp_ack(tcp_ack408,17892
#define tcp_ack_now(tcp_ack_now419,18384
#  define tcp_debug_print(tcp_debug_print453,19488
#  define tcp_debug_print_flags(tcp_debug_print_flags454,19522
#  define tcp_debug_print_state(tcp_debug_print_state455,19561
#  define tcp_debug_print_pcbs(tcp_debug_print_pcbs456,19596
#  define tcp_pcbs_sane(tcp_pcbs_sane457,19629

include/lwip/snmp_structs.h,5448
#define __LWIP_SNMP_STRUCTS_H____LWIP_SNMP_STRUCTS_H__38,1672
#define MIB_OBJECT_NONE MIB_OBJECT_NONE57,2099
#define MIB_OBJECT_SCALAR MIB_OBJECT_SCALAR58,2126
#define MIB_OBJECT_TAB MIB_OBJECT_TAB59,2154
#define MIB_ACCESS_READ MIB_ACCESS_READ62,2203
#define MIB_ACCESS_WRITE MIB_ACCESS_WRITE63,2231
#define MIB_OBJECT_READ_ONLY MIB_OBJECT_READ_ONLY66,2284
#define MIB_OBJECT_READ_WRITE MIB_OBJECT_READ_WRITE67,2334
#define MIB_OBJECT_WRITE_ONLY MIB_OBJECT_WRITE_ONLY68,2405
#define MIB_OBJECT_NOT_ACCESSIBLE MIB_OBJECT_NOT_ACCESSIBLE69,2456
struct obj_defobj_def72,2549
  u8_t instance;instance75,2637
  u8_t access;access77,2720
  u8_t asn_type;asn_type79,2768
  u16_t v_len;v_len81,2820
  u8_t  id_inst_len;id_inst_len83,2897
  s32_t *id_inst_ptr;id_inst_ptr85,2970
struct snmp_name_ptrsnmp_name_ptr88,2996
  u8_t ident_len;ident_len90,3019
  s32_t *ident;ident91,3037
#define MIB_NODE_SC MIB_NODE_SC95,3091
#define MIB_NODE_AR MIB_NODE_AR97,3144
#define MIB_NODE_RA MIB_NODE_RA99,3215
#define MIB_NODE_LR MIB_NODE_LR101,3290
#define MIB_NODE_EX MIB_NODE_EX103,3352
struct mib_nodemib_node106,3444
  void (*get_object_def)(u8_t ident_len, s32_t *ident, struct obj_def *od);get_object_def109,3526
  void (*get_value)(struct obj_def *od, u16_t len, void *value);get_value112,3734
  u8_t (*set_test)(struct obj_def *od, u16_t len, void *value);set_test114,3849
  void (*set_value)(struct obj_def *od, u16_t len, void *value);  set_value116,3976
  u8_t node_type;node_type118,4103
  u16_t maxlength;maxlength120,4154
typedef struct mib_node mib_scalar_node;mib_scalar_node124,4218
struct mib_array_nodemib_array_node128,4362
  void (*get_object_def)(u8_t ident_len, s32_t *ident, struct obj_def *od);get_object_def131,4425
  void (*get_value)(struct obj_def *od, u16_t len, void *value);get_value132,4501
  u8_t (*set_test)(struct obj_def *od, u16_t len, void *value);set_test133,4566
  void (*set_value)(struct obj_def *od, u16_t len, void *value);set_value134,4630
  u8_t node_type;node_type136,4696
  u16_t maxlength;maxlength137,4714
  const s32_t *objid;objid140,4768
  struct mib_node* const *nptr;nptr141,4790
struct mib_ram_array_nodemib_ram_array_node146,4935
  void (*get_object_def)(u8_t ident_len, s32_t *ident, struct obj_def *od);get_object_def149,5002
  void (*get_value)(struct obj_def *od, u16_t len, void *value);get_value150,5078
  u8_t (*set_test)(struct obj_def *od, u16_t len, void *value);set_test151,5143
  void (*set_value)(struct obj_def *od, u16_t len, void *value);set_value152,5207
  u8_t node_type;node_type154,5273
  u16_t maxlength;maxlength155,5291
  s32_t *objid;objid158,5344
  struct mib_node **nptr;nptr159,5360
struct mib_list_nodemib_list_node162,5390
  struct mib_list_node *prev;  prev164,5413
  struct mib_list_node *next;next165,5445
  s32_t objid;objid166,5475
  struct mib_node *nptr;nptr167,5490
struct mib_list_rootnodemib_list_rootnode172,5617
  void (*get_object_def)(u8_t ident_len, s32_t *ident, struct obj_def *od);get_object_def175,5683
  void (*get_value)(struct obj_def *od, u16_t len, void *value);get_value176,5759
  u8_t (*set_test)(struct obj_def *od, u16_t len, void *value);set_test177,5824
  void (*set_value)(struct obj_def *od, u16_t len, void *value);set_value178,5888
  u8_t node_type;node_type180,5954
  u16_t maxlength;maxlength181,5972
  struct mib_list_node *head;head184,6026
  struct mib_list_node *tail;tail185,6056
  u16_t count;count187,6121
struct mib_external_nodemib_external_node192,6299
  void (*get_object_def)(u8_t ident_len, s32_t *ident, struct obj_def *od);get_object_def195,6365
  void (*get_value)(struct obj_def *od, u16_t len, void *value);get_value196,6441
  u8_t (*set_test)(struct obj_def *od, u16_t len, void *value);set_test197,6506
  void (*set_value)(struct obj_def *od, u16_t len, void *value);set_value198,6570
  u8_t node_type;node_type200,6636
  u16_t maxlength;maxlength201,6654
  void* addr_inf;addr_inf206,6852
  u8_t tree_levels;tree_levels208,6907
  u16_t (*level_length)(void* addr_inf, u8_t level);level_length210,6968
  s32_t (*ident_cmp)(void* addr_inf, u8_t level, u16_t idx, s32_t sub_id);ident_cmp213,7129
  void (*get_objid)(void* addr_inf, u8_t level, u16_t idx, s32_t *sub_id);get_objid214,7204
  void (*get_object_def_q)(void* addr_inf, u8_t rid, u8_t ident_len, s32_t *ident);get_object_def_q217,7305
  void (*get_value_q)(u8_t rid, struct obj_def *od);get_value_q218,7389
  void (*set_test_q)(u8_t rid, struct obj_def *od);set_test_q219,7442
  void (*set_value_q)(u8_t rid, struct obj_def *od, u16_t len, void *value);set_value_q220,7494
  void (*get_object_def_a)(u8_t rid, u8_t ident_len, s32_t *ident, struct obj_def *od);get_object_def_a222,7594
  void (*get_value_a)(u8_t rid, struct obj_def *od, u16_t len, void *value);get_value_a223,7682
  u8_t (*set_test_a)(u8_t rid, struct obj_def *od, u16_t len, void *value);set_test_a224,7759
  void (*set_value_a)(u8_t rid, struct obj_def *od, u16_t len, void *value);set_value_a225,7835
  void (*get_object_def_pc)(u8_t rid, u8_t ident_len, s32_t *ident);get_object_def_pc228,8018
  void (*get_value_pc)(u8_t rid, struct obj_def *od);get_value_pc229,8087
  void (*set_test_pc)(u8_t rid, struct obj_def *od);set_test_pc230,8141
  void (*set_value_pc)(u8_t rid, struct obj_def *od);set_value_pc231,8194

include/lwip/snmp_msg.h,4880
#define __LWIP_SNMP_MSG_H____LWIP_SNMP_MSG_H__36,1648
#define SNMP_IN_PORT SNMP_IN_PORT59,2233
#define SNMP_TRAP_PORT SNMP_TRAP_PORT64,2400
#define SNMP_ES_NOERROR SNMP_ES_NOERROR67,2435
#define SNMP_ES_TOOBIG SNMP_ES_TOOBIG68,2461
#define SNMP_ES_NOSUCHNAME SNMP_ES_NOSUCHNAME69,2486
#define SNMP_ES_BADVALUE SNMP_ES_BADVALUE70,2515
#define SNMP_ES_READONLY SNMP_ES_READONLY71,2542
#define SNMP_ES_GENERROR SNMP_ES_GENERROR72,2569
#define SNMP_GENTRAP_COLDSTART SNMP_GENTRAP_COLDSTART74,2597
#define SNMP_GENTRAP_WARMSTART SNMP_GENTRAP_WARMSTART75,2630
#define SNMP_GENTRAP_AUTHFAIL SNMP_GENTRAP_AUTHFAIL76,2663
#define SNMP_GENTRAP_ENTERPRISESPC SNMP_GENTRAP_ENTERPRISESPC77,2695
struct snmp_varbindsnmp_varbind79,2733
  struct snmp_varbind *next;next82,2799
  struct snmp_varbind *prev;prev84,2877
  u8_t ident_len;ident_len87,2951
  s32_t *ident;ident89,3001
  u8_t value_type;value_type92,3049
  u8_t value_len;value_len94,3106
  void *value;value96,3145
  u8_t seqlenlen;seqlenlen99,3204
  u8_t olenlen;olenlen101,3271
  u8_t vlenlen;vlenlen103,3331
  u16_t seqlen;seqlen105,3383
  u16_t olen;olen107,3441
  u16_t vlen;vlen109,3492
struct snmp_varbind_rootsnmp_varbind_root112,3510
  struct snmp_varbind *head;head114,3537
  struct snmp_varbind *tail;tail115,3566
  u8_t count;count117,3639
  u8_t seqlenlen;seqlenlen119,3701
  u16_t seqlen;seqlen121,3760
struct snmp_resp_header_lengthssnmp_resp_header_lengths125,3832
  u8_t erridxlenlen;erridxlenlen128,3909
  u8_t errstatlenlen;errstatlenlen130,3974
  u8_t ridlenlen;ridlenlen132,4038
  u8_t pdulenlen;pdulenlen134,4091
  u8_t comlenlen;comlenlen136,4150
  u8_t verlenlen;verlenlen138,4207
  u8_t seqlenlen;seqlenlen140,4265
  u16_t erridxlen;erridxlen143,4320
  u16_t errstatlen;errstatlen145,4376
  u16_t ridlen;ridlen147,4431
  u16_t pdulen;pdulen149,4475
  u16_t comlen;comlen151,4525
  u16_t verlen;verlen153,4573
  u16_t seqlen;seqlen155,4622
struct snmp_trap_header_lengthssnmp_trap_header_lengths159,4694
  u8_t tslenlen;tslenlen162,4769
  u8_t strplenlen;strplenlen164,4831
  u8_t gtrplenlen;gtrplenlen166,4894
  u8_t aaddrlenlen;aaddrlenlen168,4955
  u8_t eidlenlen;eidlenlen170,5020
  u8_t pdulenlen;pdulenlen172,5073
  u8_t comlenlen;comlenlen174,5132
  u8_t verlenlen;verlenlen176,5189
  u8_t seqlenlen;seqlenlen178,5247
  u16_t tslen;tslen181,5300
  u16_t strplen;strplen183,5353
  u16_t gtrplen;gtrplen185,5407
  u16_t aaddrlen;aaddrlen187,5459
  u16_t eidlen;eidlen189,5515
  u16_t pdulen;pdulen191,5559
  u16_t comlen;comlen193,5609
  u16_t verlen;verlen195,5657
  u16_t seqlen;seqlen197,5706
#define SNMP_MSG_EMPTY SNMP_MSG_EMPTY201,5761
#define SNMP_MSG_SEARCH_OBJ SNMP_MSG_SEARCH_OBJ203,5857
#define SNMP_MSG_INTERNAL_GET_OBJDEF SNMP_MSG_INTERNAL_GET_OBJDEF206,5991
#define SNMP_MSG_INTERNAL_GET_VALUE SNMP_MSG_INTERNAL_GET_VALUE207,6032
#define SNMP_MSG_INTERNAL_SET_TEST SNMP_MSG_INTERNAL_SET_TEST208,6073
#define SNMP_MSG_INTERNAL_GET_OBJDEF_S SNMP_MSG_INTERNAL_GET_OBJDEF_S209,6114
#define SNMP_MSG_INTERNAL_SET_VALUE SNMP_MSG_INTERNAL_SET_VALUE210,6155
#define SNMP_MSG_EXTERNAL_GET_OBJDEF SNMP_MSG_EXTERNAL_GET_OBJDEF214,6372
#define SNMP_MSG_EXTERNAL_GET_VALUE SNMP_MSG_EXTERNAL_GET_VALUE215,6413
#define SNMP_MSG_EXTERNAL_SET_TEST SNMP_MSG_EXTERNAL_SET_TEST216,6454
#define SNMP_MSG_EXTERNAL_GET_OBJDEF_S SNMP_MSG_EXTERNAL_GET_OBJDEF_S217,6495
#define SNMP_MSG_EXTERNAL_SET_VALUE SNMP_MSG_EXTERNAL_SET_VALUE218,6537
#define SNMP_COMMUNITY_STR_LEN SNMP_COMMUNITY_STR_LEN220,6580
struct snmp_msg_pstatsnmp_msg_pstat221,6614
  struct udp_pcb *pcb;pcb224,6676
  ip_addr_t sip;sip226,6725
  u16_t sp;sp228,6766
  u8_t rt;rt230,6799
  s32_t rid;rid232,6829
  s32_t error_status;error_status234,6863
  s32_t error_index;error_index236,6905
  u8_t community[SNMP_COMMUNITY_STR_LEN + 1];community238,6967
  u8_t com_strlen;com_strlen240,7067
  u8_t state;state242,7156
  struct mib_external_node *ext_mib_node;ext_mib_node244,7213
  struct snmp_name_ptr ext_name_ptr;ext_name_ptr245,7255
  struct obj_def ext_object_def;ext_object_def246,7292
  struct snmp_obj_id ext_oid;ext_oid247,7325
  u8_t vb_idx;vb_idx249,7402
  struct snmp_varbind *vb_ptr;vb_ptr251,7462
  struct snmp_varbind_root invb;invb253,7538
  struct snmp_varbind_root outvb;outvb255,7615
  struct snmp_resp_header_lengths rhl;rhl257,7702
struct snmp_msg_trapsnmp_msg_trap260,7745
  struct udp_pcb *pcb;pcb263,7806
  ip_addr_t dip;dip265,7877
  struct snmp_obj_id *enterprise;enterprise268,7938
  u8_t sip_raw[4];sip_raw270,8024
  u32_t gen_trap;gen_trap272,8069
  u32_t spc_trap;spc_trap274,8114
  u32_t ts;ts276,8150
  struct snmp_varbind_root outvb;outvb278,8206
  struct snmp_trap_header_lengths thl;thl280,8289

include/lwip/arch.h,5612
#define __LWIP_ARCH_H____LWIP_ARCH_H__33,1632
#define LITTLE_ENDIAN LITTLE_ENDIAN36,1679
#define BIG_ENDIAN BIG_ENDIAN40,1733
#define SZT_F SZT_F47,1874
#define X8_F X8_F52,2023
#define PACK_STRUCT_BEGINPACK_STRUCT_BEGIN60,2128
#define PACK_STRUCT_ENDPACK_STRUCT_END64,2210
#define PACK_STRUCT_FIELD(PACK_STRUCT_FIELD68,2290
#define LWIP_UNUSED_ARG(LWIP_UNUSED_ARG73,2378
#define  EPERM EPERM79,2472
#define  ENOENT ENOENT80,2528
#define  ESRCH ESRCH81,2586
#define  EINTR EINTR82,2634
#define  EIO EIO83,2690
#define  ENXIO ENXIO84,2732
#define  E2BIG E2BIG85,2790
#define  ENOEXEC ENOEXEC86,2840
#define  EBADF EBADF87,2890
#define  ECHILD ECHILD88,2938
#define  EAGAIN EAGAIN89,2989
#define  ENOMEM ENOMEM90,3031
#define  EACCES EACCES91,3077
#define  EFAULT EFAULT92,3127
#define  ENOTBLK ENOTBLK93,3171
#define  EBUSY EBUSY94,3225
#define  EEXIST EEXIST95,3281
#define  EXDEV EXDEV96,3325
#define  ENODEV ENODEV97,3375
#define  ENOTDIR ENOTDIR98,3422
#define  EISDIR EISDIR99,3470
#define  EINVAL EINVAL100,3517
#define  ENFILE ENFILE101,3566
#define  EMFILE EMFILE102,3618
#define  ENOTTY ENOTTY103,3670
#define  ETXTBSY ETXTBSY104,3719
#define  EFBIG EFBIG105,3766
#define  ENOSPC ENOSPC106,3813
#define  ESPIPE ESPIPE107,3869
#define  EROFS EROFS108,3914
#define  EMLINK EMLINK109,3968
#define  EPIPE EPIPE110,4015
#define  EDOM EDOM111,4059
#define  ERANGE ERANGE112,4127
#define  EDEADLK EDEADLK113,4189
#define  ENAMETOOLONG ENAMETOOLONG114,4251
#define  ENOLCK ENOLCK115,4302
#define  ENOSYS ENOSYS116,4360
#define  ENOTEMPTY ENOTEMPTY117,4417
#define  ELOOP ELOOP118,4469
#define  EWOULDBLOCK EWOULDBLOCK119,4537
#define  ENOMSG ENOMSG120,4595
#define  EIDRM EIDRM121,4654
#define  ECHRNG ECHRNG122,4705
#define  EL2NSYNC EL2NSYNC123,4765
#define  EL3HLT EL3HLT124,4822
#define  EL3RST EL3RST125,4869
#define  ELNRNG ELNRNG126,4915
#define  EUNATCH EUNATCH127,4972
#define  ENOCSI ENOCSI128,5033
#define  EL2HLT EL2HLT129,5092
#define  EBADE EBADE130,5139
#define  EBADR EBADR131,5188
#define  EXFULL EXFULL132,5247
#define  ENOANO ENOANO133,5293
#define  EBADRQC EBADRQC134,5334
#define  EBADSLT EBADSLT135,5387
#define  EDEADLOCK EDEADLOCK137,5433
#define  EBFONT EBFONT139,5464
#define  ENOSTR ENOSTR140,5517
#define  ENODATA ENODATA141,5569
#define  ETIME ETIME142,5619
#define  ENOSR ENOSR143,5665
#define  ENONET ENONET144,5722
#define  ENOPKG ENOPKG145,5784
#define  EREMOTE EREMOTE146,5838
#define  ENOLINK ENOLINK147,5887
#define  EADV EADV148,5941
#define  ESRMNT ESRMNT149,5989
#define  ECOMM ECOMM150,6035
#define  EPROTO EPROTO151,6095
#define  EMULTIHOP EMULTIHOP152,6142
#define  EDOTDOT EDOTDOT153,6193
#define  EBADMSG EBADMSG154,6244
#define  EOVERFLOW EOVERFLOW155,6295
#define  ENOTUNIQ ENOTUNIQ156,6365
#define  EBADFD EBADFD157,6424
#define  EREMCHG EREMCHG158,6485
#define  ELIBACC ELIBACC159,6540
#define  ELIBBAD ELIBBAD160,6611
#define  ELIBSCN ELIBSCN161,6680
#define  ELIBMAX ELIBMAX162,6744
#define  ELIBEXEC ELIBEXEC163,6824
#define  EILSEQ EILSEQ164,6894
#define  ERESTART ERESTART165,6948
#define  ESTRPIPE ESTRPIPE166,7024
#define  EUSERS EUSERS167,7075
#define  ENOTSOCK ENOTSOCK168,7122
#define  EDESTADDRREQ EDESTADDRREQ169,7185
#define  EMSGSIZE EMSGSIZE170,7246
#define  EPROTOTYPE EPROTOTYPE171,7295
#define  ENOPROTOOPT ENOPROTOOPT172,7358
#define  EPROTONOSUPPORT EPROTONOSUPPORT173,7413
#define  ESOCKTNOSUPPORT ESOCKTNOSUPPORT174,7471
#define  EOPNOTSUPP EOPNOTSUPP175,7532
#define  EPFNOSUPPORT EPFNOSUPPORT176,7613
#define  EAFNOSUPPORT EAFNOSUPPORT177,7678
#define  EADDRINUSE EADDRINUSE178,7754
#define  EADDRNOTAVAIL EADDRNOTAVAIL179,7812
#define  ENETDOWN ENETDOWN180,7879
#define  ENETUNREACH ENETUNREACH181,7930
#define  ENETRESET ENETRESET182,7988
#define  ECONNABORTED ECONNABORTED183,8067
#define  ECONNRESET ECONNRESET184,8135
#define  ENOBUFS ENOBUFS185,8195
#define  EISCONN EISCONN186,8256
#define  ENOTCONN ENOTCONN187,8331
#define  ESHUTDOWN ESHUTDOWN188,8402
#define  ETOOMANYREFS ETOOMANYREFS189,8483
#define  ETIMEDOUT ETIMEDOUT190,8553
#define  ECONNREFUSED ECONNREFUSED191,8609
#define  EHOSTDOWN EHOSTDOWN192,8663
#define  EHOSTUNREACH EHOSTUNREACH193,8711
#define  EALREADY EALREADY194,8763
#define  EINPROGRESS EINPROGRESS195,8828
#define  ESTALE ESTALE196,8889
#define  EUCLEAN EUCLEAN197,8946
#define  ENOTNAM ENOTNAM198,9006
#define  ENAVAIL ENAVAIL199,9069
#define  EISNAM EISNAM200,9134
#define  EREMOTEIO EREMOTEIO201,9190
#define  EDQUOT EDQUOT202,9242
#define  ENOMEDIUM ENOMEDIUM204,9293
#define  EMEDIUMTYPE EMEDIUMTYPE205,9344
#define ENSROK ENSROK208,9399
#define ENSRNODATA ENSRNODATA209,9481
#define ENSRFORMERR ENSRFORMERR210,9563
#define ENSRSERVFAIL ENSRSERVFAIL211,9646
#define ENSRNOTFOUND ENSRNOTFOUND212,9724
#define ENSRNOTIMP ENSRNOTIMP213,9788
#define ENSRREFUSED ENSRREFUSED214,9880
#define ENSRBADQUERY ENSRBADQUERY215,9947
#define ENSRBADNAME ENSRBADNAME216,10012
#define ENSRBADFAMILY ENSRBADFAMILY217,10079
#define ENSRBADRESP ENSRBADRESP218,10148
#define ENSRCONNREFUSED ENSRCONNREFUSED219,10213
#define ENSRTIMEOUT ENSRTIMEOUT220,10285
#define ENSROF ENSROF221,10364
#define ENSRFILE ENSRFILE222,10418
#define ENSRNOMEM ENSRNOMEM223,10479
#define ENSRDESTRUCTION ENSRDESTRUCTION224,10535
#define ENSRQUERYDOMAINTOOLONG ENSRQUERYDOMAINTOOLONG225,10607
#define ENSRCNAMELOOP ENSRCNAMELOOP226,10673

include/lwip/udp.h,1149
#define __LWIP_UDP_H____LWIP_UDP_H__33,1631
#define UDP_HLEN UDP_HLEN48,1885
struct udp_hdr {udp_hdr55,2043
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT60,2218
#define UDP_FLAGS_NOCHKSUM UDP_FLAGS_NOCHKSUM66,2325
#define UDP_FLAGS_UDPLITE UDP_FLAGS_UDPLITE67,2364
#define UDP_FLAGS_CONNECTED UDP_FLAGS_CONNECTED68,2403
#define UDP_FLAGS_MULTICAST_LOOP UDP_FLAGS_MULTICAST_LOOP69,2442
typedef void (*udp_recv_fn)(void *arg, struct udp_pcb *pcb, struct pbuf *p,udp_recv_fn87,3117
struct udp_pcb {udp_pcb91,3229
  IP_PCB;IP_PCB93,3284
  struct udp_pcb *next;next97,3332
  u8_t flags;flags99,3357
  u16_t local_port, remote_port;local_port101,3409
  u16_t local_port, remote_port;remote_port101,3409
  ip_addr_t multicast_ip;multicast_ip105,3515
  u16_t chksum_len_rx, chksum_len_tx;chksum_len_rx110,3614
  u16_t chksum_len_rx, chksum_len_tx;chksum_len_tx110,3614
  udp_recv_fn recv;recv114,3714
  void *recv_arg;  recv_arg116,3788
#define          udp_flags(udp_flags151,5573
#define          udp_setflags(udp_setflags152,5620
#define udp_init(udp_init157,5819
#define udp_debug_print(udp_debug_print162,5950

include/lwip/raw.h,374
#define __LWIP_RAW_H____LWIP_RAW_H__33,1617
typedef u8_t (*raw_recv_fn)(void *arg, struct raw_pcb *pcb, struct pbuf *p,raw_recv_fn60,2364
struct raw_pcb {raw_pcb63,2463
  IP_PCB;IP_PCB65,2520
  struct raw_pcb *next;next67,2531
  u8_t protocol;protocol69,2556
  raw_recv_fn recv;recv72,2609
  void *recv_arg;recv_arg74,2682
#define raw_init(raw_init90,3427

include/lwip/stats.h,6975
#define __LWIP_STATS_H____LWIP_STATS_H__33,1633
#define LWIP_STATS_LARGE LWIP_STATS_LARGE47,1809
#define STAT_COUNTER STAT_COUNTER51,1865
#define STAT_COUNTER_F STAT_COUNTER_F52,1896
#define STAT_COUNTER STAT_COUNTER54,1933
#define STAT_COUNTER_F STAT_COUNTER_F55,1964
struct stats_proto {stats_proto58,2004
  STAT_COUNTER xmit;             /* Transmitted packets. */xmit59,2025
  STAT_COUNTER recv;             /* Received packets. */recv60,2085
  STAT_COUNTER fw;               /* Forwarded packets. */fw61,2142
  STAT_COUNTER drop;             /* Dropped packets. */drop62,2200
  STAT_COUNTER chkerr;           /* Checksum error. */chkerr63,2256
  STAT_COUNTER lenerr;           /* Invalid length error. */lenerr64,2311
  STAT_COUNTER memerr;           /* Out of memory error. */memerr65,2372
  STAT_COUNTER rterr;            /* Routing error. */rterr66,2432
  STAT_COUNTER proterr;          /* Protocol error. */proterr67,2486
  STAT_COUNTER opterr;           /* Error in options. */opterr68,2541
  STAT_COUNTER err;              /* Misc error. */err69,2598
  STAT_COUNTER cachehit;cachehit70,2649
struct stats_igmp {stats_igmp73,2678
  STAT_COUNTER xmit;             /* Transmitted packets. */xmit74,2698
  STAT_COUNTER recv;             /* Received packets. */recv75,2758
  STAT_COUNTER drop;             /* Dropped packets. */drop76,2815
  STAT_COUNTER chkerr;           /* Checksum error. */chkerr77,2871
  STAT_COUNTER lenerr;           /* Invalid length error. */lenerr78,2926
  STAT_COUNTER memerr;           /* Out of memory error. */memerr79,2987
  STAT_COUNTER proterr;          /* Protocol error. */proterr80,3047
  STAT_COUNTER rx_v1;            /* Received v1 frames. */rx_v181,3102
  STAT_COUNTER rx_group;         /* Received group-specific queries. */rx_group82,3161
  STAT_COUNTER rx_general;       /* Received general queries. */rx_general83,3233
  STAT_COUNTER rx_report;        /* Received reports. */rx_report84,3298
  STAT_COUNTER tx_join;          /* Sent joins. */tx_join85,3355
  STAT_COUNTER tx_leave;         /* Sent leaves. */tx_leave86,3406
  STAT_COUNTER tx_report;        /* Sent reports. */tx_report87,3458
struct stats_mem {stats_mem90,3515
  const char *name;name92,3552
  mem_size_t avail;avail94,3596
  mem_size_t used;used95,3616
  mem_size_t max;max96,3635
  STAT_COUNTER err;err97,3653
  STAT_COUNTER illegal;illegal98,3673
struct stats_syselem {stats_syselem101,3701
  STAT_COUNTER used;used102,3724
  STAT_COUNTER max;max103,3745
  STAT_COUNTER err;err104,3765
struct stats_sys {stats_sys107,3789
  struct stats_syselem sem;sem108,3808
  struct stats_syselem mutex;mutex109,3836
  struct stats_syselem mbox;mbox110,3866
struct stats_ {stats_113,3899
  struct stats_proto link;link115,3930
  struct stats_proto etharp;etharp118,3981
  struct stats_proto ip_frag;ip_frag121,4034
  struct stats_proto ip;ip124,4084
  struct stats_proto icmp;icmp127,4131
  struct stats_igmp igmp;igmp130,4180
  struct stats_proto udp;udp133,4227
  struct stats_proto tcp;tcp136,4274
  struct stats_mem mem;mem139,4321
  struct stats_mem memp[MEMP_MAX];memp142,4367
  struct stats_sys sys;sys145,4423
#define STATS_INC(STATS_INC153,4516
#define STATS_DEC(STATS_DEC154,4552
#define STATS_INC_USED(STATS_INC_USED155,4588
#define stats_init(stats_init161,4901
#define STATS_INC(STATS_INC162,4922
#define STATS_DEC(STATS_DEC163,4943
#define STATS_INC_USED(STATS_INC_USED164,4964
#define TCP_STATS_INC(TCP_STATS_INC168,5029
#define TCP_STATS_DISPLAY(TCP_STATS_DISPLAY169,5067
#define TCP_STATS_INC(TCP_STATS_INC171,5145
#define TCP_STATS_DISPLAY(TCP_STATS_DISPLAY172,5170
#define UDP_STATS_INC(UDP_STATS_INC176,5220
#define UDP_STATS_DISPLAY(UDP_STATS_DISPLAY177,5258
#define UDP_STATS_INC(UDP_STATS_INC179,5336
#define UDP_STATS_DISPLAY(UDP_STATS_DISPLAY180,5361
#define ICMP_STATS_INC(ICMP_STATS_INC184,5412
#define ICMP_STATS_DISPLAY(ICMP_STATS_DISPLAY185,5451
#define ICMP_STATS_INC(ICMP_STATS_INC187,5532
#define ICMP_STATS_DISPLAY(ICMP_STATS_DISPLAY188,5558
#define IGMP_STATS_INC(IGMP_STATS_INC192,5610
#define IGMP_STATS_DISPLAY(IGMP_STATS_DISPLAY193,5649
#define IGMP_STATS_INC(IGMP_STATS_INC195,5721
#define IGMP_STATS_DISPLAY(IGMP_STATS_DISPLAY196,5747
#define IP_STATS_INC(IP_STATS_INC200,5797
#define IP_STATS_DISPLAY(IP_STATS_DISPLAY201,5834
#define IP_STATS_INC(IP_STATS_INC203,5909
#define IP_STATS_DISPLAY(IP_STATS_DISPLAY204,5933
#define IPFRAG_STATS_INC(IPFRAG_STATS_INC208,5985
#define IPFRAG_STATS_DISPLAY(IPFRAG_STATS_DISPLAY209,6026
#define IPFRAG_STATS_INC(IPFRAG_STATS_INC211,6115
#define IPFRAG_STATS_DISPLAY(IPFRAG_STATS_DISPLAY212,6143
#define ETHARP_STATS_INC(ETHARP_STATS_INC216,6199
#define ETHARP_STATS_DISPLAY(ETHARP_STATS_DISPLAY217,6240
#define ETHARP_STATS_INC(ETHARP_STATS_INC219,6327
#define ETHARP_STATS_DISPLAY(ETHARP_STATS_DISPLAY220,6355
#define LINK_STATS_INC(LINK_STATS_INC224,6409
#define LINK_STATS_DISPLAY(LINK_STATS_DISPLAY225,6448
#define LINK_STATS_INC(LINK_STATS_INC227,6529
#define LINK_STATS_DISPLAY(LINK_STATS_DISPLAY228,6555
#define MEM_STATS_AVAIL(MEM_STATS_AVAIL232,6606
#define MEM_STATS_INC(MEM_STATS_INC233,6657
#define MEM_STATS_INC_USED(MEM_STATS_INC_USED234,6699
#define MEM_STATS_DEC_USED(MEM_STATS_DEC_USED235,6755
#define MEM_STATS_DISPLAY(MEM_STATS_DISPLAY236,6810
#define MEM_STATS_AVAIL(MEM_STATS_AVAIL238,6887
#define MEM_STATS_INC(MEM_STATS_INC239,6917
#define MEM_STATS_INC_USED(MEM_STATS_INC_USED240,6942
#define MEM_STATS_DEC_USED(MEM_STATS_DEC_USED241,6975
#define MEM_STATS_DISPLAY(MEM_STATS_DISPLAY242,7008
#define MEMP_STATS_AVAIL(MEMP_STATS_AVAIL246,7059
#define MEMP_STATS_INC(MEMP_STATS_INC247,7118
#define MEMP_STATS_DEC(MEMP_STATS_DEC248,7168
#define MEMP_STATS_INC_USED(MEMP_STATS_INC_USED249,7218
#define MEMP_STATS_DISPLAY(MEMP_STATS_DISPLAY250,7279
#define MEMP_STATS_AVAIL(MEMP_STATS_AVAIL252,7358
#define MEMP_STATS_INC(MEMP_STATS_INC253,7392
#define MEMP_STATS_DEC(MEMP_STATS_DEC254,7421
#define MEMP_STATS_INC_USED(MEMP_STATS_INC_USED255,7450
#define MEMP_STATS_DISPLAY(MEMP_STATS_DISPLAY256,7484
#define SYS_STATS_INC(SYS_STATS_INC260,7536
#define SYS_STATS_DEC(SYS_STATS_DEC261,7578
#define SYS_STATS_INC_USED(SYS_STATS_INC_USED262,7620
#define SYS_STATS_DISPLAY(SYS_STATS_DISPLAY263,7675
#define SYS_STATS_INC(SYS_STATS_INC265,7744
#define SYS_STATS_DEC(SYS_STATS_DEC266,7769
#define SYS_STATS_INC_USED(SYS_STATS_INC_USED267,7794
#define SYS_STATS_DISPLAY(SYS_STATS_DISPLAY268,7824
#define stats_display(stats_display280,8248
#define stats_display_proto(stats_display_proto281,8272
#define stats_display_igmp(stats_display_igmp282,8313
#define stats_display_mem(stats_display_mem283,8346
#define stats_display_memp(stats_display_memp284,8383
#define stats_display_sys(stats_display_sys285,8422

include/lwip/api.h,3708
#define __LWIP_API_H____LWIP_API_H__33,1631
#define NETCONN_NOFLAG NETCONN_NOFLAG55,2099
#define NETCONN_NOCOPY NETCONN_NOCOPY56,2130
#define NETCONN_COPY NETCONN_COPY57,2202
#define NETCONN_MORE NETCONN_MORE58,2233
#define NETCONN_DONTBLOCK NETCONN_DONTBLOCK59,2264
#define NETCONN_FLAG_WRITE_DELAYED NETCONN_FLAG_WRITE_DELAYED65,2544
#define NETCONN_FLAG_NON_BLOCKING NETCONN_FLAG_NON_BLOCKING67,2638
#define NETCONN_FLAG_IN_NONBLOCKING_CONNECT NETCONN_FLAG_IN_NONBLOCKING_CONNECT69,2744
#define NETCONN_FLAG_NO_AUTO_RECVED NETCONN_FLAG_NO_AUTO_RECVED72,2929
#define NETCONN_FLAG_CHECK_WRITESPACE NETCONN_FLAG_CHECK_WRITESPACE75,3097
#define NETCONNTYPE_GROUP(NETCONNTYPE_GROUP79,3214
#define NETCONNTYPE_DATAGRAM(NETCONNTYPE_DATAGRAM80,3255
enum netconn_type {netconn_type83,3344
  NETCONN_INVALID    = 0,NETCONN_INVALID84,3364
  NETCONN_TCP        = 0x10,NETCONN_TCP86,3416
  NETCONN_UDP        = 0x20,NETCONN_UDP88,3471
  NETCONN_UDPLITE    = 0x21,NETCONN_UDPLITE89,3500
  NETCONN_UDPNOCHKSUM= 0x22,NETCONN_UDPNOCHKSUM90,3529
  NETCONN_RAW        = 0x40NETCONN_RAW92,3584
enum netconn_state {netconn_state97,3707
  NETCONN_NONE,NETCONN_NONE98,3728
  NETCONN_WRITE,NETCONN_WRITE99,3744
  NETCONN_LISTEN,NETCONN_LISTEN100,3761
  NETCONN_CONNECT,NETCONN_CONNECT101,3779
  NETCONN_CLOSENETCONN_CLOSE102,3798
enum netconn_evt {netconn_evt106,3875
  NETCONN_EVT_RCVPLUS,NETCONN_EVT_RCVPLUS107,3894
  NETCONN_EVT_RCVMINUS,NETCONN_EVT_RCVMINUS108,3917
  NETCONN_EVT_SENDPLUS,NETCONN_EVT_SENDPLUS109,3941
  NETCONN_EVT_SENDMINUS,NETCONN_EVT_SENDMINUS110,3965
  NETCONN_EVT_ERRORNETCONN_EVT_ERROR111,3990
enum netconn_igmp {netconn_igmp116,4071
  NETCONN_JOIN,NETCONN_JOIN117,4091
  NETCONN_LEAVENETCONN_LEAVE118,4107
typedef void (* netconn_callback)(struct netconn *, enum netconn_evt, u16_t len);netconn_callback131,4384
struct netconn {netconn134,4495
  enum netconn_type type;type136,4559
  enum netconn_state state;state138,4623
    struct ip_pcb  *ip;ip141,4711
    struct tcp_pcb *tcp;tcp142,4735
    struct udp_pcb *udp;udp143,4760
    struct raw_pcb *raw;raw144,4785
  } pcb;pcb145,4810
  err_t last_err;last_err147,4860
  sys_sem_t op_completed;op_completed149,4960
  sys_mbox_t recvmbox;recvmbox152,5118
  sys_mbox_t acceptmbox;acceptmbox156,5249
  int socket;socket160,5348
  int recv_timeout;recv_timeout165,5517
  int recv_bufsize;recv_bufsize170,5686
  s16_t recv_avail;recv_avail174,5871
  u8_t flags;flags177,5998
  size_t write_offset;write_offset181,6163
  struct api_msg_msg *current_msg;current_msg185,6353
  netconn_callback callback;callback188,6486
#define API_EVENT(API_EVENT192,6563
#define NETCONN_SET_SAFE_ERR(NETCONN_SET_SAFE_ERR197,6765
#define netconn_new(netconn_new207,7028
#define netconn_new_with_callback(netconn_new_with_callback208,7116
#define netconn_type(netconn_type214,7462
#define netconn_peer(netconn_peer218,7616
#define netconn_addr(netconn_addr219,7669
#define netconn_listen(netconn_listen225,7996
#define netconn_err(netconn_err246,9091
#define netconn_recv_bufsize(netconn_recv_bufsize247,9150
#define netconn_set_nonblocking(netconn_set_nonblocking250,9293
#define netconn_is_nonblocking(netconn_is_nonblocking255,9552
#define netconn_set_noautorecved(netconn_set_noautorecved258,9741
#define netconn_get_noautorecved(netconn_get_noautorecved263,10019
#define netconn_set_recvtimeout(netconn_set_recvtimeout267,10187
#define netconn_get_recvtimeout(netconn_get_recvtimeout269,10321
#define netconn_set_recvbufsize(netconn_set_recvbufsize273,10484
#define netconn_get_recvbufsize(netconn_get_recvbufsize275,10614

include/lwip/netifapi.h,1405
#define __LWIP_NETIFAPI_H____LWIP_NETIFAPI_H__29,1501
typedef void (*netifapi_void_fn)(struct netif *netif);netifapi_void_fn44,1766
typedef err_t (*netifapi_errt_fn)(struct netif *netif);netifapi_errt_fn45,1821
struct netifapi_msg_msg {netifapi_msg_msg47,1878
  sys_sem_t sem;sem49,1933
  err_t err;err51,1988
  struct netif *netif;netif52,2001
      ip_addr_t *ipaddr;ipaddr55,2047
      ip_addr_t *netmask;netmask56,2072
      ip_addr_t *gw;gw57,2098
      void *state;state58,2119
      netif_init_fn init;init59,2138
      netif_input_fn input;input60,2164
    } add;add61,2192
      netifapi_void_fn voidfunc;voidfunc63,2216
      netifapi_errt_fn errtfunc;errtfunc64,2249
    } common;common65,2282
  } msg;msg66,2296
struct netifapi_msg {netifapi_msg69,2309
  void (* function)(struct netifapi_msg_msg *msg);function70,2331
  struct netifapi_msg_msg msg;msg71,2382
#define netifapi_netif_remove(netifapi_netif_remove93,3193
#define netifapi_netif_set_up(netifapi_netif_set_up94,3276
#define netifapi_netif_set_down(netifapi_netif_set_down95,3359
#define netifapi_netif_set_default(netifapi_netif_set_default96,3444
#define netifapi_dhcp_start(netifapi_dhcp_start97,3532
#define netifapi_dhcp_stop(netifapi_dhcp_stop98,3613
#define netifapi_autoip_start(netifapi_autoip_start99,3693
#define netifapi_autoip_stop(netifapi_autoip_stop100,3776

include/lwip/init.h,610
#define __LWIP_INIT_H____LWIP_INIT_H__33,1632
#define LWIP_VERSION_MAJOR LWIP_VERSION_MAJOR42,1761
#define LWIP_VERSION_MINOR LWIP_VERSION_MINOR44,1837
#define LWIP_VERSION_REVISION LWIP_VERSION_REVISION46,1908
#define LWIP_VERSION_RC LWIP_VERSION_RC50,2135
#define LWIP_RC_RELEASE LWIP_RC_RELEASE53,2244
#define LWIP_RC_DEVELOPMENT LWIP_RC_DEVELOPMENT55,2351
#define LWIP_VERSION_IS_RELEASE LWIP_VERSION_IS_RELEASE57,2387
#define LWIP_VERSION_IS_DEVELOPMENT LWIP_VERSION_IS_DEVELOPMENT58,2460
#define LWIP_VERSION_IS_RC LWIP_VERSION_IS_RC59,2537
#define LWIP_VERSION LWIP_VERSION62,2698

include/lwip/memp.h,1132
#define __LWIP_MEMP_H____LWIP_MEMP_H__34,1633
#define LWIP_MEMPOOL(LWIP_MEMPOOL44,1838
  MEMP_MAXMEMP_MAX46,1920
} memp_t;memp_t47,1931
    MEMP_POOL_HELPER_FIRST = ((u8_t)MEMP_POOL_HELPER_FIRST54,2186
#define LWIP_MEMPOOL(LWIP_MEMPOOL55,2223
#define LWIP_MALLOC_MEMPOOL_START LWIP_MALLOC_MEMPOOL_START56,2264
#define LWIP_MALLOC_MEMPOOL(LWIP_MALLOC_MEMPOOL57,2300
#define LWIP_MALLOC_MEMPOOL_ENDLWIP_MALLOC_MEMPOOL_END58,2362
    MEMP_POOL_HELPER_LAST = ((u8_t)MEMP_POOL_HELPER_LAST63,2547
#define LWIP_MEMPOOL(LWIP_MEMPOOL64,2583
#define LWIP_MALLOC_MEMPOOL_STARTLWIP_MALLOC_MEMPOOL_START65,2624
#define LWIP_MALLOC_MEMPOOL(LWIP_MALLOC_MEMPOOL66,2658
#define LWIP_MALLOC_MEMPOOL_END LWIP_MALLOC_MEMPOOL_END67,2720
} memp_pool_helper_t;memp_pool_helper_t70,2787
#define MEMP_POOL_FIRST MEMP_POOL_FIRST74,2962
#define MEMP_POOL_LAST MEMP_POOL_LAST75,3020
#define memp_init(memp_init86,3270
#define memp_malloc(memp_malloc87,3290
#define memp_free(memp_free88,3349
struct memp_malloc_helpermemp_malloc_helper94,3511
   memp_t poolnr;poolnr96,3539
#define memp_malloc(memp_malloc104,3705

include/lwip/sys.h,2142
#define __LWIP_SYS_H____LWIP_SYS_H__33,1631
typedef u8_t sys_sem_t;sys_sem_t45,1835
typedef u8_t sys_mutex_t;sys_mutex_t46,1859
typedef u8_t sys_mbox_t;sys_mbox_t47,1885
#define sys_sem_new(sys_sem_new49,1911
#define sys_sem_signal(sys_sem_signal50,1944
#define sys_sem_wait(sys_sem_wait51,1970
#define sys_arch_sem_wait(sys_arch_sem_wait52,1994
#define sys_sem_free(sys_sem_free53,2025
#define sys_mutex_new(sys_mutex_new54,2049
#define sys_mutex_lock(sys_mutex_lock55,2082
#define sys_mutex_unlock(sys_mutex_unlock56,2109
#define sys_mutex_free(sys_mutex_free57,2138
#define sys_mbox_new(sys_mbox_new58,2165
#define sys_mbox_fetch(sys_mbox_fetch59,2199
#define sys_mbox_tryfetch(sys_mbox_tryfetch60,2227
#define sys_mbox_post(sys_mbox_post61,2258
#define sys_mbox_trypost(sys_mbox_trypost62,2285
#define sys_mbox_free(sys_mbox_free63,2315
#define sys_thread_new(sys_thread_new65,2341
#define sys_msleep(sys_msleep67,2376
#define SYS_ARCH_TIMEOUT SYS_ARCH_TIMEOUT72,2498
#define SYS_MBOX_EMPTY SYS_MBOX_EMPTY77,2683
typedef void (*lwip_thread_fn)(void *arg);lwip_thread_fn83,2822
#define sys_mutex_t sys_mutex_t94,3194
#define sys_mutex_new(sys_mutex_new95,3242
#define sys_mutex_lock(sys_mutex_lock96,3302
#define sys_mutex_unlock(sys_mutex_unlock97,3360
#define sys_mutex_free(sys_mutex_free98,3420
#define sys_mutex_valid(sys_mutex_valid99,3478
#define sys_mutex_set_invalid(sys_mutex_set_invalid100,3537
#define sys_sem_wait(sys_sem_wait147,5223
#define sys_mbox_tryfetch(sys_mbox_tryfetch197,7498
#define sys_mbox_fetch(sys_mbox_fetch201,7659
#define SYS_ARCH_DECL_PROTECT(SYS_ARCH_DECL_PROTECT252,9580
#define SYS_ARCH_PROTECT(SYS_ARCH_PROTECT262,10160
#define SYS_ARCH_UNPROTECT(SYS_ARCH_UNPROTECT271,10645
#define SYS_ARCH_DECL_PROTECT(SYS_ARCH_DECL_PROTECT277,10786
#define SYS_ARCH_PROTECT(SYS_ARCH_PROTECT278,10821
#define SYS_ARCH_UNPROTECT(SYS_ARCH_UNPROTECT279,10851
#define SYS_ARCH_INC(SYS_ARCH_INC291,11131
#define SYS_ARCH_DEC(SYS_ARCH_DEC300,11500
#define SYS_ARCH_GET(SYS_ARCH_GET309,11869
#define SYS_ARCH_SET(SYS_ARCH_SET318,12237

include/lwip/snmp.h,9980
#define __LWIP_SNMP_H____LWIP_SNMP_H__34,1724
enum snmp_ifType {snmp_ifType50,1920
  snmp_ifType_other=1,                /* none of the following */snmp_ifType_other51,1939
  snmp_ifType_regular1822,snmp_ifType_regular182252,2005
  snmp_ifType_hdh1822,snmp_ifType_hdh182253,2032
  snmp_ifType_ddn_x25,snmp_ifType_ddn_x2554,2055
  snmp_ifType_rfc877_x25,snmp_ifType_rfc877_x2555,2078
  snmp_ifType_ethernet_csmacd,snmp_ifType_ethernet_csmacd56,2104
  snmp_ifType_iso88023_csmacd,snmp_ifType_iso88023_csmacd57,2135
  snmp_ifType_iso88024_tokenBus,snmp_ifType_iso88024_tokenBus58,2166
  snmp_ifType_iso88025_tokenRing,snmp_ifType_iso88025_tokenRing59,2199
  snmp_ifType_iso88026_man,snmp_ifType_iso88026_man60,2233
  snmp_ifType_starLan,snmp_ifType_starLan61,2261
  snmp_ifType_proteon_10Mbit,snmp_ifType_proteon_10Mbit62,2284
  snmp_ifType_proteon_80Mbit,snmp_ifType_proteon_80Mbit63,2314
  snmp_ifType_hyperchannel,snmp_ifType_hyperchannel64,2344
  snmp_ifType_fddi,snmp_ifType_fddi65,2372
  snmp_ifType_lapb,snmp_ifType_lapb66,2392
  snmp_ifType_sdlc,snmp_ifType_sdlc67,2412
  snmp_ifType_ds1,                    /* T-1 */snmp_ifType_ds168,2432
  snmp_ifType_e1,                     /* european equiv. of T-1 */snmp_ifType_e169,2480
  snmp_ifType_basicISDN,snmp_ifType_basicISDN70,2547
  snmp_ifType_primaryISDN,            /* proprietary serial */snmp_ifType_primaryISDN71,2572
  snmp_ifType_propPointToPointSerial,snmp_ifType_propPointToPointSerial72,2635
  snmp_ifType_ppp,snmp_ifType_ppp73,2673
  snmp_ifType_softwareLoopback,snmp_ifType_softwareLoopback74,2692
  snmp_ifType_eon,                    /* CLNP over IP [11] */snmp_ifType_eon75,2724
  snmp_ifType_ethernet_3Mbit,snmp_ifType_ethernet_3Mbit76,2786
  snmp_ifType_nsip,                   /* XNS over IP */snmp_ifType_nsip77,2816
  snmp_ifType_slip,                   /* generic SLIP */snmp_ifType_slip78,2872
  snmp_ifType_ultra,                  /* ULTRA technologies */snmp_ifType_ultra79,2929
  snmp_ifType_ds3,                    /* T-3 */snmp_ifType_ds380,2992
  snmp_ifType_sip,                    /* SMDS */snmp_ifType_sip81,3040
  snmp_ifType_frame_relaysnmp_ifType_frame_relay82,3089
#define SNMP_SYSUPTIME_INTERVAL SNMP_SYSUPTIME_INTERVAL88,3225
#define LWIP_SNMP_OBJ_ID_LEN LWIP_SNMP_OBJ_ID_LEN91,3316
struct snmp_obj_idsnmp_obj_id94,3398
  u8_t len;len96,3419
  s32_t id[LWIP_SNMP_OBJ_ID_LEN];id97,3431
#define snmp_set_sysdesr(snmp_set_sysdesr234,8237
#define snmp_set_sysobjid(snmp_set_sysobjid235,8272
#define snmp_get_sysobjid_ptr(snmp_get_sysobjid_ptr236,8304
#define snmp_inc_sysuptime(snmp_inc_sysuptime237,8339
#define snmp_add_sysuptime(snmp_add_sysuptime238,8368
#define snmp_get_sysuptime(snmp_get_sysuptime239,8402
#define snmp_set_syscontact(snmp_set_syscontact240,8436
#define snmp_set_sysname(snmp_set_sysname241,8482
#define snmp_set_syslocation(snmp_set_syslocation242,8525
#define snmp_add_ifinoctets(snmp_add_ifinoctets245,8597
#define snmp_inc_ifinucastpkts(snmp_inc_ifinucastpkts246,8636
#define snmp_inc_ifinnucastpkts(snmp_inc_ifinnucastpkts247,8671
#define snmp_inc_ifindiscards(snmp_inc_ifindiscards248,8707
#define snmp_add_ifoutoctets(snmp_add_ifoutoctets249,8741
#define snmp_inc_ifoutucastpkts(snmp_inc_ifoutucastpkts250,8780
#define snmp_inc_ifoutnucastpkts(snmp_inc_ifoutnucastpkts251,8816
#define snmp_inc_ifoutdiscards(snmp_inc_ifoutdiscards252,8853
#define snmp_inc_iflist(snmp_inc_iflist253,8888
#define snmp_dec_iflist(snmp_dec_iflist254,8914
#define snmp_insert_arpidx_tree(snmp_insert_arpidx_tree257,8951
#define snmp_delete_arpidx_tree(snmp_delete_arpidx_tree258,8990
#define snmp_inc_ipinreceives(snmp_inc_ipinreceives261,9039
#define snmp_inc_ipinhdrerrors(snmp_inc_ipinhdrerrors262,9071
#define snmp_inc_ipinaddrerrors(snmp_inc_ipinaddrerrors263,9104
#define snmp_inc_ipforwdatagrams(snmp_inc_ipforwdatagrams264,9138
#define snmp_inc_ipinunknownprotos(snmp_inc_ipinunknownprotos265,9173
#define snmp_inc_ipindiscards(snmp_inc_ipindiscards266,9210
#define snmp_inc_ipindelivers(snmp_inc_ipindelivers267,9242
#define snmp_inc_ipoutrequests(snmp_inc_ipoutrequests268,9274
#define snmp_inc_ipoutdiscards(snmp_inc_ipoutdiscards269,9307
#define snmp_inc_ipoutnoroutes(snmp_inc_ipoutnoroutes270,9340
#define snmp_inc_ipreasmreqds(snmp_inc_ipreasmreqds271,9373
#define snmp_inc_ipreasmoks(snmp_inc_ipreasmoks272,9405
#define snmp_inc_ipreasmfails(snmp_inc_ipreasmfails273,9435
#define snmp_inc_ipfragoks(snmp_inc_ipfragoks274,9467
#define snmp_inc_ipfragfails(snmp_inc_ipfragfails275,9496
#define snmp_inc_ipfragcreates(snmp_inc_ipfragcreates276,9527
#define snmp_inc_iproutingdiscards(snmp_inc_iproutingdiscards277,9560
#define snmp_insert_ipaddridx_tree(snmp_insert_ipaddridx_tree278,9597
#define snmp_delete_ipaddridx_tree(snmp_delete_ipaddridx_tree279,9636
#define snmp_insert_iprteidx_tree(snmp_insert_iprteidx_tree280,9675
#define snmp_delete_iprteidx_tree(snmp_delete_iprteidx_tree281,9719
#define snmp_inc_icmpinmsgs(snmp_inc_icmpinmsgs284,9775
#define snmp_inc_icmpinerrors(snmp_inc_icmpinerrors285,9805
#define snmp_inc_icmpindestunreachs(snmp_inc_icmpindestunreachs286,9838
#define snmp_inc_icmpintimeexcds(snmp_inc_icmpintimeexcds287,9877
#define snmp_inc_icmpinparmprobs(snmp_inc_icmpinparmprobs288,9912
#define snmp_inc_icmpinsrcquenchs(snmp_inc_icmpinsrcquenchs289,9948
#define snmp_inc_icmpinredirects(snmp_inc_icmpinredirects290,9985
#define snmp_inc_icmpinechos(snmp_inc_icmpinechos291,10021
#define snmp_inc_icmpinechoreps(snmp_inc_icmpinechoreps292,10053
#define snmp_inc_icmpintimestamps(snmp_inc_icmpintimestamps293,10087
#define snmp_inc_icmpintimestampreps(snmp_inc_icmpintimestampreps294,10124
#define snmp_inc_icmpinaddrmasks(snmp_inc_icmpinaddrmasks295,10163
#define snmp_inc_icmpinaddrmaskreps(snmp_inc_icmpinaddrmaskreps296,10198
#define snmp_inc_icmpoutmsgs(snmp_inc_icmpoutmsgs297,10236
#define snmp_inc_icmpouterrors(snmp_inc_icmpouterrors298,10267
#define snmp_inc_icmpoutdestunreachs(snmp_inc_icmpoutdestunreachs299,10300
#define snmp_inc_icmpouttimeexcds(snmp_inc_icmpouttimeexcds300,10340
#define snmp_inc_icmpoutparmprobs(snmp_inc_icmpoutparmprobs301,10377
#define snmp_inc_icmpoutsrcquenchs(snmp_inc_icmpoutsrcquenchs302,10413
#define snmp_inc_icmpoutredirects(snmp_inc_icmpoutredirects303,10450
#define snmp_inc_icmpoutechos(snmp_inc_icmpoutechos304,10487
#define snmp_inc_icmpoutechoreps(snmp_inc_icmpoutechoreps305,10520
#define snmp_inc_icmpouttimestamps(snmp_inc_icmpouttimestamps306,10555
#define snmp_inc_icmpouttimestampreps(snmp_inc_icmpouttimestampreps307,10592
#define snmp_inc_icmpoutaddrmasks(snmp_inc_icmpoutaddrmasks308,10632
#define snmp_inc_icmpoutaddrmaskreps(snmp_inc_icmpoutaddrmaskreps309,10668
#define snmp_inc_tcpactiveopens(snmp_inc_tcpactiveopens311,10717
#define snmp_inc_tcppassiveopens(snmp_inc_tcppassiveopens312,10751
#define snmp_inc_tcpattemptfails(snmp_inc_tcpattemptfails313,10786
#define snmp_inc_tcpestabresets(snmp_inc_tcpestabresets314,10821
#define snmp_inc_tcpinsegs(snmp_inc_tcpinsegs315,10855
#define snmp_inc_tcpoutsegs(snmp_inc_tcpoutsegs316,10884
#define snmp_inc_tcpretranssegs(snmp_inc_tcpretranssegs317,10914
#define snmp_inc_tcpinerrs(snmp_inc_tcpinerrs318,10948
#define snmp_inc_tcpoutrsts(snmp_inc_tcpoutrsts319,10977
#define snmp_inc_udpindatagrams(snmp_inc_udpindatagrams322,11018
#define snmp_inc_udpnoports(snmp_inc_udpnoports323,11052
#define snmp_inc_udpinerrors(snmp_inc_udpinerrors324,11082
#define snmp_inc_udpoutdatagrams(snmp_inc_udpoutdatagrams325,11113
#define snmp_insert_udpidx_tree(snmp_insert_udpidx_tree326,11148
#define snmp_delete_udpidx_tree(snmp_delete_udpidx_tree327,11185
#define snmp_inc_snmpinpkts(snmp_inc_snmpinpkts330,11234
#define snmp_inc_snmpoutpkts(snmp_inc_snmpoutpkts331,11264
#define snmp_inc_snmpinbadversions(snmp_inc_snmpinbadversions332,11295
#define snmp_inc_snmpinbadcommunitynames(snmp_inc_snmpinbadcommunitynames333,11332
#define snmp_inc_snmpinbadcommunityuses(snmp_inc_snmpinbadcommunityuses334,11375
#define snmp_inc_snmpinasnparseerrs(snmp_inc_snmpinasnparseerrs335,11417
#define snmp_inc_snmpintoobigs(snmp_inc_snmpintoobigs336,11455
#define snmp_inc_snmpinnosuchnames(snmp_inc_snmpinnosuchnames337,11488
#define snmp_inc_snmpinbadvalues(snmp_inc_snmpinbadvalues338,11525
#define snmp_inc_snmpinreadonlys(snmp_inc_snmpinreadonlys339,11560
#define snmp_inc_snmpingenerrs(snmp_inc_snmpingenerrs340,11595
#define snmp_add_snmpintotalreqvars(snmp_add_snmpintotalreqvars341,11628
#define snmp_add_snmpintotalsetvars(snmp_add_snmpintotalsetvars342,11671
#define snmp_inc_snmpingetrequests(snmp_inc_snmpingetrequests343,11714
#define snmp_inc_snmpingetnexts(snmp_inc_snmpingetnexts344,11751
#define snmp_inc_snmpinsetrequests(snmp_inc_snmpinsetrequests345,11785
#define snmp_inc_snmpingetresponses(snmp_inc_snmpingetresponses346,11822
#define snmp_inc_snmpintraps(snmp_inc_snmpintraps347,11860
#define snmp_inc_snmpouttoobigs(snmp_inc_snmpouttoobigs348,11891
#define snmp_inc_snmpoutnosuchnames(snmp_inc_snmpoutnosuchnames349,11925
#define snmp_inc_snmpoutbadvalues(snmp_inc_snmpoutbadvalues350,11963
#define snmp_inc_snmpoutgenerrs(snmp_inc_snmpoutgenerrs351,11999
#define snmp_inc_snmpoutgetrequests(snmp_inc_snmpoutgetrequests352,12033
#define snmp_inc_snmpoutgetnexts(snmp_inc_snmpoutgetnexts353,12071
#define snmp_inc_snmpoutsetrequests(snmp_inc_snmpoutsetrequests354,12106
#define snmp_inc_snmpoutgetresponses(snmp_inc_snmpoutgetresponses355,12144
#define snmp_inc_snmpouttraps(snmp_inc_snmpouttraps356,12183
#define snmp_get_snmpgrpid_ptr(snmp_get_snmpgrpid_ptr357,12215
#define snmp_set_snmpenableauthentraps(snmp_set_snmpenableauthentraps358,12251
#define snmp_get_snmpenableauthentraps(snmp_get_snmpenableauthentraps359,12297

include/lwip/netdb.h,1972
#define __LWIP_NETDB_H____LWIP_NETDB_H__30,1528
#define LWIP_DNS_API_DECLARE_H_ERRNO LWIP_DNS_API_DECLARE_H_ERRNO47,1802
#define LWIP_DNS_API_DEFINE_ERRORS LWIP_DNS_API_DEFINE_ERRORS51,1884
#define LWIP_DNS_API_DECLARE_STRUCTS LWIP_DNS_API_DECLARE_STRUCTS55,1966
#define EAI_NONAME EAI_NONAME60,2116
#define EAI_SERVICE EAI_SERVICE61,2144
#define EAI_FAIL EAI_FAIL62,2172
#define EAI_MEMORY EAI_MEMORY63,2200
#define HOST_NOT_FOUND HOST_NOT_FOUND65,2229
#define NO_DATA NO_DATA66,2257
#define NO_RECOVERY NO_RECOVERY67,2285
#define TRY_AGAIN TRY_AGAIN68,2313
struct hostent {hostent72,2415
    char  *h_name;      /* Official name of the host. */h_name73,2432
    char **h_aliases;   /* A pointer to an array of pointers to alternative host names,h_aliases74,2489
    int    h_addrtype;  /* Address type. */h_addrtype76,2637
    int    h_length;    /* The length, in bytes, of the address. */h_length77,2681
    char **h_addr_list; /* A pointer to an array of pointers to network addresses (inh_addr_list78,2749
#define h_addr h_addr80,2929
struct addrinfo {addrinfo83,2996
    int               ai_flags;      /* Input flags. */ai_flags84,3014
    int               ai_family;     /* Address family of socket. */ai_family85,3070
    int               ai_socktype;   /* Socket type. */ai_socktype86,3139
    int               ai_protocol;   /* Protocol of socket. */ai_protocol87,3195
    socklen_t         ai_addrlen;    /* Length of socket address. */ai_addrlen88,3258
    struct sockaddr  *ai_addr;       /* Socket address of socket. */ai_addr89,3327
    char             *ai_canonname;  /* Canonical name of service location. */ai_canonname90,3396
    struct addrinfo  *ai_next;       /* Pointer to next in list. */ai_next91,3475
#define gethostbyname(gethostbyname110,4164
#define gethostbyname_r(gethostbyname_r111,4217
#define freeaddrinfo(freeaddrinfo113,4355
#define getaddrinfo(getaddrinfo114,4414

include/lwip/timers.h,545
#define __LWIP_TIMERS_H____LWIP_TIMERS_H__34,1663
#define LWIP_TIMERS LWIP_TIMERS39,1783
#define LWIP_DEBUG_TIMERNAMES LWIP_DEBUG_TIMERNAMES52,1997
#define LWIP_DEBUG_TIMERNAMES LWIP_DEBUG_TIMERNAMES54,2060
typedef void (* sys_timeout_handler)(void *arg);sys_timeout_handler63,2319
struct sys_timeo {sys_timeo65,2369
  struct sys_timeo *next;next66,2388
  u32_t time;time67,2414
  sys_timeout_handler h;h68,2428
  void *arg;arg69,2453
  const char* handler_name;handler_name71,2492
#define sys_timeout(sys_timeout79,2719

include/lwip/debug.h,877
#define __LWIP_DEBUG_H____LWIP_DEBUG_H__33,1633
#define LWIP_DBG_LEVEL_ALL LWIP_DBG_LEVEL_ALL43,1782
#define LWIP_DBG_LEVEL_OFF LWIP_DBG_LEVEL_OFF44,1818
#define LWIP_DBG_LEVEL_WARNING LWIP_DBG_LEVEL_WARNING45,1900
#define LWIP_DBG_LEVEL_SERIOUS LWIP_DBG_LEVEL_SERIOUS46,1978
#define LWIP_DBG_LEVEL_SEVERE LWIP_DBG_LEVEL_SEVERE47,2052
#define LWIP_DBG_MASK_LEVEL LWIP_DBG_MASK_LEVEL48,2088
#define LWIP_DBG_ON LWIP_DBG_ON51,2182
#define LWIP_DBG_OFF LWIP_DBG_OFF53,2277
#define LWIP_DBG_TRACE LWIP_DBG_TRACE56,2397
#define LWIP_DBG_STATE LWIP_DBG_STATE58,2521
#define LWIP_DBG_FRESH LWIP_DBG_FRESH60,2641
#define LWIP_DBG_HALT LWIP_DBG_HALT62,2748
#define LWIP_ASSERT(LWIP_ASSERT65,2808
#define LWIP_ASSERT(LWIP_ASSERT68,2943
#define LWIP_ERROR(LWIP_ERROR73,3120
#define LWIP_DEBUGF(LWIP_DEBUGF81,3420
#define LWIP_DEBUGF(LWIP_DEBUGF94,4052

include/lwip/err.h,776
#define __LWIP_ERR_H____LWIP_ERR_H__33,1631
typedef LWIP_ERR_T err_t;err_t45,1868
typedef s8_t err_t;err_t47,1917
#define ERR_OK ERR_OK52,2001
#define ERR_MEM ERR_MEM53,2061
#define ERR_BUF ERR_BUF54,2121
#define ERR_TIMEOUT ERR_TIMEOUT55,2181
#define ERR_RTE ERR_RTE56,2241
#define ERR_INPROGRESS ERR_INPROGRESS57,2301
#define ERR_VAL ERR_VAL58,2361
#define ERR_WOULDBLOCK ERR_WOULDBLOCK59,2421
#define ERR_USE ERR_USE60,2481
#define ERR_ISCONN ERR_ISCONN61,2541
#define ERR_IS_FATAL(ERR_IS_FATAL63,2602
#define ERR_ABRT ERR_ABRT65,2646
#define ERR_RST ERR_RST66,2706
#define ERR_CLSD ERR_CLSD67,2766
#define ERR_CONN ERR_CONN68,2826
#define ERR_ARG ERR_ARG70,2887
#define ERR_IF ERR_IF72,2948
#define lwip_strerr(lwip_strerr78,3077

include/lwip/api_msg.h,1403
#define __LWIP_API_MSG_H____LWIP_API_MSG_H__33,1635
#define NETCONN_SHUT_RD NETCONN_SHUT_RD52,2018
#define NETCONN_SHUT_WR NETCONN_SHUT_WR53,2046
#define NETCONN_SHUT_RDWR NETCONN_SHUT_RDWR54,2074
struct api_msg_msg {api_msg_msg62,2456
  struct netconn *conn;conn65,2639
  err_t err;err67,2731
    struct netbuf *b;b71,2862
      u8_t proto;proto74,2928
    } n;n75,2946
      ip_addr_t *ipaddr;ipaddr78,3011
      u16_t port;port79,3036
    } bc;bc80,3054
      ip_addr_t *ipaddr;ipaddr83,3108
      u16_t *port;port84,3133
      u8_t local;local85,3152
    } ad;ad86,3170
      const void *dataptr;dataptr89,3222
      size_t len;len90,3249
      u8_t apiflags;apiflags91,3267
    } w;w92,3288
      u32_t len;len95,3338
    } r;r96,3355
      u8_t shut;shut99,3418
    } sd;sd100,3435
      ip_addr_t *multiaddr;multiaddr104,3512
      ip_addr_t *netif_addr;netif_addr105,3540
      enum netconn_igmp join_or_leave;join_or_leave106,3569
    } jl;jl107,3608
      u8_t backlog;backlog111,3677
    } lb;lb112,3697
  } msg;msg114,3739
struct api_msg {api_msg120,3984
  void (* function)(struct api_msg_msg *msg);function122,4054
  struct api_msg_msg msg;msg124,4137
struct dns_api_msg {dns_api_msg132,4459
  const char *name;name134,4535
  ip_addr_t *addr;addr136,4600
  sys_sem_t *sem;sem139,4728
  err_t *err;err141,4782

include/lwip/mem.h,681
#define __LWIP_MEM_H____LWIP_MEM_H__33,1631
typedef size_t mem_size_t;mem_size_t45,1777
#define mem_init(mem_init48,1842
#define mem_free mem_free53,1977
#define mem_malloc mem_malloc56,2025
#define mem_calloc mem_calloc59,2077
#define mem_trim(mem_trim64,2244
typedef u32_t mem_size_t;mem_size_t72,2453
#define MEM_SIZE_F MEM_SIZE_F73,2479
typedef u16_t mem_size_t;mem_size_t75,2510
#define MEM_SIZE_F MEM_SIZE_F76,2536
#define mem_init(mem_init81,2673
#define mem_trim(mem_trim84,2829
#define LWIP_MEM_ALIGN_SIZE(LWIP_MEM_ALIGN_SIZE100,3395
#define LWIP_MEM_ALIGN_BUFFER(LWIP_MEM_ALIGN_BUFFER108,3747
#define LWIP_MEM_ALIGN(LWIP_MEM_ALIGN115,3955

include/lwip/sockets.h,6104
#define __LWIP_SOCKETS_H____LWIP_SOCKETS_H__35,1637
struct sockaddr_in {sockaddr_in51,1931
  u8_t sin_len;sin_len52,1952
  u8_t sin_family;sin_family53,1968
  u16_t sin_port;sin_port54,1987
  struct in_addr sin_addr;sin_addr55,2005
  char sin_zero[8];sin_zero56,2032
struct sockaddr {sockaddr59,2056
  u8_t sa_len;sa_len60,2074
  u8_t sa_family;sa_family61,2089
  char sa_data[14];sa_data62,2107
#  define socklen_t socklen_t66,2149
#define SOCK_STREAM SOCK_STREAM70,2225
#define SOCK_DGRAM SOCK_DGRAM71,2251
#define SOCK_RAW SOCK_RAW72,2277
#define  SO_DEBUG SO_DEBUG77,2399
#define  SO_ACCEPTCONN SO_ACCEPTCONN78,2484
#define  SO_REUSEADDR SO_REUSEADDR79,2545
#define  SO_KEEPALIVE SO_KEEPALIVE80,2608
#define  SO_DONTROUTE SO_DONTROUTE81,2668
#define  SO_BROADCAST SO_BROADCAST82,2749
#define  SO_USELOOPBACK SO_USELOOPBACK83,2865
#define  SO_LINGER SO_LINGER84,2947
#define  SO_OOBINLINE SO_OOBINLINE85,3016
#define  SO_REUSEPORT SO_REUSEPORT86,3100
#define SO_DONTLINGER SO_DONTLINGER88,3186
#define SO_SNDBUF SO_SNDBUF93,3285
#define SO_RCVBUF SO_RCVBUF94,3354
#define SO_SNDLOWAT SO_SNDLOWAT95,3411
#define SO_RCVLOWAT SO_RCVLOWAT96,3483
#define SO_SNDTIMEO SO_SNDTIMEO97,3558
#define SO_RCVTIMEO SO_RCVTIMEO98,3623
#define SO_ERROR SO_ERROR99,3676
#define SO_TYPE SO_TYPE100,3740
#define SO_CONTIMEO SO_CONTIMEO101,3793
#define SO_NO_CHECK SO_NO_CHECK102,3861
struct linger {linger108,3983
       int l_onoff;                /* option on/off */l_onoff109,3999
       int l_linger;               /* linger time */l_linger110,4054
#define  SOL_SOCKET SOL_SOCKET116,4184
#define AF_UNSPEC AF_UNSPEC119,4247
#define AF_INET AF_INET120,4273
#define PF_INET PF_INET121,4299
#define PF_UNSPEC PF_UNSPEC122,4331
#define IPPROTO_IP IPPROTO_IP124,4366
#define IPPROTO_TCP IPPROTO_TCP125,4392
#define IPPROTO_UDP IPPROTO_UDP126,4418
#define IPPROTO_UDPLITE IPPROTO_UDPLITE127,4445
#define MSG_PEEK MSG_PEEK130,4517
#define MSG_WAITALL MSG_WAITALL131,4583
#define MSG_OOB MSG_OOB132,4724
#define MSG_DONTWAIT MSG_DONTWAIT133,4876
#define MSG_MORE MSG_MORE134,4953
#define IP_TOS IP_TOS140,5053
#define IP_TTL IP_TTL141,5082
#define TCP_NODELAY TCP_NODELAY147,5165
#define TCP_KEEPALIVE TCP_KEEPALIVE148,5239
#define TCP_KEEPIDLE TCP_KEEPIDLE149,5340
#define TCP_KEEPINTVL TCP_KEEPINTVL150,5457
#define TCP_KEEPCNT TCP_KEEPCNT151,5547
#define UDPLITE_SEND_CSCOV UDPLITE_SEND_CSCOV158,5747
#define UDPLITE_RECV_CSCOV UDPLITE_RECV_CSCOV159,5810
#define IP_ADD_MEMBERSHIP IP_ADD_MEMBERSHIP167,5999
#define IP_DROP_MEMBERSHIP IP_DROP_MEMBERSHIP168,6028
#define IP_MULTICAST_TTL IP_MULTICAST_TTL169,6057
#define IP_MULTICAST_IF IP_MULTICAST_IF170,6086
#define IP_MULTICAST_LOOP IP_MULTICAST_LOOP171,6115
typedef struct ip_mreq {ip_mreq173,6145
    struct in_addr imr_multiaddr; /* IP multicast address of group */imr_multiaddr174,6170
    struct in_addr imr_interface; /* local IP address of interface */imr_interface175,6240
} ip_mreq;ip_mreq176,6310
#define IPTOS_TOS_MASK IPTOS_TOS_MASK195,7272
#define IPTOS_TOS(IPTOS_TOS196,7309
#define IPTOS_LOWDELAY IPTOS_LOWDELAY197,7366
#define IPTOS_THROUGHPUT IPTOS_THROUGHPUT198,7403
#define IPTOS_RELIABILITY IPTOS_RELIABILITY199,7440
#define IPTOS_LOWCOST IPTOS_LOWCOST200,7477
#define IPTOS_MINCOST IPTOS_MINCOST201,7514
#define IPTOS_PREC_MASK IPTOS_PREC_MASK212,8043
#define IPTOS_PREC(IPTOS_PREC213,8088
#define IPTOS_PREC_NETCONTROL IPTOS_PREC_NETCONTROL214,8153
#define IPTOS_PREC_INTERNETCONTROL IPTOS_PREC_INTERNETCONTROL215,8198
#define IPTOS_PREC_CRITIC_ECP IPTOS_PREC_CRITIC_ECP216,8243
#define IPTOS_PREC_FLASHOVERRIDE IPTOS_PREC_FLASHOVERRIDE217,8288
#define IPTOS_PREC_FLASH IPTOS_PREC_FLASH218,8333
#define IPTOS_PREC_IMMEDIATE IPTOS_PREC_IMMEDIATE219,8378
#define IPTOS_PREC_PRIORITY IPTOS_PREC_PRIORITY220,8423
#define IPTOS_PREC_ROUTINE IPTOS_PREC_ROUTINE221,8468
#define IOCPARM_MASK IOCPARM_MASK235,8962
#define IOC_VOID IOC_VOID236,9039
#define IOC_OUT IOC_OUT237,9099
#define IOC_IN IOC_IN238,9165
#define IOC_INOUT IOC_INOUT239,9230
#define _IO(_IO242,9403
#define _IOR(_IOR244,9452
#define _IOW(_IOW246,9537
#define FIONREAD FIONREAD250,9691
#define FIONBIO FIONBIO253,9790
#define SIOCSHIWAT SIOCSHIWAT258,9941
#define SIOCGHIWAT SIOCGHIWAT259,10016
#define SIOCSLOWAT SIOCSLOWAT260,10091
#define SIOCGLOWAT SIOCGLOWAT261,10165
#define SIOCATMARK SIOCATMARK262,10239
#define F_GETFL F_GETFL267,10357
#define F_SETFL F_SETFL270,10398
#define O_NONBLOCK O_NONBLOCK276,10529
#define O_NDELAY O_NDELAY279,10597
  #define SHUT_RD SHUT_RD283,10687
  #define SHUT_WR SHUT_WR284,10709
  #define SHUT_RDWR SHUT_RDWR285,10731
  #undef  FD_SETSIZEFD_SETSIZE290,10810
  #define FD_SETSIZE FD_SETSIZE292,10885
  #define FD_SET(FD_SET293,10926
  #define FD_CLR(FD_CLR294,10993
  #define FD_ISSET(FD_ISSET295,11060
  #define FD_ZERO(FD_ZERO296,11127
  typedef struct fd_set {fd_set298,11186
          unsigned char fd_bits [(FD_SETSIZE+7)/8];fd_bits299,11212
        } fd_set;fd_set300,11264
#define LWIP_TIMEVAL_PRIVATE LWIP_TIMEVAL_PRIVATE307,11476
struct timeval {timeval311,11540
  long    tv_sec;         /* seconds */tv_sec312,11557
  long    tv_usec;        /* and microseconds */tv_usec313,11597
#define accept(accept344,13082
#define bind(bind345,13131
#define shutdown(shutdown346,13178
#define closesocket(closesocket347,13227
#define connect(connect348,13271
#define getsockname(getsockname349,13321
#define getpeername(getpeername350,13375
#define setsockopt(setsockopt351,13429
#define getsockopt(getsockopt352,13486
#define listen(listen353,13543
#define recv(recv354,13590
#define recvfrom(recvfrom355,13639
#define send(send356,13696
#define sendto(sendto357,13745
#define socket(socket358,13800
#define select(select359,13849
#define ioctlsocket(ioctlsocket360,13902
#define read(read363,13983
#define write(write364,14030
#define close(close365,14078

include/lwip/dns.h,1573
#define __LWIP_DNS_H____LWIP_DNS_H__35,1589
#define DNS_TMR_INTERVAL DNS_TMR_INTERVAL46,1772
#define DNS_RRTYPE_A DNS_RRTYPE_A49,1862
#define DNS_RRTYPE_NS DNS_RRTYPE_NS50,1923
#define DNS_RRTYPE_MD DNS_RRTYPE_MD51,1998
#define DNS_RRTYPE_MF DNS_RRTYPE_MF52,2083
#define DNS_RRTYPE_CNAME DNS_RRTYPE_CNAME53,2166
#define DNS_RRTYPE_SOA DNS_RRTYPE_SOA54,2244
#define DNS_RRTYPE_MB DNS_RRTYPE_MB55,2329
#define DNS_RRTYPE_MG DNS_RRTYPE_MG56,2412
#define DNS_RRTYPE_MR DNS_RRTYPE_MR57,2493
#define DNS_RRTYPE_NULL DNS_RRTYPE_NULL58,2580
#define DNS_RRTYPE_WKS DNS_RRTYPE_WKS59,2651
#define DNS_RRTYPE_PTR DNS_RRTYPE_PTR60,2730
#define DNS_RRTYPE_HINFO DNS_RRTYPE_HINFO61,2798
#define DNS_RRTYPE_MINFO DNS_RRTYPE_MINFO62,2861
#define DNS_RRTYPE_MX DNS_RRTYPE_MX63,2940
#define DNS_RRTYPE_TXT DNS_RRTYPE_TXT64,3000
#define DNS_RRCLASS_IN DNS_RRCLASS_IN67,3111
#define DNS_RRCLASS_CS DNS_RRCLASS_CS68,3170
#define DNS_RRCLASS_CH DNS_RRCLASS_CH69,3290
#define DNS_RRCLASS_HS DNS_RRCLASS_HS70,3352
#define DNS_RRCLASS_FLUSH DNS_RRCLASS_FLUSH71,3415
#define NETDB_ELEM_SIZE NETDB_ELEM_SIZE78,3855
struct local_hostlist_entry {local_hostlist_entry82,3988
  const char *name;name84,4043
  ip_addr_t addr;addr86,4113
  struct local_hostlist_entry *next;next87,4131
#define DNS_LOCAL_HOSTLIST_MAX_NAMELEN DNS_LOCAL_HOSTLIST_MAX_NAMELEN91,4244
#define LOCALHOSTLIST_ELEM_SIZE LOCALHOSTLIST_ELEM_SIZE93,4311
typedef void (*dns_found_callback)(const char *name, ip_addr_t *ipaddr, void *callback_arg);dns_found_callback104,4944

include/lwip/tcpip.h,1800
#define __LWIP_TCPIP_H____LWIP_TCPIP_H__33,1633
#define LWIP_TCPIP_THREAD_ALIVE(LWIP_TCPIP_THREAD_ALIVE54,2117
#define LOCK_TCPIP_CORE(LOCK_TCPIP_CORE60,2270
#define UNLOCK_TCPIP_CORE(UNLOCK_TCPIP_CORE61,2333
#define TCPIP_APIMSG(TCPIP_APIMSG62,2398
#define TCPIP_APIMSG_ACK(TCPIP_APIMSG_ACK63,2449
#define TCPIP_NETIFAPI(TCPIP_NETIFAPI64,2477
#define TCPIP_NETIFAPI_ACK(TCPIP_NETIFAPI_ACK65,2530
#define LOCK_TCPIP_CORE(LOCK_TCPIP_CORE67,2596
#define UNLOCK_TCPIP_CORE(UNLOCK_TCPIP_CORE68,2622
#define TCPIP_APIMSG(TCPIP_APIMSG69,2650
#define TCPIP_APIMSG_ACK(TCPIP_APIMSG_ACK70,2696
#define TCPIP_NETIFAPI(TCPIP_NETIFAPI71,2765
#define TCPIP_NETIFAPI_ACK(TCPIP_NETIFAPI_ACK72,2813
typedef void (*tcpip_init_done_fn)(void *arg);tcpip_init_done_fn76,2979
typedef void (*tcpip_callback_fn)(void *ctx);tcpip_callback_fn78,3093
#define tcpip_callback(tcpip_callback99,3776
enum tcpip_msg_type {tcpip_msg_type110,4186
  TCPIP_MSG_API,TCPIP_MSG_API112,4225
  TCPIP_MSG_INPKT,TCPIP_MSG_INPKT114,4268
  TCPIP_MSG_NETIFAPI,TCPIP_MSG_NETIFAPI116,4306
  TCPIP_MSG_TIMEOUT,TCPIP_MSG_TIMEOUT119,4379
  TCPIP_MSG_UNTIMEOUT,TCPIP_MSG_UNTIMEOUT120,4400
  TCPIP_MSG_CALLBACKTCPIP_MSG_CALLBACK122,4455
struct tcpip_msg {tcpip_msg125,4480
  enum tcpip_msg_type type;type126,4499
  sys_sem_t *sem;sem127,4527
    struct api_msg *apimsg;apimsg130,4572
    struct netifapi_msg *netifapimsg;netifapimsg133,4645
      struct pbuf *p;p136,4724
      struct netif *netif;netif137,4746
    } inp;inp138,4773
      tcpip_callback_fn function;function140,4797
      void *ctx;ctx141,4831
    } cb;cb142,4848
      u32_t msecs;msecs145,4894
      sys_timeout_handler h;h146,4913
      void *arg;arg147,4942
    } tmo;tmo148,4959
  } msg;msg150,5002

include/lwip/netbuf.h,974
#define __LWIP_NETBUF_H____LWIP_NETBUF_H__33,1634
#define NETBUF_FLAG_DESTADDR NETBUF_FLAG_DESTADDR44,1815
#define NETBUF_FLAG_CHKSUM NETBUF_FLAG_CHKSUM46,1891
struct netbuf {netbuf48,1929
  struct pbuf *p, *ptr;p49,1945
  struct pbuf *p, *ptr;ptr49,1945
  ip_addr_t addr;addr50,1969
  u16_t port;port51,1987
  u8_t flags;flags54,2077
  u16_t toport_chksum;toport_chksum56,2126
  ip_addr_t toaddr;toaddr58,2174
#define netbuf_copy_partial(netbuf_copy_partial79,2992
#define netbuf_copy(netbuf_copy81,3107
#define netbuf_take(netbuf_take82,3186
#define netbuf_len(netbuf_len83,3259
#define netbuf_fromaddr(netbuf_fromaddr84,3316
#define netbuf_set_fromaddr(netbuf_set_fromaddr85,3370
#define netbuf_fromport(netbuf_fromport86,3451
#define netbuf_destaddr(netbuf_destaddr88,3527
#define netbuf_set_destaddr(netbuf_set_destaddr89,3583
#define netbuf_destport(netbuf_destport90,3664
#define netbuf_set_chksum(netbuf_set_chksum93,3828

include/lwip/def.h,1163
#define __LWIP_DEF_H____LWIP_DEF_H__33,1631
#define LWIP_MAX(LWIP_MAX43,1780
#define LWIP_MIN(LWIP_MIN44,1831
#define NULL NULL47,1896
#define LWIP_U32_DIFF(LWIP_U32_DIFF52,2073
#define LWIP_MAKE_U16(LWIP_MAKE_U1656,2266
#define LWIP_MAKE_U16(LWIP_MAKE_U1658,2315
#define LWIP_PLATFORM_BYTESWAP LWIP_PLATFORM_BYTESWAP62,2398
#undef htonshtons69,2546
#undef htonlhtonl72,2591
#undef ntohsntohs75,2636
#undef ntohlntohl78,2681
#define htons(htons81,2714
#define ntohs(ntohs82,2745
#define htonl(htonl83,2776
#define ntohl(ntohl84,2807
#define lwip_htons(lwip_htons88,2909
#define lwip_ntohs(lwip_ntohs89,2935
#define lwip_htonl(lwip_htonl90,2961
#define lwip_ntohl(lwip_ntohl91,2987
#define PP_HTONS(PP_HTONS92,3013
#define PP_NTOHS(PP_NTOHS93,3037
#define PP_HTONL(PP_HTONL94,3061
#define PP_NTOHL(PP_NTOHL95,3085
#define lwip_htons(lwip_htons98,3173
#define lwip_ntohs(lwip_ntohs99,3218
#define lwip_htonl(lwip_htonl100,3263
#define lwip_ntohl(lwip_ntohl101,3308
#define PP_HTONS(PP_HTONS112,3702
#define PP_NTOHS(PP_NTOHS113,3768
#define PP_HTONL(PP_HTONL114,3800
#define PP_NTOHL(PP_NTOHL118,3995

include/lwip/memp_std.h,520
#define LWIP_MALLOC_MEMPOOL(LWIP_MALLOC_MEMPOOL15,592
#define LWIP_MALLOC_MEMPOOL_STARTLWIP_MALLOC_MEMPOOL_START16,722
#define LWIP_MALLOC_MEMPOOL_ENDLWIP_MALLOC_MEMPOOL_END17,756
#define LWIP_PBUF_MEMPOOL(LWIP_PBUF_MEMPOOL23,964
#undef LWIP_MEMPOOLLWIP_MEMPOOL118,5330
#undef LWIP_MALLOC_MEMPOOLLWIP_MALLOC_MEMPOOL119,5350
#undef LWIP_MALLOC_MEMPOOL_STARTLWIP_MALLOC_MEMPOOL_START120,5377
#undef LWIP_MALLOC_MEMPOOL_ENDLWIP_MALLOC_MEMPOOL_END121,5410
#undef LWIP_PBUF_MEMPOOLLWIP_PBUF_MEMPOOL122,5441

include/lwip/snmp_asn1.h,1122
#define __LWIP_SNMP_ASN1_H____LWIP_SNMP_ASN1_H__36,1663
#define SNMP_ASN1_UNIV SNMP_ASN1_UNIV49,1839
#define SNMP_ASN1_APPLIC SNMP_ASN1_APPLIC50,1893
#define SNMP_ASN1_CONTXT SNMP_ASN1_CONTXT51,1947
#define SNMP_ASN1_CONSTR SNMP_ASN1_CONSTR53,2002
#define SNMP_ASN1_PRIMIT SNMP_ASN1_PRIMIT54,2048
#define SNMP_ASN1_INTEG SNMP_ASN1_INTEG57,2116
#define SNMP_ASN1_OC_STR SNMP_ASN1_OC_STR58,2143
#define SNMP_ASN1_NUL SNMP_ASN1_NUL59,2170
#define SNMP_ASN1_OBJ_ID SNMP_ASN1_OBJ_ID60,2197
#define SNMP_ASN1_SEQ SNMP_ASN1_SEQ61,2224
#define SNMP_ASN1_IPADDR SNMP_ASN1_IPADDR64,2292
#define SNMP_ASN1_COUNTER SNMP_ASN1_COUNTER65,2349
#define SNMP_ASN1_GAUGE SNMP_ASN1_GAUGE66,2391
#define SNMP_ASN1_TIMETICKS SNMP_ASN1_TIMETICKS67,2433
#define SNMP_ASN1_OPAQUE SNMP_ASN1_OPAQUE68,2475
#define SNMP_ASN1_PDU_GET_REQ SNMP_ASN1_PDU_GET_REQ71,2560
#define SNMP_ASN1_PDU_GET_NEXT_REQ SNMP_ASN1_PDU_GET_NEXT_REQ72,2592
#define SNMP_ASN1_PDU_GET_RESP SNMP_ASN1_PDU_GET_RESP73,2629
#define SNMP_ASN1_PDU_SET_REQ SNMP_ASN1_PDU_SET_REQ74,2662
#define SNMP_ASN1_PDU_TRAP SNMP_ASN1_PDU_TRAP75,2694

include/lwip/dhcp.h,6085
#define __LWIP_DHCP_H____LWIP_DHCP_H__5,39
#define DHCP_COARSE_TIMER_SECS DHCP_COARSE_TIMER_SECS19,319
#define DHCP_COARSE_TIMER_MSECS DHCP_COARSE_TIMER_MSECS21,431
#define DHCP_FINE_TIMER_MSECS DHCP_FINE_TIMER_MSECS23,572
#define DHCP_CHADDR_LEN DHCP_CHADDR_LEN25,608
#define DHCP_SNAME_LEN DHCP_SNAME_LEN26,636
#define DHCP_FILE_LEN DHCP_FILE_LEN27,664
struct dhcpdhcp29,694
  u32_t xid;xid32,762
  struct udp_pcb *pcb;pcb34,819
  struct dhcp_msg *msg_in;msg_in36,864
  u8_t state;state38,933
  u8_t tries;tries40,983
  u8_t autoip_coop_state;autoip_coop_state42,1023
  u8_t subnet_mask_given;subnet_mask_given44,1056
  struct pbuf *p_out; /* pbuf of outcoming msg */p_out46,1083
  struct dhcp_msg *msg_out; /* outgoing msg */msg_out47,1133
  u16_t options_out_len; /* outgoing msg options length */options_out_len48,1180
  u16_t request_timeout; /* #ticks with period DHCP_FINE_TIMER_SECS for request timeout */request_timeout49,1239
  u16_t t1_timeout;  /* #ticks with period DHCP_COARSE_TIMER_SECS for renewal time */t1_timeout50,1330
  u16_t t2_timeout;  /* #ticks with period DHCP_COARSE_TIMER_SECS for rebind time */t2_timeout51,1416
  ip_addr_t server_ip_addr; /* dhcp server address that offered this lease */server_ip_addr52,1501
  ip_addr_t offered_ip_addr;offered_ip_addr53,1579
  ip_addr_t offered_sn_mask;offered_sn_mask54,1608
  ip_addr_t offered_gw_addr;offered_gw_addr55,1637
  u32_t offered_t0_lease; /* lease period (in seconds) */offered_t0_lease57,1668
  u32_t offered_t1_renew; /* recommended renew time (usually 50% of lease period) */offered_t1_renew58,1726
  u32_t offered_t2_rebind; /* recommended rebind time (usually 66% of lease period)  */offered_t2_rebind59,1811
  ip_addr_t offered_si_addr;offered_si_addr63,2036
  char boot_file_name[DHCP_FILE_LEN];boot_file_name64,2065
struct dhcp_msgdhcp_msg74,2333
#define DHCP_MIN_OPTIONS_LEN DHCP_MIN_OPTIONS_LEN91,2923
#  undef DHCP_OPTIONS_LENDHCP_OPTIONS_LEN94,3091
#  define DHCP_OPTIONS_LEN DHCP_OPTIONS_LEN99,3297
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT102,3405
#define dhcp_remove_struct(dhcp_remove_struct110,3654
#define DHCP_OP_OFS DHCP_OP_OFS136,4643
#define DHCP_HTYPE_OFS DHCP_HTYPE_OFS137,4671
#define DHCP_HLEN_OFS DHCP_HLEN_OFS138,4699
#define DHCP_HOPS_OFS DHCP_HOPS_OFS139,4727
#define DHCP_XID_OFS DHCP_XID_OFS140,4755
#define DHCP_SECS_OFS DHCP_SECS_OFS141,4783
#define DHCP_FLAGS_OFS DHCP_FLAGS_OFS142,4811
#define DHCP_CIADDR_OFS DHCP_CIADDR_OFS143,4840
#define DHCP_YIADDR_OFS DHCP_YIADDR_OFS144,4869
#define DHCP_SIADDR_OFS DHCP_SIADDR_OFS145,4898
#define DHCP_GIADDR_OFS DHCP_GIADDR_OFS146,4927
#define DHCP_CHADDR_OFS DHCP_CHADDR_OFS147,4956
#define DHCP_SNAME_OFS DHCP_SNAME_OFS148,4985
#define DHCP_FILE_OFS DHCP_FILE_OFS149,5014
#define DHCP_MSG_LEN DHCP_MSG_LEN150,5044
#define DHCP_COOKIE_OFS DHCP_COOKIE_OFS152,5075
#define DHCP_OPTIONS_OFS DHCP_OPTIONS_OFS153,5114
#define DHCP_CLIENT_PORT DHCP_CLIENT_PORT155,5160
#define DHCP_SERVER_PORT DHCP_SERVER_PORT156,5191
#define DHCP_OFF DHCP_OFF159,5247
#define DHCP_REQUESTING DHCP_REQUESTING160,5275
#define DHCP_INIT DHCP_INIT161,5303
#define DHCP_REBOOTING DHCP_REBOOTING162,5331
#define DHCP_REBINDING DHCP_REBINDING163,5359
#define DHCP_RENEWING DHCP_RENEWING164,5387
#define DHCP_SELECTING DHCP_SELECTING165,5415
#define DHCP_INFORMING DHCP_INFORMING166,5443
#define DHCP_CHECKING DHCP_CHECKING167,5471
#define DHCP_PERMANENT DHCP_PERMANENT168,5499
#define DHCP_BOUND DHCP_BOUND169,5527
#define DHCP_BACKING_OFF DHCP_BACKING_OFF171,5609
#define DHCP_AUTOIP_COOP_STATE_OFF DHCP_AUTOIP_COOP_STATE_OFF174,5673
#define DHCP_AUTOIP_COOP_STATE_ON DHCP_AUTOIP_COOP_STATE_ON175,5711
#define DHCP_BOOTREQUEST DHCP_BOOTREQUEST177,5751
#define DHCP_BOOTREPLY DHCP_BOOTREPLY178,5779
#define DHCP_DISCOVER DHCP_DISCOVER181,5834
#define DHCP_OFFER DHCP_OFFER182,5858
#define DHCP_REQUEST DHCP_REQUEST183,5882
#define DHCP_DECLINE DHCP_DECLINE184,5906
#define DHCP_ACK DHCP_ACK185,5930
#define DHCP_NAK DHCP_NAK186,5954
#define DHCP_RELEASE DHCP_RELEASE187,5978
#define DHCP_INFORM DHCP_INFORM188,6002
#define DHCP_HTYPE_ETH DHCP_HTYPE_ETH191,6091
#define DHCP_MAGIC_COOKIE DHCP_MAGIC_COOKIE193,6117
#define DHCP_OPTION_PAD DHCP_OPTION_PAD198,6261
#define DHCP_OPTION_SUBNET_MASK DHCP_OPTION_SUBNET_MASK199,6287
#define DHCP_OPTION_ROUTER DHCP_OPTION_ROUTER200,6340
#define DHCP_OPTION_DNS_SERVER DHCP_OPTION_DNS_SERVER201,6369
#define DHCP_OPTION_HOSTNAME DHCP_OPTION_HOSTNAME202,6403
#define DHCP_OPTION_IP_TTL DHCP_OPTION_IP_TTL203,6435
#define DHCP_OPTION_MTU DHCP_OPTION_MTU204,6465
#define DHCP_OPTION_BROADCAST DHCP_OPTION_BROADCAST205,6492
#define DHCP_OPTION_TCP_TTL DHCP_OPTION_TCP_TTL206,6525
#define DHCP_OPTION_END DHCP_OPTION_END207,6556
#define DHCP_OPTION_REQUESTED_IP DHCP_OPTION_REQUESTED_IP210,6605
#define DHCP_OPTION_LEASE_TIME DHCP_OPTION_LEASE_TIME211,6682
#define DHCP_OPTION_OVERLOAD DHCP_OPTION_OVERLOAD212,6764
#define DHCP_OPTION_MESSAGE_TYPE DHCP_OPTION_MESSAGE_TYPE214,6856
#define DHCP_OPTION_MESSAGE_TYPE_LEN DHCP_OPTION_MESSAGE_TYPE_LEN215,6931
#define DHCP_OPTION_SERVER_ID DHCP_OPTION_SERVER_ID217,6971
#define DHCP_OPTION_PARAMETER_REQUEST_LIST DHCP_OPTION_PARAMETER_REQUEST_LIST218,7042
#define DHCP_OPTION_MAX_MSG_SIZE DHCP_OPTION_MAX_MSG_SIZE220,7132
#define DHCP_OPTION_MAX_MSG_SIZE_LEN DHCP_OPTION_MAX_MSG_SIZE_LEN221,7218
#define DHCP_OPTION_T1 DHCP_OPTION_T1223,7258
#define DHCP_OPTION_T2 DHCP_OPTION_T2224,7306
#define DHCP_OPTION_US DHCP_OPTION_US225,7356
#define DHCP_OPTION_CLIENT_ID DHCP_OPTION_CLIENT_ID226,7382
#define DHCP_OPTION_TFTP_SERVERNAME DHCP_OPTION_TFTP_SERVERNAME227,7415
#define DHCP_OPTION_BOOTFILE DHCP_OPTION_BOOTFILE228,7454
#define DHCP_OVERLOAD_NONE DHCP_OVERLOAD_NONE231,7570
#define DHCP_OVERLOAD_FILE DHCP_OVERLOAD_FILE232,7599
#define DHCP_OVERLOAD_SNAME DHCP_OVERLOAD_SNAME233,7628
#define DHCP_OVERLOAD_SNAME_FILE DHCP_OVERLOAD_SNAME_FILE234,7659

include/lwip/opt.h,13084
#define __LWIP_OPT_H____LWIP_OPT_H__39,1682
#define SYS_LIGHTWEIGHT_PROT SYS_LIGHTWEIGHT_PROT60,2276
#define NO_SYS NO_SYS68,2436
#define NO_SYS_NO_TIMERS NO_SYS_NO_TIMERS76,2632
#define MEMCPY(MEMCPY84,2817
#define SMEMCPY(SMEMCPY92,3058
#define MEM_LIBC_MALLOC MEM_LIBC_MALLOC106,3446
#define MEMP_MEM_MALLOC MEMP_MEM_MALLOC115,3726
#define MEM_ALIGNMENT MEM_ALIGNMENT124,3966
#define MEM_SIZE MEM_SIZE132,4179
#define MEMP_SEPARATE_POOLS MEMP_SEPARATE_POOLS141,4459
#define MEMP_OVERFLOW_CHECK MEMP_OVERFLOW_CHECK154,4987
#define MEMP_SANITY_CHECK MEMP_SANITY_CHECK162,5200
#define MEM_USE_POOLS MEM_USE_POOLS172,5566
#define MEM_USE_POOLS_TRY_BIGGER_POOL MEM_USE_POOLS_TRY_BIGGER_POOL180,5833
#define MEMP_USE_CUSTOM_POOLS MEMP_USE_CUSTOM_POOLS190,6158
#define LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT212,7050
#define MEMP_NUM_PBUF MEMP_NUM_PBUF226,7490
#define MEMP_NUM_RAW_PCB MEMP_NUM_RAW_PCB234,7659
#define MEMP_NUM_UDP_PCB MEMP_NUM_UDP_PCB243,7876
#define MEMP_NUM_TCP_PCB MEMP_NUM_TCP_PCB251,8067
#define MEMP_NUM_TCP_PCB_LISTEN MEMP_NUM_TCP_PCB_LISTEN259,8260
#define MEMP_NUM_TCP_SEG MEMP_NUM_TCP_SEG267,8448
#define MEMP_NUM_REASSDATA MEMP_NUM_REASSDATA275,8654
#define MEMP_NUM_FRAG_PBUF MEMP_NUM_FRAG_PBUF286,9043
#define MEMP_NUM_ARP_QUEUE MEMP_NUM_ARP_QUEUE296,9342
#define MEMP_NUM_IGMP_GROUP MEMP_NUM_IGMP_GROUP306,9651
#define MEMP_NUM_SYS_TIMEOUT MEMP_NUM_SYS_TIMEOUT314,9832
#define MEMP_NUM_NETBUF MEMP_NUM_NETBUF322,10027
#define MEMP_NUM_NETCONN MEMP_NUM_NETCONN330,10225
#define MEMP_NUM_TCPIP_MSG_API MEMP_NUM_TCPIP_MSG_API339,10468
#define MEMP_NUM_TCPIP_MSG_INPKT MEMP_NUM_TCPIP_MSG_INPKT348,10697
#define MEMP_NUM_SNMP_NODE MEMP_NUM_SNMP_NODE355,10843
#define MEMP_NUM_SNMP_ROOTNODE MEMP_NUM_SNMP_ROOTNODE363,11061
#define MEMP_NUM_SNMP_VARBIND MEMP_NUM_SNMP_VARBIND372,11317
#define MEMP_NUM_SNMP_VALUE MEMP_NUM_SNMP_VALUE381,11609
#define MEMP_NUM_NETDB MEMP_NUM_NETDB389,11838
#define MEMP_NUM_LOCALHOSTLIST MEMP_NUM_LOCALHOSTLIST397,12044
#define MEMP_NUM_PPPOE_INTERFACES MEMP_NUM_PPPOE_INTERFACES405,12254
#define PBUF_POOL_SIZE PBUF_POOL_SIZE412,12395
#define LWIP_ARP LWIP_ARP424,12630
#define ARP_TABLE_SIZE ARP_TABLE_SIZE431,12776
#define ARP_QUEUEING ARP_QUEUEING442,13239
#define ETHARP_TRUST_IP_MAC ETHARP_TRUST_IP_MAC456,13895
#define ETHARP_SUPPORT_VLAN ETHARP_SUPPORT_VLAN466,14287
#define LWIP_ETHERNET LWIP_ETHERNET473,14456
#define ETH_PAD_SIZE ETH_PAD_SIZE482,14865
#define ETHARP_SUPPORT_STATIC_ENTRIES ETHARP_SUPPORT_STATIC_ENTRIES489,15106
#define IP_FORWARD IP_FORWARD504,15483
#define IP_OPTIONS_ALLOWED IP_OPTIONS_ALLOWED513,15772
#define IP_REASSEMBLY IP_REASSEMBLY522,16020
#define IP_FRAG IP_FRAG531,16275
#define IP_REASS_MAXAGE IP_REASS_MAXAGE540,16585
#define IP_REASS_MAX_PBUFS IP_REASS_MAX_PBUFS550,16974
#define IP_FRAG_USES_STATIC_BUF IP_FRAG_USES_STATIC_BUF561,17405
#define IP_FRAG_MAX_MTU IP_FRAG_MAX_MTU569,17633
#define IP_DEFAULT_TTL IP_DEFAULT_TTL576,17793
#define IP_SOF_BROADCAST IP_SOF_BROADCAST585,18095
#define IP_SOF_BROADCAST_RECV IP_SOF_BROADCAST_RECV593,18289
#define LWIP_ICMP LWIP_ICMP606,18613
#define ICMP_TTL ICMP_TTL613,18754
#define LWIP_BROADCAST_PING LWIP_BROADCAST_PING620,18934
#define LWIP_MULTICAST_PING LWIP_MULTICAST_PING627,19100
#define LWIP_RAW LWIP_RAW639,19367
#define RAW_TTL RAW_TTL646,19516
#define LWIP_DHCP LWIP_DHCP658,19763
#define DHCP_DOES_ARP_CHECK DHCP_DOES_ARP_CHECK665,19916
#define LWIP_AUTOIP LWIP_AUTOIP677,20187
#define LWIP_DHCP_AUTOIP_COOP LWIP_DHCP_AUTOIP_COOP685,20388
#define LWIP_DHCP_AUTOIP_COOP_TRIES LWIP_DHCP_AUTOIP_COOP_TRIES696,20773
#define LWIP_SNMP LWIP_SNMP709,21052
#define SNMP_CONCURRENT_REQUESTS SNMP_CONCURRENT_REQUESTS718,21351
#define SNMP_TRAP_DESTINATIONS SNMP_TRAP_DESTINATIONS726,21541
#define SNMP_PRIVATE_MIB SNMP_PRIVATE_MIB735,21797
#define SNMP_SAFE_REQUESTS SNMP_SAFE_REQUESTS744,22066
#define SNMP_MAX_OCTET_STRING_LEN SNMP_MAX_OCTET_STRING_LEN752,22251
#define SNMP_MAX_TREE_DEPTH SNMP_MAX_TREE_DEPTH761,22488
#define SNMP_MAX_VALUE_SIZE SNMP_MAX_VALUE_SIZE769,22699
#define LWIP_IGMP LWIP_IGMP781,23009
#define LWIP_DNS LWIP_DNS794,23284
#define DNS_TABLE_SIZE DNS_TABLE_SIZE799,23415
#define DNS_MAX_NAME_LENGTH DNS_MAX_NAME_LENGTH804,23558
#define DNS_MAX_SERVERS DNS_MAX_SERVERS809,23668
#define DNS_DOES_NAME_CHECK DNS_DOES_NAME_CHECK814,23812
#define DNS_MSG_SIZE DNS_MSG_SIZE819,23945
#define DNS_LOCAL_HOSTLIST DNS_LOCAL_HOSTLIST833,24501
#define DNS_LOCAL_HOSTLIST_IS_DYNAMIC DNS_LOCAL_HOSTLIST_IS_DYNAMIC839,24706
#define LWIP_UDP LWIP_UDP851,24963
#define LWIP_UDPLITE LWIP_UDPLITE858,25100
#define UDP_TTL UDP_TTL865,25214
#define LWIP_NETBUF_RECVINFO LWIP_NETBUF_RECVINFO872,25394
#define LWIP_TCP LWIP_TCP884,25615
#define TCP_TTL TCP_TTL891,25729
#define TCP_WND TCP_WND899,25921
#define TCP_MAXRTX TCP_MAXRTX906,26078
#define TCP_SYNMAXRTX TCP_SYNMAXRTX913,26228
#define TCP_QUEUE_OOSEQ TCP_QUEUE_OOSEQ921,26431
#define TCP_MSS TCP_MSS932,26824
#define TCP_CALCULATE_EFF_SEND_MSS TCP_CALCULATE_EFF_SEND_MSS944,27368
#define TCP_SND_BUF TCP_SND_BUF952,27497
#define TCP_SND_QUEUELEN TCP_SND_QUEUELEN960,27718
#define TCP_SNDLOWAT TCP_SNDLOWAT969,28064
#define TCP_SNDQUEUELOWAT TCP_SNDQUEUELOWAT978,28385
#define TCP_LISTEN_BACKLOG TCP_LISTEN_BACKLOG985,28560
#define TCP_DEFAULT_LISTEN_BACKLOG TCP_DEFAULT_LISTEN_BACKLOG994,28804
#define TCP_OVERSIZE TCP_OVERSIZE1012,29537
#define LWIP_TCP_TIMESTAMPS LWIP_TCP_TIMESTAMPS1019,29690
#define TCP_WND_UPDATE_THRESHOLD TCP_WND_UPDATE_THRESHOLD1027,29871
#define LWIP_EVENT_API LWIP_EVENT_API1038,30278
#define LWIP_CALLBACK_API LWIP_CALLBACK_API1039,30320
#define LWIP_EVENT_API LWIP_EVENT_API1041,30369
#define LWIP_CALLBACK_API LWIP_CALLBACK_API1042,30411
#define PBUF_LINK_HLEN PBUF_LINK_HLEN1057,30760
#define PBUF_POOL_BUFSIZE PBUF_POOL_BUFSIZE1066,31055
#define LWIP_NETIF_HOSTNAME LWIP_NETIF_HOSTNAME1079,31432
#define LWIP_NETIF_API LWIP_NETIF_API1086,31569
#define LWIP_NETIF_STATUS_CALLBACK LWIP_NETIF_STATUS_CALLBACK1094,31810
#define LWIP_NETIF_LINK_CALLBACK LWIP_NETIF_LINK_CALLBACK1102,32026
#define LWIP_NETIF_HWADDRHINT LWIP_NETIF_HWADDRHINT1113,32491
#define LWIP_NETIF_LOOPBACK LWIP_NETIF_LOOPBACK1121,32724
#define LWIP_LOOPBACK_MAX_PBUFS LWIP_LOOPBACK_MAX_PBUFS1129,32929
#define LWIP_NETIF_LOOPBACK_MULTITHREADING LWIP_NETIF_LOOPBACK_MULTITHREADING1146,33709
#define LWIP_NETIF_TX_SINGLE_PBUF LWIP_NETIF_TX_SINGLE_PBUF1159,34215
#define LWIP_HAVE_LOOPIF LWIP_HAVE_LOOPIF1171,34534
#define LWIP_HAVE_SLIPIF LWIP_HAVE_SLIPIF1183,34803
#define TCPIP_THREAD_NAME TCPIP_THREAD_NAME1195,35079
#define TCPIP_THREAD_STACKSIZE TCPIP_THREAD_STACKSIZE1204,35372
#define TCPIP_THREAD_PRIO TCPIP_THREAD_PRIO1213,35643
#define TCPIP_MBOX_SIZE TCPIP_MBOX_SIZE1222,35908
#define SLIPIF_THREAD_NAME SLIPIF_THREAD_NAME1229,36061
#define SLIPIF_THREAD_STACKSIZE SLIPIF_THREAD_STACKSIZE1238,36354
#define SLIPIF_THREAD_PRIO SLIPIF_THREAD_PRIO1247,36628
#define PPP_THREAD_NAME PPP_THREAD_NAME1254,36771
#define PPP_THREAD_STACKSIZE PPP_THREAD_STACKSIZE1263,37059
#define PPP_THREAD_PRIO PPP_THREAD_PRIO1272,37323
#define DEFAULT_THREAD_NAME DEFAULT_THREAD_NAME1279,37477
#define DEFAULT_THREAD_STACKSIZE DEFAULT_THREAD_STACKSIZE1288,37766
#define DEFAULT_THREAD_PRIO DEFAULT_THREAD_PRIO1297,38041
#define DEFAULT_RAW_RECVMBOX_SIZE DEFAULT_RAW_RECVMBOX_SIZE1306,38342
#define DEFAULT_UDP_RECVMBOX_SIZE DEFAULT_UDP_RECVMBOX_SIZE1315,38643
#define DEFAULT_TCP_RECVMBOX_SIZE DEFAULT_TCP_RECVMBOX_SIZE1324,38944
#define DEFAULT_ACCEPTMBOX_SIZE DEFAULT_ACCEPTMBOX_SIZE1333,39230
#define LWIP_TCPIP_CORE_LOCKING LWIP_TCPIP_CORE_LOCKING1346,39580
#define LWIP_TCPIP_CORE_LOCKING_INPUT LWIP_TCPIP_CORE_LOCKING_INPUT1354,39786
#define LWIP_NETCONN LWIP_NETCONN1361,39931
#define LWIP_TCPIP_TIMEOUT LWIP_TCPIP_TIMEOUT1368,40142
#define LWIP_SOCKET LWIP_SOCKET1380,40410
#define LWIP_COMPAT_SOCKETS LWIP_COMPAT_SOCKETS1388,40601
#define LWIP_POSIX_SOCKETS_IO_NAMES LWIP_POSIX_SOCKETS_IO_NAMES1397,40917
#define LWIP_TCP_KEEPALIVE LWIP_TCP_KEEPALIVE1406,41225
#define LWIP_SO_RCVTIMEO LWIP_SO_RCVTIMEO1413,41363
#define LWIP_SO_RCVBUF LWIP_SO_RCVBUF1420,41495
#define RECV_BUFSIZE_DEFAULT RECV_BUFSIZE_DEFAULT1427,41656
#define SO_REUSE SO_REUSE1434,41781
#define SO_REUSE_RXTOALL SO_REUSE_RXTOALL1443,42070
#define LWIP_STATS LWIP_STATS1455,42347
#define LWIP_STATS_DISPLAY LWIP_STATS_DISPLAY1464,42518
#define LINK_STATS LINK_STATS1471,42632
#define ETHARP_STATS ETHARP_STATS1478,42752
#define IP_STATS IP_STATS1485,42869
#define IPFRAG_STATS IPFRAG_STATS1493,43047
#define ICMP_STATS ICMP_STATS1500,43186
#define IGMP_STATS IGMP_STATS1507,43300
#define UDP_STATS UDP_STATS1515,43469
#define TCP_STATS TCP_STATS1523,43637
#define MEM_STATS MEM_STATS1530,43759
#define MEMP_STATS MEMP_STATS1537,43927
#define SYS_STATS SYS_STATS1544,44089
#define LINK_STATS LINK_STATS1549,44158
#define IP_STATS IP_STATS1550,44200
#define IPFRAG_STATS IPFRAG_STATS1551,44242
#define ICMP_STATS ICMP_STATS1552,44284
#define IGMP_STATS IGMP_STATS1553,44326
#define UDP_STATS UDP_STATS1554,44368
#define TCP_STATS TCP_STATS1555,44410
#define MEM_STATS MEM_STATS1556,44452
#define MEMP_STATS MEMP_STATS1557,44494
#define SYS_STATS SYS_STATS1558,44536
#define LWIP_STATS_DISPLAY LWIP_STATS_DISPLAY1559,44578
#define PPP_SUPPORT PPP_SUPPORT1572,44822
#define PPPOE_SUPPORT PPPOE_SUPPORT1579,44948
#define PPPOS_SUPPORT PPPOS_SUPPORT1586,45072
#define NUM_PPP NUM_PPP1595,45203
#define PAP_SUPPORT PAP_SUPPORT1602,45313
#define CHAP_SUPPORT CHAP_SUPPORT1609,45426
#define MSCHAP_SUPPORT MSCHAP_SUPPORT1616,45582
#define CBCP_SUPPORT CBCP_SUPPORT1623,45732
#define CCP_SUPPORT CCP_SUPPORT1630,45879
#define VJ_SUPPORT VJ_SUPPORT1637,46005
#define MD5_SUPPORT MD5_SUPPORT1644,46131
#define FSM_DEFTIMEOUT FSM_DEFTIMEOUT1651,46223
#define FSM_DEFMAXTERMREQS FSM_DEFMAXTERMREQS1655,46336
#define FSM_DEFMAXCONFREQS FSM_DEFMAXCONFREQS1659,46465
#define FSM_DEFMAXNAKLOOPS FSM_DEFMAXNAKLOOPS1663,46594
#define UPAP_DEFTIMEOUT UPAP_DEFTIMEOUT1667,46708
#define UPAP_DEFREQTIME UPAP_DEFREQTIME1671,46835
#define CHAP_DEFTIMEOUT CHAP_DEFTIMEOUT1675,46957
#define CHAP_DEFTRANSMITS CHAP_DEFTRANSMITS1679,47069
#define LCP_ECHOINTERVAL LCP_ECHOINTERVAL1684,47259
#define LCP_MAXECHOFAILS LCP_MAXECHOFAILS1689,47391
#define PPP_MAXIDLEFLAG PPP_MAXIDLEFLAG1694,47528
#define PPP_MTU PPP_MTU1705,47815
#define PPP_MAXMTU PPP_MAXMTU1708,47982
#define PPP_MINMTU PPP_MINMTU1710,48061
#define PPP_MRU PPP_MRU1711,48104
#define PPP_MAXMRU PPP_MAXMRU1712,48198
#define PPP_DEFMRU PPP_DEFMRU1714,48293
#define PPP_MINMRU PPP_MINMRU1716,48375
#define MAXNAMELEN MAXNAMELEN1719,48476
#define MAXSECRETLEN MAXSECRETLEN1722,48598
#define CHECKSUM_GEN_IP CHECKSUM_GEN_IP1736,48962
#define CHECKSUM_GEN_UDP CHECKSUM_GEN_UDP1743,49127
#define CHECKSUM_GEN_TCP CHECKSUM_GEN_TCP1750,49292
#define CHECKSUM_CHECK_IP CHECKSUM_CHECK_IP1757,49455
#define CHECKSUM_CHECK_UDP CHECKSUM_CHECK_UDP1764,49621
#define CHECKSUM_CHECK_TCP CHECKSUM_CHECK_TCP1771,49786
#define LWIP_CHECKSUM_ON_COPY LWIP_CHECKSUM_ON_COPY1779,49978
#define LWIP_DBG_MIN_LEVEL LWIP_DBG_MIN_LEVEL1793,50352
#define LWIP_DBG_TYPES_ON LWIP_DBG_TYPES_ON1801,50562
#define ETHARP_DEBUG ETHARP_DEBUG1808,50698
#define NETIF_DEBUG NETIF_DEBUG1815,50832
#define PBUF_DEBUG PBUF_DEBUG1822,50963
#define API_LIB_DEBUG API_LIB_DEBUG1829,51103
#define API_MSG_DEBUG API_MSG_DEBUG1836,51243
#define SOCKETS_DEBUG SOCKETS_DEBUG1843,51383
#define ICMP_DEBUG ICMP_DEBUG1850,51514
#define IGMP_DEBUG IGMP_DEBUG1857,51645
#define INET_DEBUG INET_DEBUG1864,51776
#define IP_DEBUG IP_DEBUG1871,51900
#define IP_REASS_DEBUG IP_REASS_DEBUG1878,52064
#define RAW_DEBUG RAW_DEBUG1885,52192
#define MEM_DEBUG MEM_DEBUG1892,52320
#define MEMP_DEBUG MEMP_DEBUG1899,52451
#define SYS_DEBUG SYS_DEBUG1906,52579
#define TIMERS_DEBUG TIMERS_DEBUG1913,52716
#define TCP_DEBUG TCP_DEBUG1920,52843
#define TCP_INPUT_DEBUG TCP_INPUT_DEBUG1927,53005
#define TCP_FR_DEBUG TCP_FR_DEBUG1934,53162
#define TCP_RTO_DEBUG TCP_RTO_DEBUG1942,53322
#define TCP_CWND_DEBUG TCP_CWND_DEBUG1949,53477
#define TCP_WND_DEBUG TCP_WND_DEBUG1956,53636
#define TCP_OUTPUT_DEBUG TCP_OUTPUT_DEBUG1963,53799
#define TCP_RST_DEBUG TCP_RST_DEBUG1970,53955
#define TCP_QLEN_DEBUG TCP_QLEN_DEBUG1977,54106
#define UDP_DEBUG UDP_DEBUG1984,54232
#define TCPIP_DEBUG TCPIP_DEBUG1991,54366
#define PPP_DEBUG PPP_DEBUG1998,54493
#define SLIP_DEBUG SLIP_DEBUG2005,54626
#define DHCP_DEBUG DHCP_DEBUG2012,54757
#define AUTOIP_DEBUG AUTOIP_DEBUG2019,54894
#define SNMP_MSG_DEBUG SNMP_MSG_DEBUG2026,55041
#define SNMP_MIB_DEBUG SNMP_MIB_DEBUG2033,55184
#define DNS_DEBUG DNS_DEBUG2040,55311

include/lwip/tcp.h,5538
#define __LWIP_TCP_H____LWIP_TCP_H__33,1631
typedef err_t (*tcp_accept_fn)(void *arg, struct tcp_pcb *newpcb, err_t err);tcp_accept_fn61,2377
typedef err_t (*tcp_recv_fn)(void *arg, struct tcp_pcb *tpcb,tcp_recv_fn73,2954
typedef err_t (*tcp_sent_fn)(void *arg, struct tcp_pcb *tpcb,tcp_sent_fn87,3696
typedef err_t (*tcp_poll_fn)(void *arg, struct tcp_pcb *tpcb);tcp_poll_fn99,4201
typedef void  (*tcp_err_fn)(void *arg, err_t err);tcp_err_fn111,4780
typedef err_t (*tcp_connected_fn)(void *arg, struct tcp_pcb *tpcb, err_t err);tcp_connected_fn125,5425
enum tcp_state {tcp_state127,5505
  CLOSED      = 0,CLOSED128,5522
  LISTEN      = 1,LISTEN129,5541
  SYN_SENT    = 2,SYN_SENT130,5560
  SYN_RCVD    = 3,SYN_RCVD131,5579
  ESTABLISHED = 4,ESTABLISHED132,5598
  FIN_WAIT_1  = 5,FIN_WAIT_1133,5617
  FIN_WAIT_2  = 6,FIN_WAIT_2134,5636
  CLOSE_WAIT  = 7,CLOSE_WAIT135,5655
  CLOSING     = 8,CLOSING136,5674
  LAST_ACK    = 9,LAST_ACK137,5693
  TIME_WAIT   = 10TIME_WAIT138,5712
#define DEF_ACCEPT_CALLBACK DEF_ACCEPT_CALLBACK149,6118
#define DEF_ACCEPT_CALLBACKDEF_ACCEPT_CALLBACK151,6199
#define TCP_PCB_COMMON(TCP_PCB_COMMON157,6329
struct tcp_pcb {tcp_pcb169,6684
  IP_PCB;IP_PCB171,6727
  u16_t remote_port;remote_port176,6846
  u8_t flags;flags178,6870
#define TF_ACK_DELAY TF_ACK_DELAY179,6884
#define TF_ACK_NOW TF_ACK_NOW180,6942
#define TF_INFR TF_INFR181,7002
#define TF_TIMESTAMP TF_TIMESTAMP182,7065
#define TF_RXCLOSED TF_RXCLOSED183,7135
#define TF_FIN TF_FIN184,7206
#define TF_NODELAY TF_NODELAY185,7305
#define TF_NAGLEMEMERR TF_NAGLEMEMERR186,7374
  u32_t rcv_nxt;   /* next seqno expected */rcv_nxt191,7613
  u16_t rcv_wnd;   /* receiver window available */rcv_wnd192,7658
  u16_t rcv_ann_wnd; /* receiver window to announce */rcv_ann_wnd193,7709
  u32_t rcv_ann_right_edge; /* announced right edge of window */rcv_ann_right_edge194,7764
  u32_t tmr;tmr197,7845
  u8_t polltmr, pollinterval;polltmr198,7858
  u8_t polltmr, pollinterval;pollinterval198,7858
  s16_t rtime;rtime201,7921
  u16_t mss;   /* maximum segment size */mss203,7939
  u32_t rttest; /* RTT estimate in 500ms ticks */rttest206,8035
  u32_t rtseq;  /* sequence number being timed */rtseq207,8085
  s16_t sa, sv; /* @todo document this */sa208,8135
  s16_t sa, sv; /* @todo document this */sv208,8135
  s16_t rto;    /* retransmission time-out */rto210,8178
  u8_t nrtx;    /* number of retransmissions */nrtx211,8224
  u32_t lastack; /* Highest acknowledged seqno. */lastack214,8306
  u8_t dupacks;dupacks215,8357
  u16_t cwnd;  cwnd218,8423
  u16_t ssthresh;ssthresh219,8439
  u32_t snd_nxt;   /* next new seqno to be sent */snd_nxt222,8483
  u16_t snd_wnd;   /* sender window */snd_wnd223,8534
  u32_t snd_wl1, snd_wl2; /* Sequence and acknowledgement numbers of lastsnd_wl1224,8573
  u32_t snd_wl1, snd_wl2; /* Sequence and acknowledgement numbers of lastsnd_wl2224,8573
  u32_t snd_lbb;       /* Sequence number of next byte to be buffered. */snd_lbb226,8694
  u16_t acked;acked228,8769
  u16_t snd_buf;   /* Available buffer space for sending (in bytes). */snd_buf230,8787
#define TCP_SNDQUEUELEN_OVERFLOW TCP_SNDQUEUELEN_OVERFLOW231,8859
  u16_t snd_queuelen; /* Available buffer space for sending (in tcp_segs). */snd_queuelen232,8904
  u16_t unsent_oversize;unsent_oversize236,9069
  struct tcp_seg *unsent;   /* Unsent (queued) segments. */unsent240,9168
  struct tcp_seg *unacked;  /* Sent but unacknowledged segments. */unacked241,9228
  struct tcp_seg *ooseq;    /* Received out of sequence segments. */ooseq243,9318
  struct pbuf *refused_data; /* Data previously received but not yet taken by upper layer */refused_data246,9417
  tcp_sent_fn sent;sent250,9605
  tcp_recv_fn recv;recv252,9692
  tcp_connected_fn connected;connected254,9777
  tcp_poll_fn poll;poll256,9854
  tcp_err_fn errf;errf258,9935
  u32_t ts_lastacksent;ts_lastacksent262,10010
  u32_t ts_recent;ts_recent263,10034
  u32_t keep_idle;keep_idle267,10130
  u32_t keep_intvl;keep_intvl269,10172
  u32_t keep_cnt;keep_cnt270,10192
  u32_t persist_cnt;persist_cnt274,10275
  u8_t persist_backoff;persist_backoff276,10327
  u8_t keep_cnt_sent;keep_cnt_sent279,10378
struct tcp_pcb_listen {  tcp_pcb_listen282,10404
  IP_PCB;IP_PCB284,10468
  u8_t backlog;backlog289,10579
  u8_t accepts_pending;accepts_pending290,10595
enum lwip_event {lwip_event296,10675
  LWIP_EVENT_ACCEPT,LWIP_EVENT_ACCEPT297,10693
  LWIP_EVENT_SENT,LWIP_EVENT_SENT298,10714
  LWIP_EVENT_RECV,LWIP_EVENT_RECV299,10733
  LWIP_EVENT_CONNECTED,LWIP_EVENT_CONNECTED300,10752
  LWIP_EVENT_POLL,LWIP_EVENT_POLL301,10776
  LWIP_EVENT_ERRLWIP_EVENT_ERR302,10795
#define          tcp_mss(tcp_mss323,11500
#define          tcp_sndbuf(tcp_sndbuf324,11608
#define          tcp_sndqueuelen(tcp_sndqueuelen325,11667
#define          tcp_nagle_disable(tcp_nagle_disable326,11731
#define          tcp_nagle_enable(tcp_nagle_enable327,11802
#define          tcp_nagle_disabled(tcp_nagle_disabled328,11874
#define          tcp_accepted(tcp_accepted331,11975
#define          tcp_accepted(tcp_accepted335,12204
#define          tcp_listen(tcp_listen346,12798
#define TCP_WRITE_FLAG_COPY TCP_WRITE_FLAG_COPY353,13120
#define TCP_WRITE_FLAG_MORE TCP_WRITE_FLAG_MORE354,13153
#define TCP_PRIO_MIN TCP_PRIO_MIN361,13381
#define TCP_PRIO_NORMAL TCP_PRIO_NORMAL362,13407
#define TCP_PRIO_MAX TCP_PRIO_MAX363,13434

include/lwip/netif.h,3103
#define __LWIP_NETIF_H____LWIP_NETIF_H__33,1633
#define ENABLE_LOOPBACK ENABLE_LOOPBACK37,1682
#define NETIF_MAX_HWADDR_LEN NETIF_MAX_HWADDR_LEN61,2164
#define NETIF_FLAG_UP NETIF_FLAG_UP69,2474
#define NETIF_FLAG_BROADCAST NETIF_FLAG_BROADCAST72,2612
#define NETIF_FLAG_POINTTOPOINT NETIF_FLAG_POINTTOPOINT75,2767
#define NETIF_FLAG_DHCP NETIF_FLAG_DHCP78,2916
#define NETIF_FLAG_LINK_UP NETIF_FLAG_LINK_UP84,3232
#define NETIF_FLAG_ETHARP NETIF_FLAG_ETHARP88,3430
#define NETIF_FLAG_ETHERNET NETIF_FLAG_ETHERNET92,3581
#define NETIF_FLAG_IGMP NETIF_FLAG_IGMP95,3714
typedef err_t (*netif_init_fn)(struct netif *netif);netif_init_fn102,3924
typedef err_t (*netif_input_fn)(struct pbuf *p, struct netif *inp);netif_input_fn109,4254
typedef err_t (*netif_output_fn)(struct netif *netif, struct pbuf *p,netif_output_fn118,4683
typedef err_t (*netif_linkoutput_fn)(struct netif *netif, struct pbuf *p);netif_linkoutput_fn126,5042
typedef void (*netif_status_callback_fn)(struct netif *netif);netif_status_callback_fn128,5189
typedef err_t (*netif_igmp_mac_filter_fn)(struct netif *netif,netif_igmp_mac_filter_fn130,5314
struct netif {netif136,5621
  struct netif *next;next138,5676
  ip_addr_t ip_addr;ip_addr141,5755
  ip_addr_t netmask;netmask142,5776
  ip_addr_t gw;gw143,5797
  netif_input_fn input;input147,5920
  netif_output_fn output;output151,6139
  netif_linkoutput_fn linkoutput;linkoutput155,6334
  netif_status_callback_fn status_callback;status_callback159,6477
  netif_status_callback_fn link_callback;link_callback164,6667
  void *state;state168,6858
  struct dhcp *dhcp;dhcp171,6945
  struct autoip *autoip;autoip175,7065
  char*  hostname;hostname179,7180
  u16_t mtu;mtu182,7274
  u8_t hwaddr_len;hwaddr_len184,7327
  u8_t hwaddr[NETIF_MAX_HWADDR_LEN];hwaddr186,7401
  u8_t flags;flags188,7477
  char name[2];name190,7525
  u8_t num;num192,7575
  u8_t link_type;link_type195,7658
  u32_t link_speed;link_speed197,7707
  u32_t ts;ts199,7776
  u32_t ifinoctets;ifinoctets201,7806
  u32_t ifinucastpkts;ifinucastpkts202,7826
  u32_t ifinnucastpkts;ifinnucastpkts203,7849
  u32_t ifindiscards;ifindiscards204,7873
  u32_t ifoutoctets;ifoutoctets205,7895
  u32_t ifoutucastpkts;ifoutucastpkts206,7916
  u32_t ifoutnucastpkts;ifoutnucastpkts207,7940
  u32_t ifoutdiscards;ifoutdiscards208,7965
  netif_igmp_mac_filter_fn igmp_mac_filter;igmp_mac_filter213,8145
  u8_t *addr_hint;addr_hint216,8238
  struct pbuf *loop_first;loop_first220,8364
  struct pbuf *loop_last;loop_last221,8391
  u16_t loop_cnt_current;loop_cnt_current223,8445
#define NETIF_INIT_SNMP(NETIF_INIT_SNMP229,8555
#define NETIF_INIT_SNMP(NETIF_INIT_SNMP244,9149
#define netif_is_up(netif_is_up278,10299
#define netif_is_link_up(netif_is_link_up287,10669
#define netif_set_hostname(netif_set_hostname294,10945
#define netif_get_hostname(netif_get_hostname295,11049
#define netif_set_igmp_mac_filter(netif_set_igmp_mac_filter299,11180
#define netif_get_igmp_mac_filter(netif_get_igmp_mac_filter300,11306

include/lwip/sio.h,78
#define __SIO_H____SIO_H__36,1728
typedef void * sio_fd_t;sio_fd_t47,1935

include/ipv6/lwip/inet.h,48
#define __LWIP_INET_H____LWIP_INET_H__33,1632

include/ipv6/lwip/icmp.h,1369
#define __LWIP_ICMP_H____LWIP_ICMP_H__33,1632
#define ICMP6_DUR ICMP6_DUR46,1841
#define ICMP6_TE ICMP6_TE47,1862
#define ICMP6_ECHO ICMP6_ECHO48,1883
#define ICMP6_ER ICMP6_ER49,1920
enum icmp_dur_type {icmp_dur_type52,1967
  ICMP_DUR_NET = 0,    /* net unreachable */ICMP_DUR_NET53,1988
  ICMP_DUR_HOST = 1,   /* host unreachable */ICMP_DUR_HOST54,2033
  ICMP_DUR_PROTO = 2,  /* protocol unreachable */ICMP_DUR_PROTO55,2079
  ICMP_DUR_PORT = 3,   /* port unreachable */ICMP_DUR_PORT56,2129
  ICMP_DUR_FRAG = 4,   /* fragmentation needed and DF set */ICMP_DUR_FRAG57,2175
  ICMP_DUR_SR = 5      /* source route failed */ICMP_DUR_SR58,2236
enum icmp_te_type {icmp_te_type61,2289
  ICMP_TE_TTL = 0,     /* time to live exceeded in transit */ICMP_TE_TTL62,2309
  ICMP_TE_FRAG = 1     /* fragment reassembly time exceeded */ICMP_TE_FRAG63,2371
struct icmp_echo_hdr {icmp_echo_hdr71,2616
  u8_t type;type72,2639
  u8_t icode;icode73,2652
  u16_t chksum;chksum74,2666
  u16_t id;id75,2682
  u16_t seqno;seqno76,2694
struct icmp_dur_hdr {icmp_dur_hdr79,2713
  u8_t type;type80,2735
  u8_t icode;icode81,2748
  u16_t chksum;chksum82,2762
  u32_t unused;unused83,2778
struct icmp_te_hdr {icmp_te_hdr86,2798
  u8_t type;type87,2819
  u8_t icode;icode88,2832
  u16_t chksum;chksum89,2846
  u32_t unused;unused90,2862

include/ipv6/lwip/ip.h,1197
#define __LWIP_IP_H____LWIP_IP_H__33,1630
#define IP_HLEN IP_HLEN46,1810
#define IP_PROTO_ICMP IP_PROTO_ICMP48,1830
#define IP_PROTO_UDP IP_PROTO_UDP49,1858
#define IP_PROTO_UDPLITE IP_PROTO_UDPLITE50,1886
#define IP_PROTO_TCP IP_PROTO_TCP51,1915
#undef IP_HDRINCLIP_HDRINCL57,2148
#define IP_HDRINCL IP_HDRINCL59,2190
#define IP_PCB_ADDRHINT IP_PCB_ADDRHINT62,2242
#define IP_PCB_ADDRHINTIP_PCB_ADDRHINT64,2288
#define IP_PCB IP_PCB71,2588
struct ip_hdr {ip_hdr84,2910
  u8_t tclass1:4, v:4;tclass186,2958
  u8_t tclass1:4, v:4;v86,2958
  u8_t flow1:4, tclass2:4;  flow187,2981
  u8_t flow1:4, tclass2:4;  tclass287,2981
  u16_t flow2;flow292,3073
  u16_t len;                /* payload length */len93,3088
  u8_t nexthdr;             /* next header */nexthdr94,3137
  u8_t hoplim;              /* hop limit (TTL) */hoplim95,3183
  struct ip_addr src, dest;          /* source and destination IP addresses */src96,3233
  struct ip_addr src, dest;          /* source and destination IP addresses */dest96,3233
#define IPH_PROTO(IPH_PROTO99,3316
#define ip_current_netif(ip_current_netif117,3813
#define ip_current_header(ip_current_header118,3845

include/ipv6/lwip/ip_addr.h,354
#define __LWIP_IP_ADDR_H____LWIP_IP_ADDR_H__33,1635
#define IP_ADDR_ANY IP_ADDR_ANY41,1726
 struct ip_addr {ip_addr47,1835
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT49,1889
struct ip_addr2 {ip_addr263,2226
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT65,2281
#define IP6_ADDR(IP6_ADDR71,2388
#define ip_addr_debug_print(ip_addr_debug_print82,3122

include/netif/etharp.h,1478
#define __NETIF_ETHARP_H____NETIF_ETHARP_H__36,1777
#define ETHARP_HWADDR_LEN ETHARP_HWADDR_LEN52,2078
struct eth_addr {eth_addr59,2204
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT61,2273
struct eth_hdr {eth_hdr72,2489
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT79,2697
#define SIZEOF_ETH_HDR SIZEOF_ETH_HDR85,2804
struct eth_vlan_hdr {eth_vlan_hdr96,3089
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT99,3181
#define SIZEOF_VLAN_HDR SIZEOF_VLAN_HDR105,3288
#define VLAN_ID(VLAN_ID106,3314
struct etharp_hdr {etharp_hdr115,3553
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT125,3932
#define SIZEOF_ETHARP_HDR SIZEOF_ETHARP_HDR131,4039
#define SIZEOF_ETHARP_PACKET SIZEOF_ETHARP_PACKET132,4068
#define ARP_TMR_INTERVAL ARP_TMR_INTERVAL135,4159
#define ETHTYPE_ARP ETHTYPE_ARP137,4190
#define ETHTYPE_IP ETHTYPE_IP138,4224
#define ETHTYPE_VLAN ETHTYPE_VLAN139,4258
#define ETHTYPE_PPPOEDISC ETHTYPE_PPPOEDISC140,4292
#define ETHTYPE_PPPOE ETHTYPE_PPPOE141,4367
#define ETHADDR32_COPY(ETHADDR32_COPY146,4609
#define ETHADDR16_COPY(ETHADDR16_COPY152,4860
#define ARP_REQUEST ARP_REQUEST158,5046
#define ARP_REPLY ARP_REPLY159,5068
#define LWIP_ARP_FILTER_NETIF LWIP_ARP_FILTER_NETIF168,5467
struct etharp_q_entry {etharp_q_entry175,5632
  struct etharp_q_entry *next;next176,5656
  struct pbuf *p;p177,5687
#define etharp_init(etharp_init181,5735
#define etharp_gratuitous(etharp_gratuitous192,6429
#define eth_addr_cmp(eth_addr_cmp211,7165

include/netif/ppp_oe.h,3023
#define PPP_OE_HPPP_OE_H71,3640
struct pppoehdr {pppoehdr83,3817
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT88,3971
struct pppoetag {pppoetag98,4164
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT101,4246
#define PPPOE_STATE_INITIAL PPPOE_STATE_INITIAL108,4354
#define PPPOE_STATE_PADI_SENT PPPOE_STATE_PADI_SENT109,4386
#define PPPOE_STATE_PADR_SENT PPPOE_STATE_PADR_SENT110,4418
#define PPPOE_STATE_SESSION PPPOE_STATE_SESSION111,4450
#define PPPOE_STATE_CLOSING PPPOE_STATE_CLOSING112,4482
#define PPPOE_STATE_PADO_SENT PPPOE_STATE_PADO_SENT114,4528
#define PPPOE_HEADERLEN PPPOE_HEADERLEN116,4561
#define PPPOE_VERTYPE PPPOE_VERTYPE117,4615
#define PPPOE_TAG_EOL PPPOE_TAG_EOL119,4676
#define PPPOE_TAG_SNAME PPPOE_TAG_SNAME120,4732
#define PPPOE_TAG_ACNAME PPPOE_TAG_ACNAME121,4789
#define PPPOE_TAG_HUNIQUE PPPOE_TAG_HUNIQUE122,4858
#define PPPOE_TAG_ACCOOKIE PPPOE_TAG_ACCOOKIE123,4914
#define PPPOE_TAG_VENDOR PPPOE_TAG_VENDOR124,4968
#define PPPOE_TAG_RELAYSID PPPOE_TAG_RELAYSID125,5028
#define PPPOE_TAG_SNAME_ERR PPPOE_TAG_SNAME_ERR126,5089
#define PPPOE_TAG_ACSYS_ERR PPPOE_TAG_ACSYS_ERR127,5152
#define PPPOE_TAG_GENERIC_ERR PPPOE_TAG_GENERIC_ERR128,5212
#define PPPOE_CODE_PADI PPPOE_CODE_PADI130,5272
#define PPPOE_CODE_PADO PPPOE_CODE_PADO131,5344
#define PPPOE_CODE_PADR PPPOE_CODE_PADR132,5411
#define PPPOE_CODE_PADS PPPOE_CODE_PADS133,5480
#define PPPOE_CODE_PADT PPPOE_CODE_PADT134,5562
#define ETHERMTU ETHERMTU137,5651
#define PPPOE_MAXMTU PPPOE_MAXMTU141,5737
#define PPPOE_MAX_AC_COOKIE_LEN PPPOE_MAX_AC_COOKIE_LEN144,5829
struct pppoe_softc {pppoe_softc147,5874
  struct pppoe_softc *next;next148,5895
  struct netif *sc_ethif;      /* ethernet interface we are using */sc_ethif149,5923
  int sc_pd;                   /* ppp unit number */sc_pd150,5992
  void (*sc_linkStatusCB)(int pd, int up);sc_linkStatusCB151,6045
  int sc_state;                /* discovery phase or session connected */sc_state153,6089
  struct eth_addr sc_dest;     /* hardware address of concentrator */sc_dest154,6163
  u16_t sc_session;            /* PPPoE session id */sc_session155,6233
  char *sc_service_name;       /* if != NULL: requested name of service */sc_service_name158,6306
  char *sc_concentrator_name;  /* if != NULL: requested concentrator id */sc_concentrator_name159,6381
  u8_t sc_ac_cookie[PPPOE_MAX_AC_COOKIE_LEN]; /* content of AC cookie we must echo back */sc_ac_cookie161,6480
  size_t sc_ac_cookie_len;     /* length of cookie data */sc_ac_cookie_len162,6571
  u8_t *sc_hunique;            /* content of host unique we must echo back */sc_hunique164,6650
  size_t sc_hunique_len;       /* length of host unique */sc_hunique_len165,6728
  int sc_padi_retried;         /* number of PADI retries already done */sc_padi_retried167,6794
  int sc_padr_retried;         /* number of PADR retries already done */sc_padr_retried168,6867
#define pppoe_init(pppoe_init172,6945
#define PPPOE_HDRLEN PPPOE_HDRLEN186,7469

include/netif/slipif.h,54
#define __NETIF_SLIPIF_H____NETIF_SLIPIF_H__35,1731

api/netbuf.c,570
netbuf *netbuf_new(void)netbuf_new56,2019
netbuf_delete(struct netbuf *buf)netbuf_delete87,2722
netbuf_alloc(struct netbuf *buf, u16_t size)netbuf_alloc107,3196
netbuf_free(struct netbuf *buf)netbuf_free131,3800
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)netbuf_ref150,4303
netbuf_chain(struct netbuf *head, struct netbuf *tail)netbuf_chain174,4932
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)netbuf_data193,5566
netbuf_next(struct netbuf *buf)netbuf_next218,6356
netbuf_first(struct netbuf *buf)netbuf_first239,6809

api/netdb.c,680
struct gethostbyname_r_helper {gethostbyname_r_helper51,1862
  ip_addr_t *addrs;addrs52,1894
  ip_addr_t addr;addr53,1914
  char *aliases;aliases54,1932
int h_errno;h_errno59,2052
#define LWIP_DNS_API_HOSTENT_STORAGE LWIP_DNS_API_HOSTENT_STORAGE65,2299
#define HOSTENT_STORAGEHOSTENT_STORAGE70,2421
#define HOSTENT_STORAGE HOSTENT_STORAGE72,2451
lwip_gethostbyname(const char *name)lwip_gethostbyname85,2866
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,lwip_gethostbyname_r162,5850
lwip_freeaddrinfo(struct addrinfo *ai)lwip_freeaddrinfo235,7786
lwip_getaddrinfo(const char *nodename, const char *servname,lwip_getaddrinfo266,8852

api/api_lib.c,1795
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)netconn_new_with_proto_and_callback68,2438
netconn_delete(struct netconn *conn)netconn_delete103,3566
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)netconn_getaddr135,4444
netconn_bind(struct netconn *conn, ip_addr_t *addr, u16_t port)netconn_bind166,5453
netconn_connect(struct netconn *conn, ip_addr_t *addr, u16_t port)netconn_connect192,6137
netconn_disconnect(struct netconn *conn)netconn_disconnect217,6773
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)netconn_listen_with_backlog241,7368
netconn_accept(struct netconn *conn, struct netconn **new_conn)netconn_accept277,8278
netconn_recv_data(struct netconn *conn, void **new_buf)netconn_recv_data342,10352
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)netconn_recv_tcp_pbuf434,13300
netconn_recv(struct netconn *conn, struct netbuf **new_buf)netconn_recv451,13905
netconn_recved(struct netconn *conn, u32_t length)netconn_recved508,15586
netconn_sendto(struct netconn *conn, struct netbuf *buf, ip_addr_t *addr, u16_t port)netconn_sendto540,16639
netconn_send(struct netconn *conn, struct netbuf *buf)netconn_send558,17125
netconn_write(struct netconn *conn, const void *dataptr, size_t size, u8_t apiflags)netconn_write588,18127
netconn_close_shutdown(struct netconn *conn, u8_t how)netconn_close_shutdown623,19258
netconn_close(struct netconn *conn)netconn_close649,19925
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)netconn_shutdown662,20279
netconn_join_leave_group(struct netconn *conn,netconn_join_leave_group679,20920
netconn_gethostbyname(const char *name, ip_addr_t *addr)netconn_gethostbyname713,21986

api/tcpip.c,1127
static tcpip_init_done_fn tcpip_init_done;tcpip_init_done53,1960
static void *tcpip_init_done_arg;tcpip_init_done_arg54,2003
static sys_mbox_t mbox;mbox55,2037
sys_mutex_t lock_tcpip_core;lock_tcpip_core59,2137
tcpip_thread(void *arg)tcpip_thread74,2546
tcpip_input(struct pbuf *p, struct netif *inp)tcpip_input156,5205
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)tcpip_callback_with_block206,6575
tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)tcpip_timeout242,7442
tcpip_untimeout(sys_timeout_handler h, void *arg)tcpip_untimeout271,8125
tcpip_apimsg(struct api_msg *apimsg)tcpip_apimsg301,8888
tcpip_apimsg_lock(struct api_msg *apimsg)tcpip_apimsg_lock329,9619
tcpip_netifapi(struct netifapi_msg* netifapimsg)tcpip_netifapi355,10227
tcpip_netifapi_lock(struct netifapi_msg* netifapimsg)tcpip_netifapi_lock385,11075
tcpip_init(tcpip_init_done_fn initfunc, void *arg)tcpip_init404,11562
pbuf_free_int(void *p)pbuf_free_int429,12282
pbuf_free_callback(struct pbuf *p)pbuf_free_callback442,12578
mem_free_callback(void *m)mem_free_callback455,12885

api/api_msg.c,1970
#define SET_NONBLOCKING_CONNECT(SET_NONBLOCKING_CONNECT57,1992
#define IN_NONBLOCKING_CONNECT(IN_NONBLOCKING_CONNECT61,2192
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,recv_raw78,2674
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,recv_udp144,4264
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)recv_tcp216,6353
poll_tcp(void *arg, struct tcp_pcb *pcb)poll_tcp277,7998
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)sent_tcp313,9138
err_tcp(void *arg, err_t err)err_tcp347,10129
setup_tcp(struct netconn *conn)setup_tcp413,12202
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)accept_function432,12627
pcb_new(struct api_msg_msg *msg)pcb_new482,14184
do_newconn(struct api_msg_msg *msg)do_newconn540,15655
netconn_alloc(enum netconn_type t, netconn_callback callback)netconn_alloc564,16391
netconn_free(struct netconn *conn)netconn_free645,18291
netconn_drain(struct netconn *conn)netconn_drain670,19062
do_close_internal(struct netconn *conn)do_close_internal735,20893
do_delconn(struct api_msg_msg *msg)do_delconn820,23621
do_bind(struct api_msg_msg *msg)do_bind886,25718
do_connected(void *arg, struct tcp_pcb *pcb, err_t err)do_connected925,26740
do_connect(struct api_msg_msg *msg)do_connect972,27907
do_disconnect(struct api_msg_msg *msg)do_disconnect1030,29610
do_listen(struct api_msg_msg *msg)do_listen1052,30051
do_send(struct api_msg_msg *msg)do_send1106,31908
do_recv(struct api_msg_msg *msg)do_recv1159,33543
do_writemore(struct netconn *conn)do_writemore1194,34711
do_write(struct api_msg_msg *msg)do_write1313,38604
do_getaddr(struct api_msg_msg *msg)do_getaddr1368,40394
do_close(struct api_msg_msg *msg)do_close1421,41822
do_join_leave_group(struct api_msg_msg *msg)do_join_leave_group1462,43145
do_dns_found(const char *name, ip_addr_t *ipaddr, void *arg)do_dns_found1496,44074
do_gethostbyname(void *arg)do_gethostbyname1522,44707

api/sockets.c,3744
#define NUM_SOCKETS NUM_SOCKETS61,2141
struct lwip_sock {lwip_sock64,2246
  struct netconn *conn;conn66,2343
  void *lastdata;lastdata68,2418
  u16_t lastoffset;lastoffset70,2501
  s16_t rcvevent;rcvevent73,2639
  u16_t sendevent;sendevent76,2765
  u16_t errevent; errevent78,2867
  int err;err80,2935
  int select_waiting;select_waiting82,3024
struct lwip_select_cb {lwip_select_cb86,3098
  struct lwip_select_cb *next;next88,3164
  struct lwip_select_cb *prev;prev90,3241
  fd_set *readset;readset92,3306
  fd_set *writeset;writeset94,3360
  fd_set *exceptset;exceptset96,3431
  int sem_signalled;sem_signalled98,3524
  sys_sem_t sem;sem100,3601
struct lwip_setgetsockopt_data {lwip_setgetsockopt_data105,3764
  struct lwip_sock *sock;sock107,3848
  int s;s110,3942
  int level;level113,4015
  int optname;optname115,4067
  void *optval;optval118,4169
  socklen_t *optlen;optlen120,4210
  err_t err;err122,4291
static struct lwip_sock sockets[NUM_SOCKETS];sockets126,4353
static struct lwip_select_cb *select_cb_list;select_cb_list128,4450
static volatile int select_cb_ctr;select_cb_ctr131,4631
static const int err_to_errno_table[] = {err_to_errno_table135,4765
#define ERR_TO_ERRNO_TABLE_SIZE ERR_TO_ERRNO_TABLE_SIZE154,5947
#define err_to_errno(err_to_errno157,6043
#define set_errno(set_errno163,6193
#define set_errno(set_errno166,6255
#define sock_set_errno(sock_set_errno169,6298
lwip_socket_init(void)lwip_socket_init184,6734
get_socket(int s)get_socket195,6981
tryget_socket(int s)tryget_socket223,7538
alloc_socket(struct netconn *newconn, int accepted)alloc_socket243,7995
free_socket(struct lwip_sock *sock, int is_tcp)free_socket280,9121
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)lwip_accept312,9855
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)lwip_bind401,12626
lwip_close(int s)lwip_close441,13831
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)lwip_connect467,14270
lwip_listen(int s, int backlog)lwip_listen521,15955
lwip_recvfrom(int s, void *mem, size_t len, int flags,lwip_recvfrom549,16550
lwip_read(int s, void *mem, size_t len)lwip_read734,22440
lwip_recv(int s, void *mem, size_t len, int flags)lwip_recv740,22541
lwip_send(int s, const void *data, size_t size, int flags)lwip_send746,22657
lwip_sendto(int s, const void *data, size_t size, int flags,lwip_sendto788,23881
lwip_socket(int domain, int type, int protocol)lwip_socket935,28456
lwip_write(int s, const void *data, size_t size)lwip_write991,30146
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,lwip_selscan1013,31011
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,lwip_select1075,33015
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)event_callback1234,38454
lwip_shutdown(int s, int how)lwip_shutdown1354,41810
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)lwip_getaddrname1395,42641
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)lwip_getpeername1430,43450
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)lwip_getsockname1436,43574
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)lwip_getsockopt1442,43698
lwip_getsockopt_internal(void *arg)lwip_getsockopt_internal1640,48663
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)lwip_setsockopt1843,55159
lwip_setsockopt_internal(void *arg)lwip_setsockopt_internal2050,60357
lwip_ioctl(int s, long cmd, void *argp)lwip_ioctl2254,66950
lwip_fcntl(int s, int cmd, int val)lwip_fcntl2320,68592

api/netifapi.c,508
do_netifapi_netif_add(struct netifapi_msg_msg *msg)do_netifapi_netif_add45,1755
do_netifapi_netif_set_addr(struct netifapi_msg_msg *msg)do_netifapi_netif_set_addr65,2231
do_netifapi_netif_common(struct netifapi_msg_msg *msg)do_netifapi_netif_common80,2600
netifapi_netif_add(struct netif *netif,netifapi_netif_add98,3018
netifapi_netif_set_addr(struct netif *netif,netifapi_netif_set_addr126,3799
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,netifapi_netif_common148,4458

api/err.c,98
static const char *err_strerr[] = {err_strerr43,1699
lwip_strerr(err_t err)lwip_strerr69,2897

core/snmp/mib2.c,25813
#define SNMP_ENTERPRISE_ID SNMP_ENTERPRISE_ID67,2671
#define SNMP_SYSOBJID_LEN SNMP_SYSOBJID_LEN68,2704
#define SNMP_SYSOBJID SNMP_SYSOBJID69,2732
#define SNMP_SYSSERVICES SNMP_SYSSERVICES72,2819
#define SNMP_GET_SYSUPTIME(SNMP_GET_SYSUPTIME76,2923
const mib_scalar_node snmp_scalar = {snmp_scalar123,5876
const s32_t snmp_ids[28] = {snmp_ids131,6016
struct mib_node* const snmp_nodes[28] = {snmp_nodes135,6155
const struct mib_array_node snmp = {snmp151,7123
struct mib_list_rootnode udp_root = {udp_root168,7570
const s32_t udpentry_ids[2] = { 1, 2 };udpentry_ids179,7743
struct mib_node* const udpentry_nodes[2] = {udpentry_nodes180,7783
const struct mib_array_node udpentry = {udpentry183,7891
s32_t udptable_id = 1;udptable_id194,8081
struct mib_node* udptable_node = (struct mib_node*)&udpentry;udptable_node195,8104
struct mib_ram_array_node udptable = {udptable196,8166
const mib_scalar_node udp_scalar = {udp_scalar207,8354
const s32_t udp_ids[5] = { 1, 2, 3, 4, 5 };udp_ids215,8497
struct mib_node* const udp_nodes[5] = {udp_nodes216,8541
const struct mib_array_node udp = {udp221,8742
struct mib_list_rootnode tcpconntree_root = {tcpconntree_root236,9064
const s32_t tcpconnentry_ids[5] = { 1, 2, 3, 4, 5 };tcpconnentry_ids247,9245
struct mib_node* const tcpconnentry_nodes[5] = {tcpconnentry_nodes248,9298
const struct mib_array_node tcpconnentry = {tcpconnentry253,9540
s32_t tcpconntable_id = 1;tcpconntable_id264,9742
struct mib_node* tcpconntable_node = (struct mib_node*)&tcpconnentry;tcpconntable_node265,9769
struct mib_ram_array_node tcpconntable = {tcpconntable266,9839
const mib_scalar_node tcp_scalar = {tcp_scalar279,10159
const s32_t tcp_ids[15] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };tcp_ids287,10302
struct mib_node* const tcp_nodes[15] = {tcp_nodes288,10383
const struct mib_array_node tcp = {tcp298,10909
const mib_scalar_node icmp_scalar = {icmp_scalar311,11118
const s32_t icmp_ids[26] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };icmp_ids319,11264
struct mib_node* const icmp_nodes[26] = {icmp_nodes320,11390
const struct mib_array_node icmp = {icmp335,12292
struct mib_list_rootnode ipntomtree_root = {ipntomtree_root347,12516
const s32_t ipntomentry_ids[4] = { 1, 2, 3, 4 };ipntomentry_ids358,12696
struct mib_node* const ipntomentry_nodes[4] = {ipntomentry_nodes359,12745
const struct mib_array_node ipntomentry = {ipntomentry363,12943
s32_t ipntomtable_id = 1;ipntomtable_id374,13142
struct mib_node* ipntomtable_node = (struct mib_node*)&ipntomentry;ipntomtable_node375,13168
struct mib_ram_array_node ipntomtable = {ipntomtable376,13236
struct mib_list_rootnode iprtetree_root = {iprtetree_root388,13473
const s32_t iprteentry_ids[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };iprteentry_ids399,13652
struct mib_node* const iprteentry_nodes[13] = {iprteentry_nodes400,13732
const struct mib_array_node iprteentry = {iprteentry409,14251
s32_t iprtetable_id = 1;iprtetable_id420,14448
struct mib_node* iprtetable_node = (struct mib_node*)&iprteentry;iprtetable_node421,14473
struct mib_ram_array_node iprtetable = {iprtetable422,14539
struct mib_list_rootnode ipaddrtree_root = {ipaddrtree_root434,14772
const s32_t ipaddrentry_ids[5] = { 1, 2, 3, 4, 5 };ipaddrentry_ids445,14952
struct mib_node* const ipaddrentry_nodes[5] = {ipaddrentry_nodes446,15004
const struct mib_array_node ipaddrentry = {ipaddrentry453,15244
s32_t ipaddrtable_id = 1;ipaddrtable_id464,15443
struct mib_node* ipaddrtable_node = (struct mib_node*)&ipaddrentry;ipaddrtable_node465,15469
struct mib_ram_array_node ipaddrtable = {ipaddrtable466,15537
const mib_scalar_node ip_scalar = {ip_scalar478,15758
const s32_t ip_ids[23] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };ip_ids486,15893
struct mib_node* const ip_nodes[23] = {ip_nodes487,16005
const struct mib_array_node mib2_ip = {mib2_ip501,16766
struct mib_list_rootnode arptree_root = {arptree_root513,16979
const s32_t atentry_ids[3] = { 1, 2, 3 };atentry_ids524,17156
struct mib_node* const atentry_nodes[3] = {atentry_nodes525,17198
const struct mib_array_node atentry = {atentry530,17349
const s32_t attable_id = 1;attable_id541,17536
struct mib_node* const attable_node = (struct mib_node*)&atentry;attable_node542,17564
const struct mib_array_node attable = {attable543,17630
s32_t at_id = 1;at_id555,17841
struct mib_node* mib2_at_node = (struct mib_node*)&attable;mib2_at_node556,17858
struct mib_ram_array_node at = {at557,17918
struct mib_list_rootnode iflist_root = {iflist_root569,18128
const s32_t ifentry_ids[22] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };ifentry_ids585,18433
struct mib_node* const ifentry_nodes[22] = {ifentry_nodes586,18546
const struct mib_array_node ifentry = {ifentry599,19319
s32_t iftable_id = 1;iftable_id610,19507
struct mib_node* iftable_node = (struct mib_node*)&ifentry;iftable_node611,19529
struct mib_ram_array_node iftable = {iftable612,19589
const mib_scalar_node interfaces_scalar = {interfaces_scalar624,19806
const s32_t interfaces_ids[2] = { 1, 2 };interfaces_ids632,19970
struct mib_node* const interfaces_nodes[2] = {interfaces_nodes633,20012
const struct mib_array_node interfaces = {interfaces636,20129
const mib_scalar_node sys_tem_scalar = {sys_tem_scalar650,20386
const s32_t sys_tem_ids[7] = { 1, 2, 3, 4, 5, 6, 7 };sys_tem_ids658,20537
struct mib_node* const sys_tem_nodes[7] = {sys_tem_nodes659,20591
const struct mib_array_node sys_tem = {sys_tem666,20978
#define MIB2_GROUPS MIB2_GROUPS679,21203
#define MIB2_GROUPS MIB2_GROUPS681,21231
const s32_t mib2_ids[MIB2_GROUPS] =mib2_ids683,21260
struct mib_node* const mib2_nodes[MIB2_GROUPS] = {mib2_nodes696,21361
const struct mib_array_node mib2 = {mib2709,21659
const s32_t mgmt_ids[1] = { 1 };mgmt_ids721,21869
struct mib_node* const mgmt_nodes[1] = { (struct mib_node*)&mib2 };mgmt_nodes722,21902
const struct mib_array_node mgmt = {mgmt723,21970
s32_t internet_ids[2] = { 2, 4 };internet_ids738,22347
struct mib_node* const internet_nodes[2] = { (struct mib_node*)&mgmt, (struct mib_node*)&mib_private };internet_nodes739,22381
const struct mib_array_node internet = {internet740,22485
const s32_t internet_ids[1] = { 2 };internet_ids751,22680
struct mib_node* const internet_nodes[1] = { (struct mib_node*)&mgmt };internet_nodes752,22717
const struct mib_array_node internet = {internet753,22789
static struct snmp_obj_id sysobjid = {SNMP_SYSOBJID_LEN, SNMP_SYSOBJID};sysobjid766,23019
static struct snmp_obj_id snmpgrp_id = {7,{1,3,6,1,2,1,11}};snmpgrp_id768,23170
static const s32_t sysservices = SNMP_SYSSERVICES;sysservices770,23263
static const u8_t sysdescr_len_default = 4;sysdescr_len_default773,23344
static const u8_t sysdescr_default[] = "lwIP";sysdescr_default774,23388
static u8_t* sysdescr_len_ptr = (u8_t*)&sysdescr_len_default;sysdescr_len_ptr775,23435
static u8_t* sysdescr_ptr = (u8_t*)&sysdescr_default[0];sysdescr_ptr776,23497
static const u8_t syscontact_len_default = 0;syscontact_len_default778,23585
static const u8_t syscontact_default[] = "";syscontact_default779,23631
static u8_t* syscontact_len_ptr = (u8_t*)&syscontact_len_default;syscontact_len_ptr780,23676
static u8_t* syscontact_ptr = (u8_t*)&syscontact_default[0];syscontact_ptr781,23742
static const u8_t sysname_len_default = 8;sysname_len_default783,23831
static const u8_t sysname_default[] = "FQDN-unk";sysname_default784,23874
static u8_t* sysname_len_ptr = (u8_t*)&sysname_len_default;sysname_len_ptr785,23924
static u8_t* sysname_ptr = (u8_t*)&sysname_default[0];sysname_ptr786,23984
static const u8_t syslocation_len_default = 0;syslocation_len_default788,24071
static const u8_t syslocation_default[] = "";syslocation_default789,24118
static u8_t* syslocation_len_ptr = (u8_t*)&syslocation_len_default;syslocation_len_ptr790,24164
static u8_t* syslocation_ptr = (u8_t*)&syslocation_default[0];syslocation_ptr791,24232
static const u8_t snmpenableauthentraps_default = 2; /* disabled */snmpenableauthentraps_default793,24335
static u8_t* snmpenableauthentraps_ptr = (u8_t*)&snmpenableauthentraps_default;snmpenableauthentraps_ptr794,24403
static const struct snmp_obj_id ifspecific = {2, {0, 0}};ifspecific797,24549
static const struct snmp_obj_id iprouteinfo = {2, {0, 0}};iprouteinfo799,24675
static u32_t sysuptime = 0;sysuptime804,24767
static u32_t ipinreceives = 0,ipinreceives807,24822
             ipinhdrerrors = 0,ipinhdrerrors808,24853
             ipinaddrerrors = 0,ipinaddrerrors809,24885
             ipforwdatagrams = 0,ipforwdatagrams810,24918
             ipinunknownprotos = 0,ipinunknownprotos811,24952
             ipindiscards = 0,ipindiscards812,24988
             ipindelivers = 0,ipindelivers813,25019
             ipoutrequests = 0,ipoutrequests814,25050
             ipoutdiscards = 0,ipoutdiscards815,25082
             ipoutnoroutes = 0,ipoutnoroutes816,25114
             ipreasmreqds = 0,ipreasmreqds817,25146
             ipreasmoks = 0,ipreasmoks818,25177
             ipreasmfails = 0,ipreasmfails819,25206
             ipfragoks = 0,ipfragoks820,25237
             ipfragfails = 0,ipfragfails821,25265
             ipfragcreates = 0,ipfragcreates822,25295
             iproutingdiscards = 0;iproutingdiscards823,25327
static u32_t icmpinmsgs = 0,icmpinmsgs825,25391
             icmpinerrors = 0,icmpinerrors826,25420
             icmpindestunreachs = 0,icmpindestunreachs827,25451
             icmpintimeexcds = 0,icmpintimeexcds828,25488
             icmpinparmprobs = 0,icmpinparmprobs829,25522
             icmpinsrcquenchs = 0,icmpinsrcquenchs830,25556
             icmpinredirects = 0,icmpinredirects831,25591
             icmpinechos = 0,icmpinechos832,25625
             icmpinechoreps = 0,icmpinechoreps833,25655
             icmpintimestamps = 0,icmpintimestamps834,25688
             icmpintimestampreps = 0,icmpintimestampreps835,25723
             icmpinaddrmasks = 0,icmpinaddrmasks836,25761
             icmpinaddrmaskreps = 0,icmpinaddrmaskreps837,25795
             icmpoutmsgs = 0,icmpoutmsgs838,25832
             icmpouterrors = 0,icmpouterrors839,25862
             icmpoutdestunreachs = 0,icmpoutdestunreachs840,25894
             icmpouttimeexcds = 0,icmpouttimeexcds841,25932
             icmpoutparmprobs = 0,icmpoutparmprobs842,25967
             icmpoutsrcquenchs = 0,icmpoutsrcquenchs843,26002
             icmpoutredirects = 0,icmpoutredirects844,26038
             icmpoutechos = 0,icmpoutechos845,26073
             icmpoutechoreps = 0,icmpoutechoreps846,26104
             icmpouttimestamps = 0,icmpouttimestamps847,26138
             icmpouttimestampreps = 0,icmpouttimestampreps848,26174
             icmpoutaddrmasks = 0,icmpoutaddrmasks849,26213
             icmpoutaddrmaskreps = 0;icmpoutaddrmaskreps850,26248
static u32_t tcpactiveopens = 0,tcpactiveopens852,26313
             tcppassiveopens = 0,tcppassiveopens853,26346
             tcpattemptfails = 0,tcpattemptfails854,26380
             tcpestabresets = 0,tcpestabresets855,26414
             tcpinsegs = 0,tcpinsegs856,26447
             tcpoutsegs = 0,tcpoutsegs857,26475
             tcpretranssegs = 0,tcpretranssegs858,26504
             tcpinerrs = 0,tcpinerrs859,26537
             tcpoutrsts = 0;tcpoutrsts860,26565
static u32_t udpindatagrams = 0,udpindatagrams862,26621
             udpnoports = 0,udpnoports863,26654
             udpinerrors = 0,udpinerrors864,26683
             udpoutdatagrams = 0;udpoutdatagrams865,26713
static u32_t snmpinpkts = 0,snmpinpkts867,26775
             snmpoutpkts = 0,snmpoutpkts868,26804
             snmpinbadversions = 0,snmpinbadversions869,26834
             snmpinbadcommunitynames = 0,snmpinbadcommunitynames870,26870
             snmpinbadcommunityuses = 0,snmpinbadcommunityuses871,26912
             snmpinasnparseerrs = 0,snmpinasnparseerrs872,26953
             snmpintoobigs = 0,snmpintoobigs873,26990
             snmpinnosuchnames = 0,snmpinnosuchnames874,27022
             snmpinbadvalues = 0,snmpinbadvalues875,27058
             snmpinreadonlys = 0,snmpinreadonlys876,27092
             snmpingenerrs = 0,snmpingenerrs877,27126
             snmpintotalreqvars = 0,snmpintotalreqvars878,27158
             snmpintotalsetvars = 0,snmpintotalsetvars879,27195
             snmpingetrequests = 0,snmpingetrequests880,27232
             snmpingetnexts = 0,snmpingetnexts881,27268
             snmpinsetrequests = 0,snmpinsetrequests882,27301
             snmpingetresponses = 0,snmpingetresponses883,27337
             snmpintraps = 0,snmpintraps884,27374
             snmpouttoobigs = 0,snmpouttoobigs885,27404
             snmpoutnosuchnames = 0,snmpoutnosuchnames886,27437
             snmpoutbadvalues = 0,snmpoutbadvalues887,27474
             snmpoutgenerrs = 0,snmpoutgenerrs888,27509
             snmpoutgetrequests = 0,snmpoutgetrequests889,27542
             snmpoutgetnexts = 0,snmpoutgetnexts890,27579
             snmpoutsetrequests = 0,snmpoutsetrequests891,27613
             snmpoutgetresponses = 0,snmpoutgetresponses892,27650
             snmpouttraps = 0;snmpouttraps893,27688
static void ocstrncpy(u8_t *dst, u8_t *src, u16_t n)ocstrncpy905,27940
void objectidncpy(s32_t *dst, s32_t *src, u8_t n)objectidncpy921,28231
void snmp_set_sysdesr(u8_t *str, u8_t *len)snmp_set_sysdesr936,28509
void snmp_get_sysobjid_ptr(struct snmp_obj_id **oid)snmp_get_sysobjid_ptr945,28637
void snmp_set_sysobjid(struct snmp_obj_id *oid)snmp_set_sysobjid955,28810
void snmp_inc_sysuptime(void)snmp_inc_sysuptime964,29019
void snmp_add_sysuptime(u32_t value)snmp_add_sysuptime969,29069
void snmp_get_sysuptime(u32_t *value)snmp_get_sysuptime974,29131
void snmp_set_syscontact(u8_t *ocstr, u8_t *ocstrlen)snmp_set_syscontact987,29450
void snmp_set_sysname(u8_t *ocstr, u8_t *ocstrlen)snmp_set_sysname1003,29819
void snmp_set_syslocation(u8_t *ocstr, u8_t *ocstrlen)snmp_set_syslocation1019,30183
void snmp_add_ifinoctets(struct netif *ni, u32_t value)snmp_add_ifinoctets1029,30338
void snmp_inc_ifinucastpkts(struct netif *ni)snmp_inc_ifinucastpkts1034,30426
void snmp_inc_ifinnucastpkts(struct netif *ni)snmp_inc_ifinnucastpkts1039,30502
void snmp_inc_ifindiscards(struct netif *ni)snmp_inc_ifindiscards1044,30580
void snmp_add_ifoutoctets(struct netif *ni, u32_t value)snmp_add_ifoutoctets1049,30654
void snmp_inc_ifoutucastpkts(struct netif *ni)snmp_inc_ifoutucastpkts1054,30744
void snmp_inc_ifoutnucastpkts(struct netif *ni)snmp_inc_ifoutnucastpkts1059,30822
void snmp_inc_ifoutdiscards(struct netif *ni)snmp_inc_ifoutdiscards1064,30902
void snmp_inc_iflist(void)snmp_inc_iflist1069,30978
void snmp_dec_iflist(void)snmp_dec_iflist1078,31196
void snmp_insert_arpidx_tree(struct netif *ni, ip_addr_t *ip)snmp_insert_arpidx_tree1089,31514
void snmp_delete_arpidx_tree(struct netif *ni, ip_addr_t *ip)snmp_delete_arpidx_tree1161,33353
void snmp_inc_ipinreceives(void)snmp_inc_ipinreceives1229,34944
void snmp_inc_ipinhdrerrors(void)snmp_inc_ipinhdrerrors1234,35000
void snmp_inc_ipinaddrerrors(void)snmp_inc_ipinaddrerrors1239,35058
void snmp_inc_ipforwdatagrams(void)snmp_inc_ipforwdatagrams1244,35118
void snmp_inc_ipinunknownprotos(void)snmp_inc_ipinunknownprotos1249,35180
void snmp_inc_ipindiscards(void)snmp_inc_ipindiscards1254,35246
void snmp_inc_ipindelivers(void)snmp_inc_ipindelivers1259,35302
void snmp_inc_ipoutrequests(void)snmp_inc_ipoutrequests1264,35358
void snmp_inc_ipoutdiscards(void)snmp_inc_ipoutdiscards1269,35416
void snmp_inc_ipoutnoroutes(void)snmp_inc_ipoutnoroutes1274,35474
void snmp_inc_ipreasmreqds(void)snmp_inc_ipreasmreqds1279,35532
void snmp_inc_ipreasmoks(void)snmp_inc_ipreasmoks1284,35588
void snmp_inc_ipreasmfails(void)snmp_inc_ipreasmfails1289,35640
void snmp_inc_ipfragoks(void)snmp_inc_ipfragoks1294,35696
void snmp_inc_ipfragfails(void)snmp_inc_ipfragfails1299,35746
void snmp_inc_ipfragcreates(void)snmp_inc_ipfragcreates1304,35800
void snmp_inc_iproutingdiscards(void)snmp_inc_iproutingdiscards1309,35858
void snmp_insert_ipaddridx_tree(struct netif *ni)snmp_insert_ipaddridx_tree1318,35998
void snmp_delete_ipaddridx_tree(struct netif *ni)snmp_delete_ipaddridx_tree1372,37362
void snmp_insert_iprteidx_tree(u8_t dflt, struct netif *ni)snmp_insert_iprteidx_tree1439,39028
void snmp_delete_iprteidx_tree(u8_t dflt, struct netif *ni)snmp_delete_iprteidx_tree1516,41027
void snmp_inc_icmpinmsgs(void)snmp_inc_icmpinmsgs1593,42846
void snmp_inc_icmpinerrors(void)snmp_inc_icmpinerrors1598,42898
void snmp_inc_icmpindestunreachs(void)snmp_inc_icmpindestunreachs1603,42954
void snmp_inc_icmpintimeexcds(void)snmp_inc_icmpintimeexcds1608,43022
void snmp_inc_icmpinparmprobs(void)snmp_inc_icmpinparmprobs1613,43084
void snmp_inc_icmpinsrcquenchs(void)snmp_inc_icmpinsrcquenchs1618,43146
void snmp_inc_icmpinredirects(void)snmp_inc_icmpinredirects1623,43210
void snmp_inc_icmpinechos(void)snmp_inc_icmpinechos1628,43272
void snmp_inc_icmpinechoreps(void)snmp_inc_icmpinechoreps1633,43326
void snmp_inc_icmpintimestamps(void)snmp_inc_icmpintimestamps1638,43386
void snmp_inc_icmpintimestampreps(void)snmp_inc_icmpintimestampreps1643,43450
void snmp_inc_icmpinaddrmasks(void)snmp_inc_icmpinaddrmasks1648,43520
void snmp_inc_icmpinaddrmaskreps(void)snmp_inc_icmpinaddrmaskreps1653,43582
void snmp_inc_icmpoutmsgs(void)snmp_inc_icmpoutmsgs1658,43650
void snmp_inc_icmpouterrors(void)snmp_inc_icmpouterrors1663,43704
void snmp_inc_icmpoutdestunreachs(void)snmp_inc_icmpoutdestunreachs1668,43762
void snmp_inc_icmpouttimeexcds(void)snmp_inc_icmpouttimeexcds1673,43832
void snmp_inc_icmpoutparmprobs(void)snmp_inc_icmpoutparmprobs1678,43896
void snmp_inc_icmpoutsrcquenchs(void)snmp_inc_icmpoutsrcquenchs1683,43960
void snmp_inc_icmpoutredirects(void)snmp_inc_icmpoutredirects1688,44026
void snmp_inc_icmpoutechos(void)snmp_inc_icmpoutechos1693,44090
void snmp_inc_icmpoutechoreps(void)snmp_inc_icmpoutechoreps1698,44146
void snmp_inc_icmpouttimestamps(void)snmp_inc_icmpouttimestamps1703,44208
void snmp_inc_icmpouttimestampreps(void)snmp_inc_icmpouttimestampreps1708,44274
void snmp_inc_icmpoutaddrmasks(void)snmp_inc_icmpoutaddrmasks1713,44346
void snmp_inc_icmpoutaddrmaskreps(void)snmp_inc_icmpoutaddrmaskreps1718,44410
void snmp_inc_tcpactiveopens(void)snmp_inc_tcpactiveopens1723,44480
void snmp_inc_tcppassiveopens(void)snmp_inc_tcppassiveopens1728,44540
void snmp_inc_tcpattemptfails(void)snmp_inc_tcpattemptfails1733,44602
void snmp_inc_tcpestabresets(void)snmp_inc_tcpestabresets1738,44664
void snmp_inc_tcpinsegs(void)snmp_inc_tcpinsegs1743,44724
void snmp_inc_tcpoutsegs(void)snmp_inc_tcpoutsegs1748,44774
void snmp_inc_tcpretranssegs(void)snmp_inc_tcpretranssegs1753,44826
void snmp_inc_tcpinerrs(void)snmp_inc_tcpinerrs1758,44886
void snmp_inc_tcpoutrsts(void)snmp_inc_tcpoutrsts1763,44936
void snmp_inc_udpindatagrams(void)snmp_inc_udpindatagrams1768,44988
void snmp_inc_udpnoports(void)snmp_inc_udpnoports1773,45048
void snmp_inc_udpinerrors(void)snmp_inc_udpinerrors1778,45100
void snmp_inc_udpoutdatagrams(void)snmp_inc_udpoutdatagrams1783,45154
void snmp_insert_udpidx_tree(struct udp_pcb *pcb)snmp_insert_udpidx_tree1792,45304
void snmp_delete_udpidx_tree(struct udp_pcb *pcb)snmp_delete_udpidx_tree1844,46630
void snmp_inc_snmpinpkts(void)snmp_inc_snmpinpkts1921,48481
void snmp_inc_snmpoutpkts(void)snmp_inc_snmpoutpkts1926,48533
void snmp_inc_snmpinbadversions(void)snmp_inc_snmpinbadversions1931,48587
void snmp_inc_snmpinbadcommunitynames(void)snmp_inc_snmpinbadcommunitynames1936,48653
void snmp_inc_snmpinbadcommunityuses(void)snmp_inc_snmpinbadcommunityuses1941,48731
void snmp_inc_snmpinasnparseerrs(void)snmp_inc_snmpinasnparseerrs1946,48807
void snmp_inc_snmpintoobigs(void)snmp_inc_snmpintoobigs1951,48875
void snmp_inc_snmpinnosuchnames(void)snmp_inc_snmpinnosuchnames1956,48933
void snmp_inc_snmpinbadvalues(void)snmp_inc_snmpinbadvalues1961,48999
void snmp_inc_snmpinreadonlys(void)snmp_inc_snmpinreadonlys1966,49061
void snmp_inc_snmpingenerrs(void)snmp_inc_snmpingenerrs1971,49123
void snmp_add_snmpintotalreqvars(u8_t value)snmp_add_snmpintotalreqvars1976,49181
void snmp_add_snmpintotalsetvars(u8_t value)snmp_add_snmpintotalsetvars1981,49262
void snmp_inc_snmpingetrequests(void)snmp_inc_snmpingetrequests1986,49343
void snmp_inc_snmpingetnexts(void)snmp_inc_snmpingetnexts1991,49409
void snmp_inc_snmpinsetrequests(void)snmp_inc_snmpinsetrequests1996,49469
void snmp_inc_snmpingetresponses(void)snmp_inc_snmpingetresponses2001,49535
void snmp_inc_snmpintraps(void)snmp_inc_snmpintraps2006,49603
void snmp_inc_snmpouttoobigs(void)snmp_inc_snmpouttoobigs2011,49657
void snmp_inc_snmpoutnosuchnames(void)snmp_inc_snmpoutnosuchnames2016,49717
void snmp_inc_snmpoutbadvalues(void)snmp_inc_snmpoutbadvalues2021,49785
void snmp_inc_snmpoutgenerrs(void)snmp_inc_snmpoutgenerrs2026,49849
void snmp_inc_snmpoutgetrequests(void)snmp_inc_snmpoutgetrequests2031,49909
void snmp_inc_snmpoutgetnexts(void)snmp_inc_snmpoutgetnexts2036,49977
void snmp_inc_snmpoutsetrequests(void)snmp_inc_snmpoutsetrequests2041,50039
void snmp_inc_snmpoutgetresponses(void)snmp_inc_snmpoutgetresponses2046,50107
void snmp_inc_snmpouttraps(void)snmp_inc_snmpouttraps2051,50177
void snmp_get_snmpgrpid_ptr(struct snmp_obj_id **oid)snmp_get_snmpgrpid_ptr2056,50233
void snmp_set_snmpenableauthentraps(u8_t *value)snmp_set_snmpenableauthentraps2061,50314
void snmp_get_snmpenableauthentraps(u8_t *value)snmp_get_snmpenableauthentraps2069,50436
noleafs_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)noleafs_get_object_def2075,50534
noleafs_get_value(struct obj_def *od, u16_t len, void *value)noleafs_get_value2083,50707
noleafs_set_test(struct obj_def *od, u16_t len, void *value)noleafs_set_test2091,50852
noleafs_set_value(struct obj_def *od, u16_t len, void *value)noleafs_set_value2101,51026
system_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)system_get_object_def2117,51373
system_get_value(struct obj_def *od, u16_t len, void *value)system_get_value2198,54138
system_set_test(struct obj_def *od, u16_t len, void *value)system_set_test2236,55101
system_set_value(struct obj_def *od, u16_t len, void *value)system_set_value2272,55855
interfaces_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)interfaces_get_object_def2304,56714
interfaces_get_value(struct obj_def *od, u16_t len, void *value)interfaces_get_value2335,57559
ifentry_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)ifentry_get_object_def2353,57954
ifentry_get_value(struct obj_def *od, u16_t len, void *value)ifentry_get_value2461,61651
ifentry_set_test(struct obj_def *od, u16_t len, void *value)ifentry_set_test2618,65315
ifentry_set_value(struct obj_def *od, u16_t len, void *value)ifentry_set_value2641,65767
atentry_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)atentry_get_object_def2676,66506
atentry_get_value(struct obj_def *od, u16_t len, void *value)atentry_get_value2721,67838
ip_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)ip_get_object_def2770,68982
ip_get_value(struct obj_def *od, u16_t len, void *value)ip_get_value2836,71057
ip_set_test(struct obj_def *od, u16_t len, void *value)ip_set_test2990,74572
ip_addrentry_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)ip_addrentry_get_object_def3024,75228
ip_addrentry_get_value(struct obj_def *od, u16_t len, void *value)ip_addrentry_get_value3070,76516
ip_rteentry_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)ip_rteentry_get_object_def3146,78592
ip_rteentry_get_value(struct obj_def *od, u16_t len, void *value)ip_rteentry_get_value3211,80660
ip_ntomentry_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)ip_ntomentry_get_object_def3362,84221
ip_ntomentry_get_value(struct obj_def *od, u16_t len, void *value)ip_ntomentry_get_value3412,85738
icmp_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)icmp_get_object_def3468,87085
icmp_get_value(struct obj_def *od, u16_t len, void *value)icmp_get_value3492,87703
tcp_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)tcp_get_object_def3586,90198
tcp_get_value(struct obj_def *od, u16_t len, void *value)tcp_get_value3647,92053
tcpconnentry_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)tcpconnentry_get_object_def3721,93930
tcpconnentry_get_value(struct obj_def *od, u16_t len, void *value)tcpconnentry_get_value3773,95447
udp_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)udp_get_object_def3791,95785
udp_get_value(struct obj_def *od, u16_t len, void *value)udp_get_value3815,96400
udpentry_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)udpentry_get_object_def3841,96997
udpentry_get_value(struct obj_def *od, u16_t len, void *value)udpentry_get_value3880,98060
snmp_get_object_def(u8_t ident_len, s32_t *ident, struct obj_def *od)snmp_get_object_def3923,99039
snmp_get_value(struct obj_def *od, u16_t len, void *value)snmp_get_value3991,101204
snmp_set_test(struct obj_def *od, u16_t len, void *value)snmp_set_test4096,104245
snmp_set_value(struct obj_def *od, u16_t len, void *value)snmp_set_value4130,104981

core/snmp/msg_in.c,1657
const s32_t snmp_version = 0;snmp_version52,1999
const char snmp_publiccommunity[7] = "public";snmp_publiccommunity54,2066
struct snmp_msg_pstat msg_input_list[SNMP_CONCURRENT_REQUESTS];msg_input_list57,2178
struct udp_pcb *snmp1_pcb;snmp1_pcb59,2275
snmp_init(void)snmp_init71,2737
snmp_error_response(struct snmp_msg_pstat *msg_ps, u8_t error)snmp_error_response106,3704
snmp_ok_response(struct snmp_msg_pstat *msg_ps)snmp_ok_response121,4122
snmp_msg_get_event(u8_t request_id, struct snmp_msg_pstat *msg_ps)snmp_msg_get_event147,4800
snmp_msg_getnext_event(u8_t request_id, struct snmp_msg_pstat *msg_ps)snmp_msg_getnext_event380,12769
snmp_msg_set_event(u8_t request_id, struct snmp_msg_pstat *msg_ps)snmp_msg_set_event525,17261
snmp_msg_event(u8_t request_id)snmp_msg_event784,25143
snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)snmp_recv809,25690
snmp_pdu_header_check(struct pbuf *p, u16_t ofs, u16_t pdu_len, u16_t *ofs_ret, struct snmp_msg_pstat *m_stat)snmp_pdu_header_check903,28986
snmp_pdu_dec_varbindlist(struct pbuf *p, u16_t ofs, u16_t *ofs_ret, struct snmp_msg_pstat *m_stat)snmp_pdu_dec_varbindlist1097,34800
snmp_varbind_alloc(struct snmp_obj_id *oid, u8_t type, u8_t len)snmp_varbind_alloc1303,40625
snmp_varbind_free(struct snmp_varbind *vb)snmp_varbind_free1367,42203
snmp_varbind_list_free(struct snmp_varbind_root *root)snmp_varbind_list_free1381,42446
snmp_varbind_tail_add(struct snmp_varbind_root *root, struct snmp_varbind *vb)snmp_varbind_tail_add1398,42720
snmp_varbind_tail_remove(struct snmp_varbind_root *root)snmp_varbind_tail_remove1417,43084

core/snmp/asn1_dec.c,613
snmp_asn1_dec_type(struct pbuf *p, u16_t ofs, u8_t *type)snmp_asn1_dec_type52,2164
snmp_asn1_dec_length(struct pbuf *p, u16_t ofs, u8_t *octets_used, u16_t *length)snmp_asn1_dec_length85,2968
snmp_asn1_dec_u32t(struct pbuf *p, u16_t ofs, u16_t len, u32_t *value)snmp_asn1_dec_u32t240,6807
snmp_asn1_dec_s32t(struct pbuf *p, u16_t ofs, u16_t len, s32_t *value)snmp_asn1_dec_s32t333,8985
snmp_asn1_dec_oid(struct pbuf *p, u16_t ofs, u16_t len, struct snmp_obj_id *oid)snmp_asn1_dec_oid429,11126
snmp_asn1_dec_raw(struct pbuf *p, u16_t ofs, u16_t len, u16_t raw_len, u8_t *raw)snmp_asn1_dec_raw596,15134

core/snmp/msg_out.c,1258
struct snmp_trap_dstsnmp_trap_dst55,2315
  ip_addr_t dip;dip58,2386
  u8_t enable;enable60,2451
struct snmp_trap_dst trap_dst[SNMP_TRAP_DESTINATIONS];trap_dst62,2469
struct snmp_msg_trap trap_msg;trap_msg65,2555
snmp_trap_dst_enable(u8_t dst_idx, u8_t enable)snmp_trap_dst_enable81,3258
snmp_trap_dst_ip_set(u8_t dst_idx, ip_addr_t *dst)snmp_trap_dst_ip_set95,3558
snmp_send_response(struct snmp_msg_pstat *m_stat)snmp_send_response113,4058
snmp_send_trap(s8_t generic_trap, struct snmp_obj_id *eoid, s32_t specific_trap)snmp_send_trap220,7198
snmp_coldstart_trap(void)snmp_coldstart_trap288,9106
snmp_authfail_trap(void)snmp_authfail_trap297,9281
snmp_resp_header_sum(struct snmp_msg_pstat *m_stat, u16_t vb_len)snmp_resp_header_sum319,9832
snmp_trap_header_sum(struct snmp_msg_trap *m_trap, u16_t vb_len)snmp_trap_header_sum366,11368
snmp_varbind_list_sum(struct snmp_varbind_root *root)snmp_varbind_list_sum421,13188
snmp_resp_header_enc(struct snmp_msg_pstat *m_stat, struct pbuf *p)snmp_resp_header_enc487,15269
snmp_trap_header_enc(struct snmp_msg_trap *m_trap, struct pbuf *p)snmp_trap_header_enc544,17237
snmp_varbind_list_enc(struct snmp_varbind_root *root, struct pbuf *p, u16_t ofs)snmp_varbind_list_enc615,19776

core/snmp/mib_structs.c,1822
const s32_t prefix[4] = {1, 3, 6, 1};prefix44,1858
#define NODE_STACK_SIZE NODE_STACK_SIZE46,1897
struct nsense48,1980
  struct mib_node* r_ptr;r_ptr51,2014
  s32_t r_id;r_id53,2072
  u8_t r_nl;r_nl55,2118
static u8_t node_stack_cnt;node_stack_cnt57,2134
static struct nse node_stack[NODE_STACK_SIZE];node_stack58,2162
push_node(struct nse* node)push_node64,2263
pop_node(struct nse* node)pop_node79,2642
snmp_ifindextonetif(s32_t ifindex, struct netif **netif)snmp_ifindextonetif95,3032
snmp_netiftoifindex(struct netif *netif, s32_t *ifidx)snmp_netiftoifindex116,3421
snmp_oidtoip(s32_t *ident, ip_addr_t *ip)snmp_oidtoip136,3768
snmp_iptooid(ip_addr_t *ip, s32_t *ident)snmp_iptooid147,4007
snmp_mib_ln_alloc(s32_t id)snmp_mib_ln_alloc156,4189
snmp_mib_ln_free(struct mib_list_node *ln)snmp_mib_ln_free172,4438
snmp_mib_lrn_alloc(void)snmp_mib_lrn_alloc178,4546
snmp_mib_lrn_free(struct mib_list_rootnode *lrn)snmp_mib_lrn_free199,5014
snmp_mib_node_insert(struct mib_list_rootnode *rn, s32_t objid, struct mib_list_node **insn)snmp_mib_node_insert216,5457
snmp_mib_node_find(struct mib_list_rootnode *rn, s32_t objid, struct mib_list_node **fn)snmp_mib_node_find338,8376
snmp_mib_node_delete(struct mib_list_rootnode *rn, struct mib_list_node *n)snmp_mib_node_delete395,9385
snmp_search_tree(struct mib_node *node, u8_t ident_len, s32_t *ident, struct snmp_name_ptr *np)snmp_search_tree452,10713
empty_table(struct mib_node *node)empty_table640,16033
snmp_expand_tree(struct mib_node *node, u8_t ident_len, s32_t *ident, struct snmp_obj_id *oidret)snmp_expand_tree683,16894
snmp_iso_prefix_tst(u8_t ident_len, s32_t *ident)snmp_iso_prefix_tst1114,28457
snmp_iso_prefix_expand(u8_t ident_len, s32_t *ident, struct snmp_obj_id *oidret)snmp_iso_prefix_expand1140,29087

core/snmp/asn1_enc.c,972
snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)snmp_asn1_enc_length_cnt50,1964
snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)snmp_asn1_enc_u32t_cnt77,2512
snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)snmp_asn1_enc_s32t_cnt110,3029
snmp_asn1_enc_oid_cnt(u8_t ident_len, s32_t *ident, u16_t *octets_needed)snmp_asn1_enc_oid_cnt142,3568
snmp_asn1_enc_type(struct pbuf *p, u16_t ofs, u8_t type)snmp_asn1_enc_type181,4295
snmp_asn1_enc_length(struct pbuf *p, u16_t ofs, u16_t length)snmp_asn1_enc_length213,5001
snmp_asn1_enc_u32t(struct pbuf *p, u16_t ofs, u16_t octets_needed, u32_t value)snmp_asn1_enc_u32t308,7154
snmp_asn1_enc_s32t(struct pbuf *p, u16_t ofs, u16_t octets_needed, s32_t value)snmp_asn1_enc_s32t384,8984
snmp_asn1_enc_oid(struct pbuf *p, u16_t ofs, u8_t ident_len, s32_t *ident)snmp_asn1_enc_oid438,10265
snmp_asn1_enc_raw(struct pbuf *p, u16_t ofs, u16_t raw_len, u8_t *raw)snmp_asn1_enc_raw562,13244

core/mem.c,1894
mem_malloc(mem_size_t size)mem_malloc79,2981
mem_free(void *rmem)mem_free129,4477
struct mem {mem155,5306
  mem_size_t next;next157,5368
  mem_size_t prev;prev159,5440
  u8_t used;used161,5513
#define MIN_SIZE MIN_SIZE168,5768
#define MIN_SIZE_ALIGNED MIN_SIZE_ALIGNED171,5901
#define SIZEOF_STRUCT_MEM SIZEOF_STRUCT_MEM172,5960
#define MEM_SIZE_ALIGNED MEM_SIZE_ALIGNED173,6029
u8_t ram_heap[MEM_SIZE_ALIGNED + (2*SIZEOF_STRUCT_MEM) + MEM_ALIGNMENT];ram_heap181,6443
#define LWIP_RAM_HEAP_POINTER LWIP_RAM_HEAP_POINTER182,6516
static u8_t *ram;ram186,6686
static struct mem *ram_end;ram_end188,6742
static struct mem *lfree;lfree190,6842
static sys_mutex_t mem_mutex;mem_mutex193,6905
static volatile u8_t mem_free_count;mem_free_count197,6980
#define LWIP_MEM_FREE_DECL_PROTECT(LWIP_MEM_FREE_DECL_PROTECT200,7075
#define LWIP_MEM_FREE_PROTECT(LWIP_MEM_FREE_PROTECT201,7145
#define LWIP_MEM_FREE_UNPROTECT(LWIP_MEM_FREE_UNPROTECT202,7210
#define LWIP_MEM_ALLOC_DECL_PROTECT(LWIP_MEM_ALLOC_DECL_PROTECT203,7277
#define LWIP_MEM_ALLOC_PROTECT(LWIP_MEM_ALLOC_PROTECT204,7348
#define LWIP_MEM_ALLOC_UNPROTECT(LWIP_MEM_ALLOC_UNPROTECT205,7414
#define LWIP_MEM_FREE_DECL_PROTECT(LWIP_MEM_FREE_DECL_PROTECT210,7584
#define LWIP_MEM_FREE_PROTECT(LWIP_MEM_FREE_PROTECT211,7621
#define LWIP_MEM_FREE_UNPROTECT(LWIP_MEM_FREE_UNPROTECT212,7683
#define LWIP_MEM_ALLOC_DECL_PROTECT(LWIP_MEM_ALLOC_DECL_PROTECT214,7820
#define LWIP_MEM_ALLOC_PROTECT(LWIP_MEM_ALLOC_PROTECT215,7858
#define LWIP_MEM_ALLOC_UNPROTECT(LWIP_MEM_ALLOC_UNPROTECT216,7891
plug_holes(struct mem *mem)plug_holes233,8407
mem_init(void)mem_init271,9583
mem_free(void *rmem)mem_free308,10541
mem_trim(void *rmem, mem_size_t newsize)mem_trim366,12463
mem_malloc(mem_size_t size)mem_malloc491,16829
void *mem_calloc(mem_size_t count, mem_size_t size)mem_calloc629,22370

core/udp.c,1207
struct udp_pcb *udp_pcbs;udp_pcbs69,2248
udp_input(struct pbuf *p, struct netif *inp)udp_input84,2681
udp_send(struct udp_pcb *pcb, struct pbuf *p)udp_send381,13719
udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,udp_send_chksum391,13981
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,udp_sendto418,14817
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,udp_sendto_chksum427,15046
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,udp_sendto_if476,16728
udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,udp_sendto_if_chksum485,16994
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)udp_bind701,24642
#define UDP_LOCAL_PORT_RANGE_START UDP_LOCAL_PORT_RANGE_START751,26453
#define UDP_LOCAL_PORT_RANGE_END UDP_LOCAL_PORT_RANGE_END752,26496
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)udp_connect806,28178
udp_disconnect(struct udp_pcb *pcb)udp_disconnect864,30044
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)udp_recv883,30571
udp_remove(struct udp_pcb *pcb)udp_remove899,30925
udp_new(void)udp_new930,31639
udp_debug_print(struct udp_hdr *udphdr)udp_debug_print953,32244

core/tcp_in.c,900
static struct tcp_seg inseg;inseg62,2352
static struct tcp_hdr *tcphdr;tcphdr63,2381
static struct ip_hdr *iphdr;iphdr64,2412
static u32_t seqno, ackno;seqno65,2441
static u32_t seqno, ackno;ackno65,2441
static u8_t flags;flags66,2468
static u16_t tcplen;tcplen67,2487
static u8_t recv_flags;recv_flags69,2509
static struct pbuf *recv_data;recv_data70,2533
struct tcp_pcb *tcp_input_pcb;tcp_input_pcb72,2565
tcp_input(struct pbuf *p, struct netif *inp)tcp_input92,3305
tcp_listen_input(struct tcp_pcb_listen *pcb)tcp_listen_input442,15182
tcp_timewait_input(struct tcp_pcb *pcb)tcp_timewait_input526,18164
tcp_process(struct tcp_pcb *pcb)tcp_process572,19811
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)tcp_oos_insert_segment797,27200
tcp_receive(struct tcp_pcb *pcb)tcp_receive844,28741
tcp_parseopt(struct tcp_pcb *pcb)tcp_parseopt1490,55681

core/raw.c,576
static struct raw_pcb *raw_pcbs;raw_pcbs56,2082
raw_input(struct pbuf *p, struct netif *inp)raw_input76,2836
raw_bind(struct raw_pcb *pcb, ip_addr_t *ipaddr)raw_bind142,4771
raw_connect(struct raw_pcb *pcb, ip_addr_t *ipaddr)raw_connect162,5293
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)raw_recv183,5953
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, ip_addr_t *ipaddr)raw_sendto203,6595
raw_send(struct raw_pcb *pcb, struct pbuf *p)raw_send290,9326
raw_remove(struct raw_pcb *pcb)raw_remove304,9613
raw_new(u8_t proto)raw_new335,10372

core/timers.c,1117
static struct sys_timeo *next_timeout;next_timeout62,2176
static u32_t timeouts_last_time;timeouts_last_time64,2226
static int tcpip_tcp_timer_active;tcpip_tcp_timer_active69,2374
tcpip_tcp_timer(void *arg)tcpip_tcp_timer77,2535
tcp_timer_needed(void)tcp_timer_needed99,3019
ip_reass_timer(void *arg)ip_reass_timer117,3452
arp_timer(void *arg)arp_timer133,3805
dhcp_timer_coarse(void *arg)dhcp_timer_coarse149,4146
dhcp_timer_fine(void *arg)dhcp_timer_fine163,4482
autoip_timer(void *arg)autoip_timer179,4844
igmp_timer(void *arg)igmp_timer195,5190
dns_timer(void *arg)dns_timer211,5522
void sys_timeouts_init(void)sys_timeouts_init221,5740
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)sys_timeout_debug261,6946
sys_untimeout(sys_timeout_handler handler, void *arg)sys_untimeout319,8709
sys_check_timeouts(void)sys_check_timeouts356,9615
sys_restart_timeouts(void)sys_restart_timeouts403,10893
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)sys_timeouts_mbox_fetch418,11186
tcp_timer_needed(void)tcp_timer_needed479,13035

core/netif.c,1795
#define NETIF_STATUS_CALLBACK(NETIF_STATUS_CALLBACK64,2213
#define NETIF_STATUS_CALLBACK(NETIF_STATUS_CALLBACK66,2318
#define NETIF_LINK_CALLBACK(NETIF_LINK_CALLBACK70,2422
#define NETIF_LINK_CALLBACK(NETIF_LINK_CALLBACK72,2521
struct netif *netif_list;netif_list75,2592
struct netif *netif_default;netif_default76,2618
static struct netif loop_netif;loop_netif79,2669
netif_loopif_init(struct netif *netif)netif_loopif_init89,2973
netif_init(void)netif_init104,3333
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,netif_add137,4393
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,netif_set_addr222,6796
netif_remove(struct netif *netif)netif_remove236,7118
netif_find(char *name)netif_find286,8350
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)netif_set_ipaddr319,9094
netif_set_gw(struct netif *netif, ip_addr_t *gw)netif_set_gw384,11485
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)netif_set_netmask405,12114
netif_set_default(struct netif *netif)netif_set_default426,12844
void netif_set_up(struct netif *netif)netif_set_up449,13428
void netif_set_down(struct netif *netif)netif_set_down486,14275
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)netif_set_status_callback502,14593
void netif_set_link_up(struct netif *netif )netif_set_link_up513,14849
void netif_set_link_down(struct netif *netif )netif_set_link_down552,15706
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)netif_set_link_callback564,15973
netif_loop_output(struct netif *netif, struct pbuf *p,netif_loop_output588,16823
netif_poll(struct netif *netif)netif_poll676,19441
netif_poll_all(void)netif_poll_all741,21588

core/dns.c,3875
#define DNS_SERVER_ADDRESS(DNS_SERVER_ADDRESS88,3551
#define DNS_SERVER_PORT DNS_SERVER_PORT93,3742
#define DNS_MAX_RETRIES DNS_MAX_RETRIES98,3890
#define DNS_MAX_TTL DNS_MAX_TTL103,4012
#define DNS_FLAG1_RESPONSE DNS_FLAG1_RESPONSE107,4086
#define DNS_FLAG1_OPCODE_STATUS DNS_FLAG1_OPCODE_STATUS108,4125
#define DNS_FLAG1_OPCODE_INVERSE DNS_FLAG1_OPCODE_INVERSE109,4164
#define DNS_FLAG1_OPCODE_STANDARD DNS_FLAG1_OPCODE_STANDARD110,4203
#define DNS_FLAG1_AUTHORATIVE DNS_FLAG1_AUTHORATIVE111,4242
#define DNS_FLAG1_TRUNC DNS_FLAG1_TRUNC112,4281
#define DNS_FLAG1_RD DNS_FLAG1_RD113,4320
#define DNS_FLAG2_RA DNS_FLAG2_RA114,4359
#define DNS_FLAG2_ERR_MASK DNS_FLAG2_ERR_MASK115,4398
#define DNS_FLAG2_ERR_NONE DNS_FLAG2_ERR_NONE116,4437
#define DNS_FLAG2_ERR_NAME DNS_FLAG2_ERR_NAME117,4476
#define DNS_STATE_UNUSED DNS_STATE_UNUSED120,4542
#define DNS_STATE_NEW DNS_STATE_NEW121,4578
#define DNS_STATE_ASKING DNS_STATE_ASKING122,4614
#define DNS_STATE_DONE DNS_STATE_DONE123,4650
struct dns_hdr {dns_hdr130,4799
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT138,5072
#define SIZEOF_DNS_HDR SIZEOF_DNS_HDR143,5178
struct dns_query {dns_query147,5296
  u16_t type;type150,5442
  u16_t cls;cls151,5456
#define SIZEOF_DNS_QUERY SIZEOF_DNS_QUERY153,5472
struct dns_answer {dns_answer157,5592
  u16_t type;type160,5740
  u16_t cls;cls161,5754
  u32_t ttl;ttl162,5767
  u16_t len;len163,5780
#define SIZEOF_DNS_ANSWER SIZEOF_DNS_ANSWER165,5796
struct dns_table_entry {dns_table_entry168,5849
  u8_t  state;state169,5874
  u8_t  numdns;numdns170,5889
  u8_t  tmr;tmr171,5905
  u8_t  retries;retries172,5918
  u8_t  seqno;seqno173,5935
  u8_t  err;err174,5950
  u32_t ttl;ttl175,5963
  char name[DNS_MAX_NAME_LENGTH];name176,5976
  ip_addr_t ipaddr;ipaddr177,6010
  dns_found_callback found;found179,6076
  void *arg;arg180,6104
static struct local_hostlist_entry *local_hostlist_dynamic;local_hostlist_dynamic188,6276
#define DNS_LOCAL_HOSTLIST_STORAGE_PRE DNS_LOCAL_HOSTLIST_STORAGE_PRE194,6531
#define DNS_LOCAL_HOSTLIST_STORAGE_POSTDNS_LOCAL_HOSTLIST_STORAGE_POST199,6774
  DNS_LOCAL_HOSTLIST_STORAGE_POST = DNS_LOCAL_HOSTLIST_INIT;DNS_LOCAL_HOSTLIST_STORAGE_POST202,6942
static struct udp_pcb        *dns_pcb;dns_pcb219,7468
static u8_t                   dns_seqno;dns_seqno220,7507
static struct dns_table_entry dns_table[DNS_TABLE_SIZE];dns_table221,7548
static ip_addr_t              dns_servers[DNS_MAX_SERVERS];dns_servers222,7605
static u8_t                   dns_payload_buffer[LWIP_MEM_ALIGN_BUFFER(DNS_MSG_SIZE)];dns_payload_buffer224,7715
static u8_t*                  dns_payload;dns_payload225,7802
dns_init()dns_init232,7964
dns_setserver(u8_t numdns, ip_addr_t *dnsserver)dns_setserver273,9006
dns_getserver(u8_t numdns)dns_getserver289,9458
dns_tmr(void)dns_tmr303,9759
dns_init_local()dns_init_local313,9929
dns_lookup_local(const char *hostname)dns_lookup_local348,11402
dns_local_removehost(const char *hostname, const ip_addr_t *addr)dns_local_removehost379,12407
dns_local_addhost(const char *hostname, const ip_addr_t *addr)dns_local_addhost414,13418
dns_lookup(const char *name)dns_lookup450,14760
dns_compare_name(unsigned char *query, unsigned char *response)dns_compare_name493,16142
dns_parse_name(unsigned char *query)dns_parse_name528,16870
dns_send(u8_t numdns, const char* name, u8_t id)dns_send560,17576
dns_check_entry(u8_t i)dns_check_entry636,19888
dns_check_entries(void)dns_check_entries718,22284
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)dns_recv733,22518
dns_enqueue(const char *name, dns_found_callback found, void *callback_arg)dns_enqueue860,27367
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,dns_gethostbyname936,29890

core/ipv4/inet.c,0

core/ipv4/ip.c,1484
#define LWIP_INLINE_IP_CHKSUM LWIP_INLINE_IP_CHKSUM64,2321
#define CHECKSUM_GEN_IP_INLINE CHECKSUM_GEN_IP_INLINE67,2407
#define CHECKSUM_GEN_IP_INLINE CHECKSUM_GEN_IP_INLINE69,2447
#define IP_ACCEPT_LINK_LAYER_ADDRESSING IP_ACCEPT_LINK_LAYER_ADDRESSING73,2539
#define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT82,2934
#define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT86,3192
#define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT89,3371
#define IP_ACCEPT_LINK_LAYER_ADDRESSING IP_ACCEPT_LINK_LAYER_ADDRESSING93,3542
struct netif *current_netif;current_netif100,3698
const struct ip_hdr *current_header;current_header105,3793
ip_addr_t current_iphdr_src;current_iphdr_src107,3873
ip_addr_t current_iphdr_dest;current_iphdr_dest109,3950
static u16_t ip_id;ip_id112,4036
ip_route(ip_addr_t *dest)ip_route124,4453
ip_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)ip_forward160,5662
ip_input(struct pbuf *p, struct netif *inp)ip_input242,8671
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,ip_output_if572,20437
err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,ip_output_if_opt586,20876
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,ip_output748,26258
ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,ip_output_hinted787,27859
ip_debug_print(struct pbuf *p)ip_debug_print817,28776

core/ipv4/ip_addr.c,776
const ip_addr_t ip_addr_any = { IPADDR_ANY };ip_addr_any44,1814
const ip_addr_t ip_addr_broadcast = { IPADDR_BROADCAST };ip_addr_broadcast45,1860
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)ip4_addr_isbroadcast55,2188
ip4_addr_netmask_valid(u32_t netmask)ip4_addr_netmask_valid90,3434
#define in_range(in_range114,4014
#define isprint(isprint115,4076
#define isdigit(isdigit116,4129
#define isxdigit(isxdigit117,4180
#define islower(islower118,4272
#define isspace(isspace119,4323
ipaddr_addr(const char *cp)ipaddr_addr130,4651
ipaddr_aton(const char *cp, ip_addr_t *addr)ipaddr_aton152,5295
ipaddr_ntoa(const ip_addr_t *addr)ipaddr_ntoa261,7564
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)ipaddr_ntoa_r276,8015

core/ipv4/autoip.c,1203
#define AUTOIP_NET AUTOIP_NET80,2793
#define AUTOIP_RANGE_START AUTOIP_RANGE_START82,2849
#define AUTOIP_RANGE_END AUTOIP_RANGE_END84,2920
#define LWIP_AUTOIP_RAND(LWIP_AUTOIP_RAND90,3142
#define LWIP_AUTOIP_CREATE_SEED_ADDR(LWIP_AUTOIP_CREATE_SEED_ADDR102,3770
autoip_init(void)autoip_init129,4621
autoip_set_struct(struct netif *netif, struct autoip *autoip)autoip_set_struct141,4984
autoip_restart(struct netif *netif)autoip_restart158,5507
autoip_handle_arp_conflict(struct netif *netif)autoip_handle_arp_conflict168,5690
autoip_create_addr(struct netif *netif, ip_addr_t *ipaddr)autoip_create_addr204,6926
autoip_arp_probe(struct netif *netif)autoip_arp_probe237,8102
autoip_arp_announce(struct netif *netif)autoip_arp_announce250,8460
autoip_bind(struct netif *netif)autoip_bind263,8856
autoip_start(struct netif *netif)autoip_start293,9676
autoip_start_probing(struct netif *netif)autoip_start_probing341,11119
autoip_network_changed(struct netif *netif)autoip_network_changed375,12301
autoip_stop(struct netif *netif)autoip_stop389,12586
autoip_tmr()autoip_tmr400,12789
autoip_arp_reply(struct netif *netif, struct etharp_hdr *hdr)autoip_arp_reply486,16254

core/ipv4/inet_chksum.c,738
# define LWIP_CHKSUM LWIP_CHKSUM59,2237
#  define LWIP_CHKSUM_ALGORITHM LWIP_CHKSUM_ALGORITHM61,2310
# define LWIP_CHKSUM_ALGORITHM LWIP_CHKSUM_ALGORITHM66,2408
lwip_standard_chksum(void *dataptr, u16_t len)lwip_standard_chksum81,2832
lwip_standard_chksum(void *dataptr, int len)lwip_standard_chksum135,4284
lwip_standard_chksum(void *dataptr, int len)lwip_standard_chksum191,5580
inet_chksum_pseudo(struct pbuf *p,inet_chksum_pseudo272,7480
inet_chksum_pseudo_partial(struct pbuf *p,inet_chksum_pseudo_partial332,9654
inet_chksum(void *dataptr, u16_t len)inet_chksum396,11652
inet_chksum_pbuf(struct pbuf *p)inet_chksum_pbuf409,12008
lwip_chksum_copy(void *dst, const void *src, u16_t len)lwip_chksum_copy445,13042

core/ipv4/ip_frag.c,1590
#define IP_REASS_CHECK_OVERLAP IP_REASS_CHECK_OVERLAP67,2592
#define IP_REASS_FREE_OLDEST IP_REASS_FREE_OLDEST75,3011
#define IP_REASS_FLAG_LASTFRAG IP_REASS_FLAG_LASTFRAG78,3077
struct ip_reass_helper {ip_reass_helper92,3613
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT96,3749
#define IP_ADDRESSES_AND_ID_MATCH(IP_ADDRESSES_AND_ID_MATCH102,3856
static struct ip_reassdata *reassdatagrams;reassdatagrams108,4084
static u16_t ip_reass_pbufcount;ip_reass_pbufcount109,4128
ip_reass_tmr(void)ip_reass_tmr122,4529
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)ip_reass_free_complete_datagram158,5587
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)ip_reass_remove_oldest_datagram221,7607
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)ip_reass_enqueue_new_datagram269,9156
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)ip_reass_dequeue_datagram304,10269
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)ip_reass_chain_frag_into_datagram_and_validate331,11182
ip_reass(struct pbuf *p)ip_reass476,16357
static u8_t buf[LWIP_MEM_ALIGN_SIZE(IP_FRAG_MAX_MTU + MEM_ALIGNMENT - 1)];buf618,21409
ip_frag_alloc_pbuf_custom_ref(void)ip_frag_alloc_pbuf_custom_ref624,21628
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)ip_frag_free_pbuf_custom_ref631,21781
ipfrag_free_pbuf_custom(struct pbuf *p)ipfrag_free_pbuf_custom640,22015
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)ip_frag667,22846

core/ipv4/igmp.c,2175
#define IGMP_TTL IGMP_TTL101,4193
#define IGMP_MINLEN IGMP_MINLEN102,4234
#define ROUTER_ALERT ROUTER_ALERT103,4275
#define ROUTER_ALERTLEN ROUTER_ALERTLEN104,4322
#define IGMP_MEMB_QUERY IGMP_MEMB_QUERY109,4420
#define IGMP_V1_MEMB_REPORT IGMP_V1_MEMB_REPORT110,4495
#define IGMP_V2_MEMB_REPORT IGMP_V2_MEMB_REPORT111,4570
#define IGMP_LEAVE_GROUP IGMP_LEAVE_GROUP112,4645
#define IGMP_GROUP_NON_MEMBER IGMP_GROUP_NON_MEMBER115,4752
#define IGMP_GROUP_DELAYING_MEMBER IGMP_GROUP_DELAYING_MEMBER116,4793
#define IGMP_GROUP_IDLE_MEMBER IGMP_GROUP_IDLE_MEMBER117,4834
struct igmp_msg {igmp_msg126,4993
} PACK_STRUCT_STRUCT;PACK_STRUCT_STRUCT131,5214
static struct igmp_group* igmp_group_list;igmp_group_list148,5890
static ip_addr_t     allsystems;allsystems149,5933
static ip_addr_t     allrouters;allrouters150,5966
igmp_init(void)igmp_init157,6044
igmp_dump_group_list()igmp_dump_group_list170,6265
#define igmp_dump_group_list(igmp_dump_group_list183,6653
igmp_start(struct netif *netif)igmp_start192,6829
igmp_stop(struct netif *netif)igmp_stop224,7632
igmp_report_groups(struct netif *netif)igmp_report_groups268,8922
igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)igmp_lookfor_group291,9557
igmp_lookup_group(struct netif *ifp, ip_addr_t *addr)igmp_lookup_group317,10216
igmp_remove_group(struct igmp_group *group)igmp_remove_group356,11409
igmp_input(struct pbuf *p, struct netif *inp, ip_addr_t *dest)igmp_input390,12307
igmp_joingroup(ip_addr_t *ifaddr, ip_addr_t *groupaddr)igmp_joingroup516,16965
igmp_leavegroup(ip_addr_t *ifaddr, ip_addr_t *groupaddr)igmp_leavegroup586,19744
igmp_tmr(void)igmp_tmr656,22377
igmp_timeout(struct igmp_group *group)igmp_timeout678,22790
igmp_start_timer(struct igmp_group *group, u8_t max_time)igmp_start_timer699,23505
igmp_stop_timer(struct igmp_group *group)igmp_stop_timer715,23859
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)igmp_delaying_member727,24104
igmp_ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, struct netif *netif)igmp_ip_output_if757,25470
igmp_send(struct igmp_group *group, u8_t type)igmp_send774,26000

core/ipv4/icmp.c,477
#define LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN59,2277
#define ICMP_DEST_UNREACH_DATASIZE ICMP_DEST_UNREACH_DATASIZE63,2455
icmp_input(struct pbuf *p, struct netif *inp)icmp_input77,2860
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)icmp_dest_unreach257,8940
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)icmp_time_exceeded271,9330
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)icmp_send_response287,9751

core/init.c,142
lwip_sanity_check(void)lwip_sanity_check215,9671
#define lwip_sanity_check(lwip_sanity_check253,11956
lwip_init(void)lwip_init260,12103

core/stats.c,603
struct stats_ lwip_stats;lwip_stats49,1838
void stats_init(void)stats_init51,1865
#define LWIP_MEMPOOL(LWIP_MEMPOOL56,1954
stats_display_proto(struct stats_proto *proto, char *name)stats_display_proto72,2273
stats_display_igmp(struct stats_igmp *igmp)stats_display_igmp91,3251
stats_display_mem(struct stats_mem *mem, char *name)stats_display_mem113,4415
stats_display_memp(struct stats_mem *mem, int index)stats_display_memp124,4794
#define LWIP_MEMPOOL(LWIP_MEMPOOL127,4875
stats_display_sys(struct stats_sys *sys)stats_display_sys139,5113
stats_display(void)stats_display155,5899

core/sys.c,40
sys_msleep(u32_t ms)sys_msleep54,1953

core/tcp_out.c,1724
#define TCP_DATA_COPY(TCP_DATA_COPY61,2202
#define TCP_DATA_COPY2(TCP_DATA_COPY265,2424
#define TCP_DATA_COPY(TCP_DATA_COPY68,2605
#define TCP_DATA_COPY2(TCP_DATA_COPY269,2689
#define TCP_CHECKSUM_ON_COPY_SANITY_CHECK TCP_CHECKSUM_ON_COPY_SANITY_CHECK75,3004
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,tcp_output_alloc_header92,3649
tcp_send_fin(struct tcp_pcb *pcb)tcp_send_fin123,4746
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)tcp_create_segment156,5861
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,tcp_pbuf_prealloc216,7925
#define tcp_pbuf_prealloc(tcp_pbuf_prealloc263,9517
tcp_seg_add_chksum(u16_t chksum, u16_t len, u16_t *seg_chksum,tcp_seg_add_chksum269,9742
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)tcp_write_checks291,10446
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)tcp_write351,12822
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)tcp_enqueue_flags715,25255
tcp_build_timestamp_option(struct tcp_pcb *pcb, u32_t *opts)tcp_build_timestamp_option822,28889
tcp_send_empty_ack(struct tcp_pcb *pcb)tcp_send_empty_ack836,29247
tcp_output(struct tcp_pcb *pcb)tcp_output892,30871
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)tcp_output_segment1046,36263
tcp_rst(u32_t seqno, u32_t ackno,tcp_rst1187,41160
tcp_rexmit_rto(struct tcp_pcb *pcb)tcp_rexmit_rto1231,42547
tcp_rexmit(struct tcp_pcb *pcb)tcp_rexmit1266,43423
tcp_rexmit_fast(struct tcp_pcb *pcb)tcp_rexmit_fast1306,44350
tcp_keepalive(struct tcp_pcb *pcb)tcp_keepalive1349,45654
tcp_zero_window_probe(struct tcp_pcb *pcb)tcp_zero_window_probe1399,47330

core/def.c,157
lwip_htons(u16_t n)lwip_htons64,2402
lwip_ntohs(u16_t n)lwip_ntohs76,2620
lwip_htonl(u32_t n)lwip_htonl88,2812
lwip_ntohl(u32_t n)lwip_ntohl103,3098

core/dhcp.c,3625
#define DHCP_MAX_MSG_LEN(DHCP_MAX_MSG_LEN98,3572
#define DHCP_MAX_MSG_LEN_MIN_REQUIRED DHCP_MAX_MSG_LEN_MIN_REQUIRED99,3624
#define DHCP_MIN_REPLY_LEN DHCP_MIN_REPLY_LEN101,3723
#define REBOOT_TRIES REBOOT_TRIES103,3766
#define DHCP_OPTION_IDX_OVERLOAD DHCP_OPTION_IDX_OVERLOAD110,4069
#define DHCP_OPTION_IDX_MSG_TYPE DHCP_OPTION_IDX_MSG_TYPE111,4107
#define DHCP_OPTION_IDX_SERVER_ID DHCP_OPTION_IDX_SERVER_ID112,4145
#define DHCP_OPTION_IDX_LEASE_TIME DHCP_OPTION_IDX_LEASE_TIME113,4183
#define DHCP_OPTION_IDX_T1 DHCP_OPTION_IDX_T1114,4221
#define DHCP_OPTION_IDX_T2 DHCP_OPTION_IDX_T2115,4259
#define DHCP_OPTION_IDX_SUBNET_MASK DHCP_OPTION_IDX_SUBNET_MASK116,4297
#define DHCP_OPTION_IDX_ROUTER DHCP_OPTION_IDX_ROUTER117,4335
#define DHCP_OPTION_IDX_DNS_SERVER	DHCP_OPTION_IDX_DNS_SERVER118,4373
#define DHCP_OPTION_IDX_MAX DHCP_OPTION_IDX_MAX119,4410
u32_t dhcp_rx_options_val[DHCP_OPTION_IDX_MAX];dhcp_rx_options_val123,4604
u8_t  dhcp_rx_options_given[DHCP_OPTION_IDX_MAX];dhcp_rx_options_given127,4813
#define dhcp_option_given(dhcp_option_given129,4864
#define dhcp_got_option(dhcp_got_option130,4944
#define dhcp_clear_option(dhcp_clear_option131,5023
#define dhcp_clear_all_options(dhcp_clear_all_options132,5102
#define dhcp_get_option_value(dhcp_get_option_value133,5214
#define dhcp_set_option_value(dhcp_set_option_value134,5287
dhcp_handle_nak(struct netif *netif)dhcp_handle_nak183,7286
dhcp_check(struct netif *netif)dhcp_check211,8291
dhcp_handle_offer(struct netif *netif)dhcp_handle_offer238,9319
dhcp_select(struct netif *netif)dhcp_select269,10543
dhcp_coarse_tmr()dhcp_coarse_tmr333,13055
dhcp_fine_tmr()dhcp_fine_tmr365,14213
dhcp_timeout(struct netif *netif)dhcp_timeout398,15253
dhcp_t1_timeout(struct netif *netif)dhcp_t1_timeout461,17725
dhcp_t2_timeout(struct netif *netif)dhcp_t2_timeout483,18467
dhcp_handle_ack(struct netif *netif)dhcp_handle_ack504,19135
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)dhcp_set_struct583,21774
void dhcp_cleanup(struct netif *netif)dhcp_cleanup602,22396
dhcp_start(struct netif *netif)dhcp_start625,22936
dhcp_inform(struct netif *netif)dhcp_inform708,25996
dhcp_network_changed(struct netif *netif)dhcp_network_changed762,27772
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)dhcp_arp_reply799,28621
dhcp_decline(struct netif *netif)dhcp_decline828,29773
dhcp_discover(struct netif *netif)dhcp_discover868,31259
dhcp_bind(struct netif *netif)dhcp_bind923,33627
dhcp_renew(struct netif *netif)dhcp_renew1013,37153
dhcp_rebind(struct netif *netif)dhcp_rebind1076,39335
dhcp_reboot(struct netif *netif)dhcp_reboot1136,41433
dhcp_release(struct netif *netif)dhcp_release1178,42959
dhcp_stop(struct netif *netif)dhcp_stop1230,44851
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)dhcp_set_state1263,45739
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)dhcp_option1278,46015
dhcp_option_byte(struct dhcp *dhcp, u8_t value)dhcp_option_byte1289,46446
dhcp_option_short(struct dhcp *dhcp, u16_t value)dhcp_option_short1296,46689
dhcp_option_long(struct dhcp *dhcp, u32_t value)dhcp_option_long1304,47049
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)dhcp_parse_reply1324,47978
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)dhcp_recv1517,54713
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)dhcp_create_msg1621,59056
dhcp_delete_msg(struct dhcp *dhcp)dhcp_delete_msg1709,62586
dhcp_option_trailer(struct dhcp *dhcp)dhcp_option_trailer1730,63145

core/tcp.c,3508
const char * const tcp_state_str[] = {tcp_state_str58,2225
u32_t tcp_ticks;tcp_ticks73,2541
const u8_t tcp_backoff[13] =tcp_backoff74,2558
const u8_t tcp_persist_backoff[7] = { 3, 6, 12, 24, 48, 96, 120 };tcp_persist_backoff77,2663
struct tcp_pcb *tcp_bound_pcbs;tcp_bound_pcbs82,2828
union tcp_listen_pcbs_t tcp_listen_pcbs;tcp_listen_pcbs84,2904
struct tcp_pcb *tcp_active_pcbs;tcp_active_pcbs87,3031
struct tcp_pcb *tcp_tw_pcbs;tcp_tw_pcbs89,3111
#define NUM_TCP_PCB_LISTS NUM_TCP_PCB_LISTS91,3141
#define NUM_TCP_PCB_LISTS_NO_TIME_WAIT NUM_TCP_PCB_LISTS_NO_TIME_WAIT92,3183
struct tcp_pcb ** const tcp_pcb_lists[] = {&tcp_listen_pcbs.pcbs, &tcp_bound_pcbs,tcp_pcb_lists94,3311
struct tcp_pcb *tcp_tmp_pcb;tcp_tmp_pcb98,3470
static u8_t tcp_timer;tcp_timer101,3566
tcp_tmr(void)tcp_tmr109,3686
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)tcp_close_shutdown138,4663
tcp_close(struct tcp_pcb *pcb)tcp_close252,8422
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)tcp_shutdown278,9152
tcp_abandon(struct tcp_pcb *pcb, int reset)tcp_abandon318,10327
tcp_abort(struct tcp_pcb *pcb)tcp_abort380,12290
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)tcp_bind400,12949
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)tcp_accept_null458,14714
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)tcp_listen_with_backlog483,15478
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)tcp_update_rcv_ann_wnd543,17337
tcp_recved(struct tcp_pcb *pcb, u16_t len)tcp_recved575,18506
tcp_new_port(void)tcp_new_port609,19472
#define TCP_LOCAL_PORT_RANGE_START TCP_LOCAL_PORT_RANGE_START616,19690
#define TCP_LOCAL_PORT_RANGE_END TCP_LOCAL_PORT_RANGE_END617,19733
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,tcp_connect649,20718
tcp_slowtmr(void)tcp_slowtmr750,23891
tcp_fasttmr(void)tcp_fasttmr993,32171
tcp_segs_free(struct tcp_seg *seg)tcp_segs_free1031,33208
tcp_seg_free(struct tcp_seg *seg)tcp_seg_free1046,33450
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)tcp_setprio1066,33785
tcp_seg_copy(struct tcp_seg *seg)tcp_seg_copy1080,34057
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)tcp_recv_null1100,34491
tcp_kill_prio(u8_t prio)tcp_kill_prio1119,34900
tcp_kill_timewait(void)tcp_kill_timewait1152,35738
tcp_alloc(u8_t prio)tcp_alloc1180,36471
tcp_new(void)tcp_new1264,39115
tcp_arg(struct tcp_pcb *pcb, void *arg)tcp_arg1277,39382
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)tcp_recv1291,39712
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)tcp_sent1304,40057
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)tcp_err1318,40412
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)tcp_accept1332,40799
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)tcp_poll1346,41115
tcp_pcb_purge(struct tcp_pcb *pcb)tcp_pcb_purge1363,41562
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)tcp_pcb_remove1431,43747
tcp_next_iss(void)tcp_next_iss1464,44573
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)tcp_eff_send_mss1479,44946
tcp_debug_state_str(enum tcp_state s)tcp_debug_state_str1498,45461
tcp_debug_print(struct tcp_hdr *tcphdr)tcp_debug_print1510,45691
tcp_debug_print_state(enum tcp_state s)tcp_debug_print_state1546,47290
tcp_debug_print_flags(u8_t flags)tcp_debug_print_flags1557,47511
tcp_debug_print_pcbs(void)tcp_debug_print_pcbs1590,48193
tcp_pcbs_sane(void)tcp_pcbs_sane1620,49473

core/pbuf.c,1878
#define SIZEOF_STRUCT_PBUF SIZEOF_STRUCT_PBUF82,3125
#define PBUF_POOL_BUFSIZE_ALIGNED PBUF_POOL_BUFSIZE_ALIGNED85,3354
#define PBUF_POOL_IS_EMPTY(PBUF_POOL_IS_EMPTY88,3472
#define PBUF_POOL_FREE_OOSEQ PBUF_POOL_FREE_OOSEQ92,3665
#define PBUF_POOL_IS_EMPTY(PBUF_POOL_IS_EMPTY97,3780
static u8_t pbuf_free_ooseq_queued;pbuf_free_ooseq_queued98,3830
pbuf_free_ooseq(void* arg)pbuf_free_ooseq108,4202
pbuf_pool_is_empty(void)pbuf_pool_is_empty131,4813
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)pbuf_alloc185,6971
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,pbuf_alloced_custom344,12812
pbuf_realloc(struct pbuf *p, u16_t new_len)pbuf_realloc407,14719
pbuf_header(struct pbuf *p, s16_t header_size_increment)pbuf_header488,17423
pbuf_free(struct pbuf *p)pbuf_free595,21086
pbuf_clen(struct pbuf *p)pbuf_clen681,23871
pbuf_ref(struct pbuf *p)pbuf_ref700,24109
pbuf_cat(struct pbuf *h, struct pbuf *t)pbuf_cat722,24557
pbuf_chain(struct pbuf *h, struct pbuf *t)pbuf_chain763,26005
pbuf_dechain(struct pbuf *p)pbuf_dechain780,26502
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)pbuf_copy829,28156
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)pbuf_copy_partial895,30592
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)pbuf_take943,32080
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)pbuf_coalesce987,33542
pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,pbuf_fill_chksum1019,34426
pbuf_get_at(struct pbuf* p, u16_t offset)pbuf_get_at1054,35447
pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n)pbuf_memcmp1081,36172
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)pbuf_memfind1117,37148
pbuf_strstr(struct pbuf* p, const char* substr)pbuf_strstr1145,38004

core/ipv6/icmp6.c,232
icmp_input(struct pbuf *p, struct netif *inp)icmp_input47,1909
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)icmp_dest_unreach106,3900
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)icmp_time_exceeded142,4841

core/ipv6/inet6.c,228
chksum(void *dataptr, u16_t len)chksum55,2128
inet_chksum_pseudo(struct pbuf *p,inet_chksum_pseudo80,2513
inet_chksum(void *dataptr, u16_t len)inet_chksum129,3612
inet_chksum_pbuf(struct pbuf *p)inet_chksum_pbuf140,3796

core/ipv6/ip6.c,550
ip_init(void)ip_init63,1975
ip_route(struct ip_addr *dest)ip_route75,2275
ip_forward(struct pbuf *p, struct ip_hdr *iphdr)ip_forward96,2751
ip_input(struct pbuf *p, struct netif *inp) {ip_input157,4451
ip_output_if (struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,ip_output_if260,6816
ip_output(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,ip_output317,8186
ip_output_hinted(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,ip_output_hinted332,8573
ip_debug_print(struct pbuf *p)ip_debug_print354,9111

core/ipv6/ip6_addr.c,295
ip_addr_netcmp(struct ip_addr *addr1, struct ip_addr *addr2,ip_addr_netcmp38,1686
ip_addr_cmp(struct ip_addr *addr1, struct ip_addr *addr2)ip_addr_cmp49,2127
ip_addr_set(struct ip_addr *dest, struct ip_addr *src)ip_addr_set58,2374
ip_addr_isany(struct ip_addr *addr)ip_addr_isany68,2619

core/memp.c,2084
struct memp {memp66,2369
  struct memp *next;next67,2383
  const char *file;file69,2428
  int line;line70,2448
#define MEMP_SANITY_REGION_BEFORE MEMP_SANITY_REGION_BEFORE84,3035
#define MEMP_SANITY_REGION_BEFORE_ALIGNED MEMP_SANITY_REGION_BEFORE_ALIGNED87,3145
#define MEMP_SANITY_REGION_BEFORE_ALIGNED MEMP_SANITY_REGION_BEFORE_ALIGNED89,3243
#define MEMP_SANITY_REGION_AFTER MEMP_SANITY_REGION_AFTER92,3361
#define MEMP_SANITY_REGION_AFTER_ALIGNED MEMP_SANITY_REGION_AFTER_ALIGNED95,3469
#define MEMP_SANITY_REGION_AFTER_ALIGNED MEMP_SANITY_REGION_AFTER_ALIGNED97,3566
#define MEMP_SIZE MEMP_SIZE101,3716
#define MEMP_ALIGN_SIZE(MEMP_ALIGN_SIZE102,3822
#define MEMP_SIZE MEMP_SIZE110,4090
#define MEMP_ALIGN_SIZE(MEMP_ALIGN_SIZE111,4120
static struct memp *memp_tab[MEMP_MAX];memp_tab117,4301
#define MEMP_ALIGN_SIZE(MEMP_ALIGN_SIZE121,4371
#define LWIP_MEMPOOL(LWIP_MEMPOOL130,4600
const u16_t memp_sizes[MEMP_MAX] = {memp_sizes129,4563
#define LWIP_MEMPOOL(LWIP_MEMPOOL138,4883
static const u16_t memp_num[MEMP_MAX] = {memp_num137,4841
#define LWIP_MEMPOOL(LWIP_MEMPOOL145,5084
static const char *memp_desc[MEMP_MAX] = {memp_desc144,5041
#define LWIP_MEMPOOL(LWIP_MEMPOOL157,5507
#define LWIP_MEMPOOL(LWIP_MEMPOOL163,5758
static u8_t *const memp_bases[] = { memp_bases162,5721
#define LWIP_MEMPOOL(LWIP_MEMPOOL171,6021
static u8_t memp_memory[MEM_ALIGNMENT - 1 memp_memory170,5978
memp_sanity(void)memp_sanity182,6264
#define LWIP_MEMPOOL(LWIP_MEMPOOL203,6708
static const char * memp_overflow_names[] = {memp_overflow_names202,6662
memp_overflow_check_element_overflow(struct memp *p, u16_t memp_type)memp_overflow_check_element_overflow216,7010
memp_overflow_check_element_underflow(struct memp *p, u16_t memp_type)memp_overflow_check_element_underflow249,7905
memp_overflow_check_all(void)memp_overflow_check_all280,8748
memp_overflow_init(void)memp_overflow_init307,9498
memp_init(void)memp_init337,10286
memp_malloc(memp_t type)memp_malloc389,11666
memp_free(memp_t type, void *mem)memp_free434,12801

netif/ppp/chap.c,1559
struct protent chap_protent = {chap_protent118,4668
chap_state chap[NUM_PPP]; /* CHAP state; one for each unit */chap140,5007
ChapInit(int unit)ChapInit158,5745
ChapAuthWithPeer(int unit, char *our_name, u_char digest)ChapAuthWithPeer177,6174
ChapAuthPeer(int unit, char *our_name, u_char digest)ChapAuthPeer204,6793
ChapChallengeTimeout(void *arg)ChapChallengeTimeout228,7370
ChapResponseTimeout(void *arg)ChapResponseTimeout255,8075
ChapRechallenge(void *arg)ChapRechallenge272,8403
ChapLowerUp(int unit)ChapLowerUp293,8801
ChapLowerDown(int unit)ChapLowerDown319,9398
ChapProtocolReject(int unit)ChapProtocolReject343,10030
ChapInput(int unit, u_char *inpacket, int packet_len)ChapInput363,10543
ChapReceiveChallenge(chap_state *cstate, u_char *inp, u_char id, int len)ChapReceiveChallenge423,11884
ChapReceiveResponse(chap_state *cstate, u_char *inp, int id, int len)ChapReceiveResponse521,14758
ChapReceiveSuccess(chap_state *cstate, u_char *inp, u_char id, int len)ChapReceiveSuccess640,18228
ChapReceiveFailure(chap_state *cstate, u_char *inp, u_char id, int len)ChapReceiveFailure678,19007
ChapSendChallenge(chap_state *cstate)ChapSendChallenge710,19768
ChapSendStatus(chap_state *cstate, int code)ChapSendStatus746,20735
ChapGenChallenge(chap_state *cstate)ChapGenChallenge782,21740
ChapSendResponse(chap_state *cstate)ChapSendResponse811,22490
static char *ChapCodenames[] = {ChapCodenames842,23447
ChapPrintPkt( u_char *p, int plen, void (*printer) (void *, char *, ...), void *arg)ChapPrintPkt849,23604

netif/ppp/vj.c,623
#define INCR(INCR45,1492
#define INCR(INCR47,1542
vj_compress_init(struct vjcompress *comp)vj_compress_init51,1577
#define ENCODE(ENCODE78,2312
#define ENCODEZ(ENCODEZ88,2506
#define DECODEL(DECODEL99,2723
#define DECODES(DECODES110,2946
#define DECODEU(DECODEU121,3184
vj_compress_tcp(struct vjcompress *comp, struct pbuf *pb)vj_compress_tcp138,3641
vj_uncompress_err(struct vjcompress *comp)vj_uncompress_err416,12444
vj_uncompress_uncomp(struct pbuf *nb, struct vjcompress *comp)vj_uncompress_uncomp427,12646
vj_uncompress_tcp(struct pbuf **nb, struct vjcompress *comp)vj_uncompress_tcp464,13843

netif/ppp/chpms.h,81
#define CHPMS_HCHPMS_H58,2762
#define MAX_NT_PASSWORD MAX_NT_PASSWORD60,2779

netif/ppp/auth.h,30
#define AUTH_HAUTH_H54,2630

netif/ppp/vj.h,2649
#define VJ_HVJ_H26,1026
#define MAX_SLOTS MAX_SLOTS31,1089
#define MAX_HDR MAX_HDR32,1138
#define TYPE_IP TYPE_IP78,3250
#define TYPE_UNCOMPRESSED_TCP TYPE_UNCOMPRESSED_TCP79,3285
#define TYPE_COMPRESSED_TCP TYPE_COMPRESSED_TCP80,3320
#define TYPE_ERROR TYPE_ERROR81,3355
#define NEW_C NEW_C84,3438
#define NEW_I NEW_I85,3502
#define NEW_S NEW_S86,3521
#define NEW_A NEW_A87,3540
#define NEW_W NEW_W88,3559
#define NEW_U NEW_U89,3578
#define SPECIAL_I SPECIAL_I92,3643
#define SPECIAL_D SPECIAL_D93,3714
#define SPECIALS_MASK SPECIALS_MASK94,3784
#define TCP_PUSH_BIT TCP_PUSH_BIT96,3833
struct cstate {cstate105,4144
  struct cstate *cs_next; /* next most recently used state (xmit only) */cs_next106,4160
  u_short cs_hlen;        /* size of hdr (receive only) */cs_hlen107,4234
  u_char cs_id;           /* connection # associated with this state */cs_id108,4293
  u_char cs_filler;cs_filler109,4365
    char csu_hdr[MAX_HDR];csu_hdr111,4395
    struct ip_hdr csu_ip;     /* ip/tcp hdr from most recent packet */csu_ip112,4422
  } vjcs_u;vjcs_u113,4493
#define cs_ip cs_ip115,4508
#define cs_hdr cs_hdr116,4536
struct vjstat {vjstat119,4568
  unsigned long vjs_packets;        /* outbound packets */vjs_packets120,4584
  unsigned long vjs_compressed;     /* outbound compressed packets */vjs_compressed121,4643
  unsigned long vjs_searches;       /* searches for connection state */vjs_searches122,4713
  unsigned long vjs_misses;         /* times couldn't find conn. state */vjs_misses123,4785
  unsigned long vjs_uncompressedin; /* inbound uncompressed packets */vjs_uncompressedin124,4859
  unsigned long vjs_compressedin;   /* inbound compressed packets */vjs_compressedin125,4930
  unsigned long vjs_errorin;        /* inbound unknown type packets */vjs_errorin126,4999
  unsigned long vjs_tossed;         /* inbound packets tossed because of error */vjs_tossed127,5070
struct vjcompress {vjcompress133,5238
  struct cstate *last_cs;          /* most recently used tstate */last_cs134,5258
  u_char last_recv;                /* last rcvd conn. id */last_recv135,5325
  u_char last_xmit;                /* last sent conn. id */last_xmit136,5385
  u_short flags;flags137,5445
  u_char maxSlotIndex;maxSlotIndex138,5462
  u_char compressSlot;             /* Flag indicating OK to compress slot ID. */compressSlot139,5485
  struct vjstat stats;stats141,5581
  struct cstate tstate[MAX_SLOTS]; /* xmit connection states */tstate143,5611
  struct cstate rstate[MAX_SLOTS]; /* receive connection states */rstate144,5675
#define VJF_TOSS VJF_TOSS148,5764

netif/ppp/ppp.c,6653
#define PPP_INPROC_MULTITHREADED PPP_INPROC_MULTITHREADED125,4854
#define PPP_INPROC_OWNTHREAD PPP_INPROC_OWNTHREAD132,5119
#define PPP_ADDRESS(PPP_ADDRESS142,5345
#define PPP_CONTROL(PPP_CONTROL143,5390
#define PPP_PROTOCOL(PPP_PROTOCOL144,5435
  PDIDLE = 0,  /* Idle state - waiting. */PDIDLE149,5615
  PDSTART,     /* Process start flag. */PDSTART150,5658
  PDADDRESS,   /* Process address field. */PDADDRESS151,5699
  PDCONTROL,   /* Process control field. */PDCONTROL152,5743
  PDPROTOCOL1, /* Process protocol field 1. */PDPROTOCOL1153,5787
  PDPROTOCOL2, /* Process protocol field 2. */PDPROTOCOL2154,5834
  PDDATA       /* Process data byte. */PDDATA155,5881
} PPPDevStates;PPPDevStates156,5921
#define ESCAPE_P(ESCAPE_P158,5938
#define PPPOS_RX_BUFSIZE PPPOS_RX_BUFSIZE166,6170
typedef struct PPPControlRx_s {PPPControlRx_s169,6229
  int pd;pd171,6299
  sio_fd_t fd;fd173,6341
  u_char rxbuf[PPPOS_RX_BUFSIZE];rxbuf175,6410
  struct pbuf *inHead, *inTail;inHead178,6471
  struct pbuf *inHead, *inTail;inTail178,6471
  u16_t inProtocol;             /* The input protocol code. */inProtocol181,6522
  u16_t inFCS;                  /* Input Frame Check Sequence value. */inFCS182,6585
  PPPDevStates inState;         /* The input process state. */inState184,6684
  char inEscaped;               /* Escape next character. */inEscaped185,6747
  ext_accm inACCM;              /* Async-Ctl-Char-Map for input. */inACCM186,6808
} PPPControlRx;PPPControlRx187,6876
typedef struct PPPControl_s {PPPControl_s192,6932
  PPPControlRx rx;rx193,6962
  char openFlag;                /* True when in use. */openFlag194,6981
  struct netif *ethif;ethif196,7055
  struct pppoe_softc *pppoe_sc;pppoe_sc197,7078
  int  if_up;                   /* True when the interface is up. */if_up199,7137
  int  errCode;                 /* Code indicating why interface is down. */errCode200,7206
  sio_fd_t fd;                  /* File device ID of port. */fd202,7301
  u16_t mtu;                    /* Peer's mru */mtu204,7390
  int  pcomp;                   /* Does peer accept protocol compression? */pcomp205,7439
  int  accomp;                  /* Does peer accept addr/ctl compression? */accomp206,7516
  u_long lastXMit;              /* Time of last transmission. */lastXMit207,7593
  ext_accm outACCM;             /* Async-Ctl-Char-Map for output. */outACCM208,7658
  int  vjEnabled;               /* Flag indicating VJ compression enabled. */vjEnabled210,7759
  struct vjcompress vjComp;     /* Van Jacobson compression header. */vjComp211,7837
  struct netif netif;netif214,7950
  struct ppp_addrs addrs;addrs216,7973
  void (*linkStatusCB)(void *ctx, int errCode, void *arg);linkStatusCB218,8000
  void *linkStatusCtx;linkStatusCtx219,8059
} PPPControl;PPPControl221,8083
struct npioctl {npioctl228,8129
  int         protocol; /* PPP procotol, e.g. PPP_IP */protocol229,8146
  enum NPmode mode;mode230,8202
u_long subnetMask;subnetMask250,8688
static PPPControl pppControl[NUM_PPP]; /* The PPP interface control blocks. */pppControl252,8708
struct protent *ppp_protocols[] = {ppp_protocols259,8905
u_char outpacket_buf[NUM_PPP][PPP_MRU+PPP_HDRLEN];outpacket_buf282,9382
static const u_short fcstab[256] = {fcstab294,9674
static u_char pppACCMMask[] = {pppACCMMask331,11945
pppRecvWakeup(int pd)pppRecvWakeup344,12125
pppLinkTerminated(int pd)pppLinkTerminated354,12322
pppLinkDown(int pd)pppLinkDown381,13010
pppStart(int pd)pppStart399,13343
pppStop(int pd)pppStop409,13559
pppHup(int pd)pppHup417,13716
struct ppp_settings ppp_settings;ppp_settings429,13983
pppInit(void)pppInit432,14023
pppSetAuth(enum pppAuthType authType, const char *user, const char *passwd)pppSetAuth454,14458
pppOverSerialOpen(sio_fd_t fd, void (*linkStatusCB)(void *ctx, int errCode, void *arg), void *linkStatusCtx)pppOverSerialOpen530,17102
pppOverEthernetClose(int pd)pppOverEthernetClose588,18611
int pppOverEthernetOpen(struct netif *ethif, const char *service_name, const char *concentrator_name, void (*linkStatusCB)(void *ctx, int errCode, void *arg), void *linkStatusCtx)pppOverEthernetOpen598,18771
pppClose(int pd)pppClose652,20351
pppSigHUP(int pd)pppSigHUP683,21064
nPut(PPPControl *pc, struct pbuf *nb)nPut691,21204
pppAppend(u_char c, struct pbuf *nb, ext_accm *outACCM)pppAppend721,22075
pppifOutputOverEthernet(int pd, struct pbuf *p)pppifOutputOverEthernet754,22918
pppifOutput(struct netif *netif, struct pbuf *pb, ip_addr_t *ipaddr)pppifOutput798,23985
pppIOCtl(int pd, int cmd, void *arg)pppIOCtl949,28149
pppMTU(int pd)pppMTU1001,29262
pppWriteOverEthernet(int pd, const u_char *s, int n)pppWriteOverEthernet1018,29493
pppWrite(int pd, const u_char *s, int n)pppWrite1061,30498
ppp_send_config( int unit, u16_t mtu, u32_t asyncmap, int pcomp, int accomp)ppp_send_config1139,32661
ppp_set_xaccm(int unit, ext_accm *accm)ppp_set_xaccm1162,33252
ppp_recv_config( int unit, int mru, u32_t asyncmap, int pcomp, int accomp)ppp_recv_config1179,33710
get_idle_time(int u, struct ppp_idle *ip)get_idle_time1240,35262
GetMask(u32_t addr)GetMask1259,35753
sifvjcomp(int pd, int vjcomp, u8_t cidcomp, u8_t maxcid)sifvjcomp1287,36294
pppifNetifInit(struct netif *netif)pppifNetifInit1311,36904
sifup(int pd)sifup1330,37377
sifnpmode(int u, int proto, enum NPmode mode)sifnpmode1363,38272
sifdown(int pd)sifdown1375,38474
sifaddr( int pd, u32_t o, u32_t h, u32_t m, u32_t ns1, u32_t ns2)sifaddr1406,39298
cifaddr( int pd, u32_t o, u32_t h)cifaddr1432,40034
sifdefaultroute(int pd, u32_t l, u32_t g)sifdefaultroute1456,40623
cifdefaultroute(int pd, u32_t l, u32_t g)cifdefaultroute1480,41118
pppInputThread(void *arg)pppInputThread1506,41746
pppOverEthernetInitFailed(int pd)pppOverEthernetInitFailed1526,42173
pppOverEthernetLinkStatusCB(int pd, int up)pppOverEthernetLinkStatusCB1543,42468
pppSingleBuf(struct pbuf *p)pppSingleBuf1555,42721
struct pppInputHeader {pppInputHeader1581,43185
  int unit;unit1582,43209
  u16_t proto;proto1583,43221
pppInput(void *arg)pppInput1591,43395
pppDrop(PPPControlRx *pcrx)pppDrop1717,47691
pppos_input(int pd, u_char* data, int len)pppos_input1747,48633
pppInProc(PPPControlRx *pcrx, u_char *s, int l)pppInProc1756,48781
pppInProcOverEthernet(int pd, struct pbuf *pb)pppInProcOverEthernet1955,56221
ppp_set_netif_statuscallback(int pd, netif_status_callback_fn status_callback)ppp_set_netif_statuscallback1999,57293
ppp_set_netif_linkcallback(int pd, netif_status_callback_fn link_callback)ppp_set_netif_linkcallback2014,57722

netif/ppp/chpms.c,1016
#define USE_CRYPTUSE_CRYPT70,3419
    u_char LANManResp[24];LANManResp100,3957
    u_char NTResp[24];NTResp101,3984
    u_char UseNT; /* If 1, ignore the LANMan response field */UseNT102,4007
} MS_ChapResponse;MS_ChapResponse103,4070
ChallengeResponse( u_char *challenge, /* IN   8 octets */ChallengeResponse143,4994
DesEncrypt( u_char *clear, /* IN  8 octets */DesEncrypt168,5697
DesEncrypt( u_char *clear, /* IN  8 octets */DesEncrypt199,6526
Get7Bits( u_char *input, int startBit)Get7Bits227,7318
Expand(u_char *in, u_char *out)Expand246,7763
Collapse(u_char *in, u_char *out)Collapse263,7986
MakeKey( u_char *key,    /* IN  56 bit DES key missing parity bits */MakeKey280,8220
ChapMS_NT( char *rchallenge,ChapMS_NT305,9090
static u_char *StdText = (u_char *)"KGS!@#$%"; /* key from rasapi32.dll */StdText341,10215
ChapMS_LANMan( char *rchallenge,ChapMS_LANMan344,10303
ChapMS( chap_state *cstate, char *rchallenge, int rchallenge_len, char *secret, int secret_len)ChapMS366,10983

netif/ppp/ipcp.h,2171
#define IPCP_HIPCP_H55,2702
#define CI_ADDRS CI_ADDRS60,2737
#define CI_COMPRESSTYPE CI_COMPRESSTYPE61,2791
#define CI_ADDR CI_ADDR62,2849
#define CI_MS_DNS1 CI_MS_DNS164,2880
#define CI_MS_WINS1 CI_MS_WINS165,2939
#define CI_MS_DNS2 CI_MS_DNS266,2999
#define CI_MS_WINS2 CI_MS_WINS267,3060
#define IPCP_VJMODE_OLD IPCP_VJMODE_OLD69,3123
#define IPCP_VJMODE_RFC1172 IPCP_VJMODE_RFC117270,3195
#define IPCP_VJMODE_RFC1332 IPCP_VJMODE_RFC133271,3270
#define IPCP_VJ_COMP IPCP_VJ_COMP74,3425
#define IPCP_VJ_COMP_OLD IPCP_VJ_COMP_OLD75,3506
typedef struct ipcp_options {ipcp_options78,3642
  u_int   neg_addr      : 1; /* Negotiate IP Address? */neg_addr79,3672
  u_int   old_addrs     : 1; /* Use old (IP-Addresses) option? */old_addrs80,3729
  u_int   req_addr      : 1; /* Ask peer to send IP address? */req_addr81,3795
  u_int   default_route : 1; /* Assign default route through interface? */default_route82,3859
  u_int   proxy_arp     : 1; /* Make proxy ARP entry for peer? */proxy_arp83,3934
  u_int   neg_vj        : 1; /* Van Jacobson Compression? */neg_vj84,4000
  u_int   old_vj        : 1; /* use old (short) form of VJ option? */old_vj85,4061
  u_int   accept_local  : 1; /* accept peer's value for ouraddr */accept_local86,4131
  u_int   accept_remote : 1; /* accept peer's value for hisaddr */accept_remote87,4198
  u_int   req_dns1      : 1; /* Ask peer to send primary DNS address? */req_dns188,4265
  u_int   req_dns2      : 1; /* Ask peer to send secondary DNS address? */req_dns289,4338
  u_short vj_protocol;       /* protocol value to use in VJ option */vj_protocol90,4413
  u_char  maxslotindex;      /* VJ slots - 1. */maxslotindex91,4483
  u_char  cflag;             /* VJ slot compression flag. */cflag92,4532
  u32_t   ouraddr, hisaddr;  /* Addresses in NETWORK BYTE ORDER */ouraddr93,4593
  u32_t   ouraddr, hisaddr;  /* Addresses in NETWORK BYTE ORDER */hisaddr93,4593
  u32_t   dnsaddr[2];        /* Primary and secondary MS DNS entries */dnsaddr94,4660
  u32_t   winsaddr[2];       /* Primary and secondary MS WINS entries */winsaddr95,4732
} ipcp_options;ipcp_options96,4805

netif/ppp/lcp.h,3075
#define LCP_HLCP_H55,2674
#define CI_MRU CI_MRU59,2707
#define CI_ASYNCMAP CI_ASYNCMAP60,2762
#define CI_AUTHTYPE CI_AUTHTYPE61,2824
#define CI_QUALITY CI_QUALITY62,2878
#define CI_MAGICNUMBER CI_MAGICNUMBER63,2929
#define CI_PCOMPRESSION CI_PCOMPRESSION64,2976
#define CI_ACCOMPRESSION CI_ACCOMPRESSION65,3037
#define CI_CALLBACK CI_CALLBACK66,3105
#define CI_MRRU CI_MRRU67,3148
#define CI_SSNHF CI_SSNHF68,3224
#define CI_EPDISC CI_EPDISC69,3295
#define PROTREJ PROTREJ74,3405
#define ECHOREQ ECHOREQ75,3455
#define ECHOREP ECHOREP76,3502
#define DISCREQ DISCREQ77,3547
#define CBCP_OPT CBCP_OPT78,3597
typedef struct lcp_options {lcp_options83,3735
    u_int passive           : 1; /* Don't die if we don't get a response */passive84,3764
    u_int silent            : 1; /* Wait for the other end to start first */silent85,3840
    u_int restart           : 1; /* Restart vs. exit after close */restart86,3917
    u_int neg_mru           : 1; /* Negotiate the MRU? */neg_mru87,3985
    u_int neg_asyncmap      : 1; /* Negotiate the async map? */neg_asyncmap88,4043
    u_int neg_upap          : 1; /* Ask for UPAP authentication? */neg_upap89,4107
    u_int neg_chap          : 1; /* Ask for CHAP authentication? */neg_chap90,4175
    u_int neg_magicnumber   : 1; /* Ask for magic number? */neg_magicnumber91,4243
    u_int neg_pcompression  : 1; /* HDLC Protocol Field Compression? */neg_pcompression92,4304
    u_int neg_accompression : 1; /* HDLC Address/Control Field Compression? */neg_accompression93,4376
    u_int neg_lqr           : 1; /* Negotiate use of Link Quality Reports */neg_lqr94,4455
    u_int neg_cbcp          : 1; /* Negotiate use of CBCP */neg_cbcp95,4532
    u_int neg_mrru          : 1; /* Negotiate multilink MRRU */neg_mrru97,4614
    u_int neg_ssnhf         : 1; /* Negotiate short sequence numbers */neg_ssnhf98,4678
    u_int neg_endpoint      : 1; /* Negotiate endpoint discriminator */neg_endpoint99,4750
    u_short mru;                 /* Value of MRU */mru101,4829
    u_short mrru;                /* Value of MRRU, and multilink enable */mrru103,4902
    u_char chap_mdtype;          /* which MD type (hashing algorithm) */chap_mdtype105,4984
    u32_t asyncmap;              /* Value of async map */asyncmap106,5057
    u32_t magicnumber;magicnumber107,5115
    int numloops;                /* Number of loops during magic number neg. */numloops108,5138
    u32_t lqr_period;            /* Reporting period for LQR 1/100ths second */lqr_period109,5218
    struct epdisc endpoint;      /* endpoint discriminator */endpoint111,5319
} lcp_options;lcp_options113,5388
  PHASE_DEAD = 0,PHASE_DEAD119,5481
  PHASE_INITIALIZE,PHASE_INITIALIZE120,5499
  PHASE_ESTABLISH,PHASE_ESTABLISH121,5519
  PHASE_AUTHENTICATE,PHASE_AUTHENTICATE122,5538
  PHASE_CALLBACK,PHASE_CALLBACK123,5560
  PHASE_NETWORK,PHASE_NETWORK124,5578
  PHASE_TERMINATEPHASE_TERMINATE125,5595
} LinkPhase;LinkPhase126,5613
#define DEFLOOPBACKFAIL DEFLOOPBACKFAIL149,6240

netif/ppp/chap.h,3103
#define CHAP_HCHAP_H69,3366
#define CHAP_HEADERLEN CHAP_HEADERLEN72,3407
#define CHAP_DIGEST_MD5 CHAP_DIGEST_MD578,3456
#define MD5_SIGNATURE_SIZE MD5_SIGNATURE_SIZE79,3514
#define CHAP_MICROSOFT CHAP_MICROSOFT80,3587
#define MS_CHAP_RESPONSE_LEN MS_CHAP_RESPONSE_LEN81,3657
#define CHAP_CHALLENGE CHAP_CHALLENGE83,3726
#define CHAP_RESPONSE CHAP_RESPONSE84,3757
#define CHAP_SUCCESS CHAP_SUCCESS85,3788
#define CHAP_FAILURE CHAP_FAILURE86,3819
#define MIN_CHALLENGE_LENGTH MIN_CHALLENGE_LENGTH91,3923
#define MAX_CHALLENGE_LENGTH MAX_CHALLENGE_LENGTH92,3955
#define MAX_RESPONSE_LENGTH MAX_RESPONSE_LENGTH93,3987
typedef struct chap_state {chap_state99,4116
  int unit;                               /* Interface unit number */unit100,4144
  int clientstate;                        /* Client state */clientstate101,4214
  int serverstate;                        /* Server state */serverstate102,4275
  u_char challenge[MAX_CHALLENGE_LENGTH]; /* last challenge string sent */challenge103,4336
  u_char chal_len;                        /* challenge length */chal_len104,4411
  u_char chal_id;                         /* ID of last challenge */chal_id105,4476
  u_char chal_type;                       /* hash algorithm for challenges */chal_type106,4545
  u_char id;                              /* Current id */id107,4623
  char *chal_name;                        /* Our name to use with challenge */chal_name108,4682
  int chal_interval;                      /* Time until we challenge peer again */chal_interval109,4761
  int timeouttime;                        /* Timeout time in seconds */timeouttime110,4844
  int max_transmits;                      /* Maximum # of challenge transmissions */max_transmits111,4916
  int chal_transmits;                     /* Number of transmissions of challenge */chal_transmits112,5001
  int resp_transmits;                     /* Number of transmissions of response */resp_transmits113,5086
  u_char response[MAX_RESPONSE_LENGTH];   /* Response to send */response114,5170
  u_char resp_length;                     /* length of response */resp_length115,5235
  u_char resp_id;                         /* ID for response messages */resp_id116,5302
  u_char resp_type;                       /* hash algorithm for responses */resp_type117,5375
  char *resp_name;                        /* Our name to send with response */resp_name118,5452
} chap_state;chap_state119,5531
#define CHAPCS_INITIAL CHAPCS_INITIAL125,5579
#define CHAPCS_CLOSED CHAPCS_CLOSED126,5645
#define CHAPCS_PENDING CHAPCS_PENDING127,5709
#define CHAPCS_LISTEN CHAPCS_LISTEN128,5776
#define CHAPCS_RESPONSE CHAPCS_RESPONSE129,5839
#define CHAPCS_OPEN CHAPCS_OPEN130,5910
#define CHAPSS_INITIAL CHAPSS_INITIAL135,6012
#define CHAPSS_CLOSED CHAPSS_CLOSED136,6078
#define CHAPSS_PENDING CHAPSS_PENDING137,6142
#define CHAPSS_INITIAL_CHAL CHAPSS_INITIAL_CHAL138,6203
#define CHAPSS_OPEN CHAPSS_OPEN139,6271
#define CHAPSS_RECHALLENGE CHAPSS_RECHALLENGE140,6333
#define CHAPSS_BADAUTH CHAPSS_BADAUTH141,6399

netif/ppp/randm.c,683
#define RANDPOOLSZ RANDPOOLSZ47,1983
static char randPool[RANDPOOLSZ];   /* Pool of randomness. */randPool52,2150
static long randCount = 0;      /* Pseudo-random incrementer */randCount53,2212
avRandomInit()avRandomInit68,2665
avChurnRand(char *randData, u32_t randLen)avChurnRand84,3179
avGenRand(char *buf, u32_t bufLen)avGenRand123,4521
avRandom()avRandom146,4953
static int  avRandomized = 0;       /* Set when truely randomized. */avRandomized160,5175
static u32_t avRandomSeed = 0;      /* Seed used for random number generation. */avRandomSeed161,5245
avRandomInit()avRandomInit182,5983
avRandomize(void)avRandomize217,7124
avRandom()avRandom242,7872

netif/ppp/auth.c,2293
static char peer_authname[MAXNAMELEN];peer_authname99,4075
static int auth_pending[NUM_PPP];auth_pending103,4225
static int logged_in;logged_in106,4310
static int did_authup; /* @todo, we don't need this in lwip*/did_authup109,4387
static struct wordlist *addresses[NUM_PPP];addresses112,4498
static int num_np_open;num_np_open124,4878
static int num_np_up;num_np_up127,4957
static int passwd_from_file;passwd_from_file131,5084
#define PAP_WITHPEER PAP_WITHPEER185,7022
#define PAP_PEER PAP_PEER186,7048
#define CHAP_WITHPEER CHAP_WITHPEER187,7074
#define CHAP_PEER CHAP_PEER188,7100
struct wordlist {wordlist192,7223
  struct wordlist *next;next193,7241
  char        word[1];word194,7266
link_required(int unit)link_required377,12775
link_terminated(int unit)link_terminated389,12986
link_down(int unit)link_down407,13357
link_established(int unit)link_established443,14234
network_phase(int unit)network_phase525,16485
auth_peer_fail(int unit, u16_t protocol)auth_peer_fail571,17530
auth_peer_success(int unit, u16_t protocol, char *name, int namelen)auth_peer_success588,17894
auth_withpeer_fail(int unit, u16_t protocol)auth_withpeer_fail627,18819
auth_withpeer_success(int unit, u16_t protocol)auth_withpeer_success651,19454
np_up(int unit, u16_t proto)np_up686,20237
np_down(int unit, u16_t proto)np_down716,21034
np_finished(int unit, u16_t proto)np_finished731,21362
check_idle(void *arg)check_idle748,21774
connect_time_expired(void *arg)connect_time_expired771,22340
auth_reset(int unit)auth_reset828,23869
check_passwd( int unit, char *auser, int userlen, char *apasswd, int passwdlen, char **msg, int *msglen)check_passwd862,24983
plogout(void)plogout995,27750
null_login(int unit)null_login1006,27955
get_pap_passwd(int unit, char *user, char *passwd)get_pap_passwd1020,28262
have_pap_secret(void)have_pap_secret1044,28934
have_chap_secret(char *client, char *server, u32_t remote)have_chap_secret1057,29258
get_secret(int unit, char *client, char *server, char *secret, int *secret_len, int save_addrs)get_secret1074,29658
auth_ip_addr(int unit, u32_t addr)auth_ip_addr1177,31849
ip_addr_check(u32_t addr, struct wordlist *addrs)ip_addr_check1183,32002
bad_ip_adrs(u32_t addr)bad_ip_adrs1204,32488

netif/ppp/pap.c,1107
struct protent pap_protent = {pap_protent99,3895
upap_state upap[NUM_PPP]; /* UPAP state; one for each unit */upap121,4230
upap_init(int unit)upap_init136,4734
upap_authwithpeer(int unit, char *user, char *password)upap_authwithpeer160,5317
upap_authpeer(int unit)upap_authpeer192,6058
upap_timeout(void *arg)upap_timeout213,6505
upap_reqtimeout(void *arg)upap_reqtimeout241,7247
upap_lowerup(int unit)upap_lowerup260,7568
upap_lowerdown(int unit)upap_lowerdown290,8322
upap_protrej(int unit)upap_protrej314,8922
upap_input(int unit, u_char *inpacket, int l)upap_input334,9395
upap_rauthreq(upap_state *u, u_char *inp, u_char id, int len)upap_rauthreq390,10550
upap_rauthack(upap_state *u, u_char *inp, int id, int len)upap_rauthack466,12399
upap_rauthnak(upap_state *u, u_char *inp, int id, int len)upap_rauthnak508,13369
upap_sauthreq(upap_state *u)upap_sauthreq550,14260
upap_sresp(upap_state *u, u_char code, u_char id, char *msg, int msglen)upap_sresp584,15065
static char *upap_codenames[] = {upap_codenames604,15614
static int upap_printpkt(upap_printpkt611,15750

netif/ppp/fsm.h,4016
#define FSM_HFSM_H55,2703
#define HEADERLEN HEADERLEN60,2766
#define CONFREQ CONFREQ66,2880
#define CONFACK CONFACK67,2930
#define CONFNAK CONFNAK68,2976
#define CONFREJ CONFREJ69,3022
#define TERMREQ TERMREQ70,3071
#define TERMACK TERMACK71,3119
#define CODEREJ CODEREJ72,3163
typedef struct fsm {fsm78,3276
  int unit;                        /* Interface unit number */unit79,3297
  u_short protocol;                /* Data Link Layer Protocol field value */protocol80,3360
  int state;                       /* State */state81,3438
  int flags;                       /* Contains option bits */flags82,3485
  u_char id;                       /* Current id */id83,3547
  u_char reqid;                    /* Current request id */reqid84,3599
  u_char seen_ack;                 /* Have received valid Ack/Nak/Rej to Req */seen_ack85,3659
  int timeouttime;                 /* Timeout time in milliseconds */timeouttime86,3739
  int maxconfreqtransmits;         /* Maximum Configure-Request transmissions */maxconfreqtransmits87,3809
  int retransmits;                 /* Number of retransmissions left */retransmits88,3890
  int maxtermtransmits;            /* Maximum Terminate-Request transmissions */maxtermtransmits89,3962
  int nakloops;                    /* Number of nak loops since last ack */nakloops90,4043
  int maxnakloops;                 /* Maximum number of nak loops tolerated */maxnakloops91,4119
  struct fsm_callbacks* callbacks; /* Callback routines */callbacks92,4198
  char* term_reason;               /* Reason for closing protocol */term_reason93,4257
  int term_reason_len;             /* Length of term_reason */term_reason_len94,4326
} fsm;fsm95,4389
typedef struct fsm_callbacks {fsm_callbacks98,4398
  void (*resetci)(fsm*);                            /* Reset our Configuration Information */resetci99,4429
  int  (*cilen)(fsm*);                              /* Length of our Configuration Information */cilen100,4523
  void (*addci)(fsm*, u_char*, int*);               /* Add our Configuration Information */addci101,4621
  int  (*ackci)(fsm*, u_char*, int);                /* ACK our Configuration Information */ackci102,4713
  int  (*nakci)(fsm*, u_char*, int);                /* NAK our Configuration Information */nakci103,4805
  int  (*rejci)(fsm*, u_char*, int);                /* Reject our Configuration Information */rejci104,4897
  int  (*reqci)(fsm*, u_char*, int*, int);          /* Request peer's Configuration Information */reqci105,4992
  void (*up)(fsm*);                                 /* Called when fsm reaches LS_OPENED state */up106,5091
  void (*down)(fsm*);                               /* Called when fsm leaves LS_OPENED state */down107,5189
  void (*starting)(fsm*);                           /* Called when we want the lower layer */starting108,5286
  void (*finished)(fsm*);                           /* Called when we don't want the lower layer */finished109,5380
  void (*protreject)(int);                          /* Called when Protocol-Reject received */protreject110,5480
  void (*retransmit)(fsm*);                         /* Retransmission is necessary */retransmit111,5575
  int  (*extcode)(fsm*, int, u_char, u_char*, int); /* Called when unknown code received */extcode112,5661
  char *proto_name;                                 /* String name for protocol (for messages) */proto_name113,5753
} fsm_callbacks;fsm_callbacks114,5851
#define LS_INITIAL LS_INITIAL120,5893
#define LS_STARTING LS_STARTING121,5946
#define LS_CLOSED LS_CLOSED122,5992
#define LS_STOPPED LS_STOPPED123,6043
#define LS_CLOSING LS_CLOSING124,6100
#define LS_STOPPING LS_STOPPING125,6165
#define LS_REQSENT LS_REQSENT126,6215
#define LS_ACKRCVD LS_ACKRCVD127,6271
#define LS_ACKSENT LS_ACKSENT128,6327
#define LS_OPENED LS_OPENED129,6379
#define OPT_PASSIVE OPT_PASSIVE134,6490
#define OPT_RESTART OPT_RESTART135,6555
#define OPT_SILENT OPT_SILENT136,6610

netif/ppp/randm.h,73
#define RANDM_HRANDM_H35,1747
#define avRandomize(avRandomize60,2506

netif/ppp/fsm.c,1075
static const char *ppperr_strerr[] = {ppperr_strerr70,2913
#define PROTO_NAME(PROTO_NAME93,3823
int peer_mru[NUM_PPP];peer_mru95,3875
fsm_init(fsm *f)fsm_init104,3970
fsm_lowerup(fsm *f)fsm_lowerup121,4329
fsm_lowerdown(fsm *f)fsm_lowerdown158,5136
fsm_open(fsm *f)fsm_open210,6255
fsm_close(fsm *f, char *reason)fsm_close271,7575
fsm_timeout(void *arg)fsm_timeout319,8829
fsm_input(fsm *f, u_char *inpacket, int l)fsm_input382,10865
fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len)fsm_rconfreq462,12684
fsm_rconfack(fsm *f, int id, u_char *inp, int len)fsm_rconfack535,14541
fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len)fsm_rconfnakrej594,16147
fsm_rtermreq(fsm *f, int id, u_char *p, int len)fsm_rtermreq654,17869
fsm_rtermack(fsm *f)fsm_rtermack690,18769
fsm_rcoderej(fsm *f, u_char *inp, int len)fsm_rcoderej733,19756
fsm_protreject(fsm *f)fsm_protreject761,20396
fsm_sconfreq(fsm *f, int retransmit)fsm_sconfreq812,21655
fsm_sdata( fsm *f, u_char code, u_char id, u_char *data, int datalen)fsm_sdata867,22960

netif/ppp/pppdebug.h,846
#define PPPDEBUG_HPPPDEBUG_H37,1825
#define LOG_CRITICAL LOG_CRITICAL40,1865
#define LOG_ERR LOG_ERR41,1923
#define LOG_NOTICE LOG_NOTICE42,1981
#define LOG_WARNING LOG_WARNING43,2040
#define LOG_INFO LOG_INFO44,2099
#define LOG_DETAIL LOG_DETAIL45,2133
#define LOG_DEBUG LOG_DEBUG46,2167
#define TRACELCP TRACELCP49,2203
#define AUTHDEBUG(AUTHDEBUG53,2246
#define IPCPDEBUG(IPCPDEBUG54,2288
#define UPAPDEBUG(UPAPDEBUG55,2330
#define LCPDEBUG(LCPDEBUG56,2372
#define FSMDEBUG(FSMDEBUG57,2414
#define CHAPDEBUG(CHAPDEBUG58,2456
#define PPPDEBUG(PPPDEBUG59,2498
#define AUTHDEBUG(AUTHDEBUG63,2564
#define IPCPDEBUG(IPCPDEBUG64,2588
#define UPAPDEBUG(UPAPDEBUG65,2612
#define LCPDEBUG(LCPDEBUG66,2636
#define FSMDEBUG(FSMDEBUG67,2659
#define CHAPDEBUG(CHAPDEBUG68,2682
#define PPPDEBUG(PPPDEBUG69,2706

netif/ppp/pap.h,1686
#define PAP_HPAP_H53,2640
#define UPAP_HEADERLEN UPAP_HEADERLEN60,2774
#define UPAP_AUTHREQ UPAP_AUTHREQ66,2876
#define UPAP_AUTHACK UPAP_AUTHACK67,2926
#define UPAP_AUTHNAK UPAP_AUTHNAK68,2972
typedef struct upap_state {upap_state73,3076
  int us_unit;           /* Interface unit number */us_unit74,3104
  const char *us_user;   /* User */us_user75,3157
  int us_userlen;        /* User length */us_userlen76,3193
  const char *us_passwd; /* Password */us_passwd77,3236
  int us_passwdlen;      /* Password length */us_passwdlen78,3276
  int us_clientstate;    /* Client state */us_clientstate79,3323
  int us_serverstate;    /* Server state */us_serverstate80,3367
  u_char us_id;          /* Current id */us_id81,3411
  int us_timeouttime;    /* Timeout (seconds) for auth-req retrans. */us_timeouttime82,3453
  int us_transmits;      /* Number of auth-reqs sent */us_transmits83,3524
  int us_maxtransmits;   /* Maximum number of auth-reqs to send */us_maxtransmits84,3580
  int us_reqtimeout;     /* Time to wait for auth-req from peer */us_reqtimeout85,3647
} upap_state;upap_state86,3714
#define UPAPCS_INITIAL UPAPCS_INITIAL91,3754
#define UPAPCS_CLOSED UPAPCS_CLOSED92,3801
#define UPAPCS_PENDING UPAPCS_PENDING93,3870
#define UPAPCS_AUTHREQ UPAPCS_AUTHREQ94,3938
#define UPAPCS_OPEN UPAPCS_OPEN95,4004
#define UPAPCS_BADAUTH UPAPCS_BADAUTH96,4057
#define UPAPSS_INITIAL UPAPSS_INITIAL101,4135
#define UPAPSS_CLOSED UPAPSS_CLOSED102,4182
#define UPAPSS_PENDING UPAPSS_PENDING103,4251
#define UPAPSS_LISTEN UPAPSS_LISTEN104,4319
#define UPAPSS_OPEN UPAPSS_OPEN105,4380
#define UPAPSS_BADAUTH UPAPSS_BADAUTH106,4429

netif/ppp/md5.c,1022
static unsigned char PADDING[64] = {PADDING61,2863
#define F(F73,3347
#define G(G74,3395
#define H(H75,3443
#define I(I76,3480
#define ROTATE_LEFT(ROTATE_LEFT79,3561
#define FF(FF83,3756
#define GG(GG88,3898
#define HH(HH93,4040
#define II(II98,4182
#define UL(UL105,4341
#define UL(UL108,4380
#define UL(UL110,4406
MD5Init (MD5_CTX *mdContext)MD5Init118,4550
MD5Update(MD5_CTX *mdContext, unsigned char *inBuf, unsigned int inLen)MD5Update134,5044
MD5Final (unsigned char hash[], MD5_CTX *mdContext)MD5Final177,6276
Transform (u32_t *buf, u32_t *in)Transform220,7538
#define S11 S11225,7647
#define S12 S12226,7661
#define S13 S13227,7676
#define S14 S14228,7691
#define S21 S21247,8642
#define S22 S22248,8656
#define S23 S23249,8670
#define S24 S24250,8685
#define S31 S31269,9645
#define S32 S32270,9659
#define S33 S33271,9674
#define S34 S34272,9689
#define S41 S41291,10649
#define S42 S42292,10663
#define S43 S43293,10678
#define S44 S44294,10693

netif/ppp/magic.c,63
void magicInit()magicInit67,2869
u32_t magic()magic75,2950

netif/ppp/ppp.h,5821
#define PPP_HPPP_H35,1772
#define PPP_ADDITIONAL_CALLBACKS PPP_ADDITIONAL_CALLBACKS51,2180
#define TIMEOUT(TIMEOUT107,4464
#define UNTIMEOUT(UNTIMEOUT108,4566
typedef unsigned long  u_long;u_long114,4683
typedef unsigned int   u_int;u_int115,4714
typedef unsigned short u_short;u_short116,4744
typedef unsigned char  u_char;u_char117,4776
#define PPP_HDRLEN PPP_HDRLEN129,4971
#define PPP_FCSLEN PPP_FCSLEN130,5040
#define PPP_ALLSTATIONS PPP_ALLSTATIONS136,5131
#define PPP_UI PPP_UI137,5200
#define PPP_FLAG PPP_FLAG138,5261
#define PPP_ESCAPE PPP_ESCAPE139,5313
#define PPP_TRANS PPP_TRANS140,5379
#define PPP_IP PPP_IP145,5486
#define PPP_AT PPP_AT146,5542
#define PPP_VJC_COMP PPP_VJC_COMP147,5599
#define PPP_VJC_UNCOMP PPP_VJC_UNCOMP148,5655
#define PPP_COMP PPP_COMP149,5713
#define PPP_IPCP PPP_IPCP150,5769
#define PPP_ATCP PPP_ATCP151,5827
#define PPP_CCP PPP_CCP152,5892
#define PPP_LCP PPP_LCP153,5959
#define PPP_PAP PPP_PAP154,6019
#define PPP_LQR PPP_LQR155,6090
#define PPP_CHAP PPP_CHAP156,6157
#define PPP_CBCP PPP_CBCP157,6234
#define PPP_INITFCS PPP_INITFCS162,6338
#define PPP_GOODFCS PPP_GOODFCS163,6394
#define PPP_FCS(PPP_FCS164,6453
typedef u_char  ext_accm[32];ext_accm169,6590
enum NPmode {NPmode174,6678
  NPMODE_PASS,        /* pass the packet through */NPMODE_PASS175,6692
  NPMODE_DROP,        /* silently drop the packet */NPMODE_DROP176,6744
  NPMODE_ERROR,       /* return an error */NPMODE_ERROR177,6797
  NPMODE_QUEUE        /* save it up for later. */NPMODE_QUEUE178,6841
#define GETCHAR(GETCHAR187,7076
#define PUTCHAR(PUTCHAR190,7126
#define GETSHORT(GETSHORT195,7187
#define PUTSHORT(PUTSHORT199,7283
#define GETLONG(GETLONG204,7388
#define PUTLONG(PUTLONG210,7561
#define INCPTR(INCPTR218,7735
#define DECPTR(DECPTR219,7773
#define BCMP(BCMP221,7812
#define BCOPY(BCOPY222,7884
#define BZERO(BZERO223,7934
#define PRINTMSG(PRINTMSG226,7993
#define PRINTMSG(PRINTMSG228,8109
#define MAKEHEADER(MAKEHEADER234,8214
#define PPPERR_NONE PPPERR_NONE244,8428
#define PPPERR_PARAM PPPERR_PARAM245,8471
#define PPPERR_OPEN PPPERR_OPEN246,8523
#define PPPERR_DEVICE PPPERR_DEVICE247,8584
#define PPPERR_ALLOC PPPERR_ALLOC248,8645
#define PPPERR_USER PPPERR_USER249,8708
#define PPPERR_CONNECT PPPERR_CONNECT250,8757
#define PPPERR_AUTHFAIL PPPERR_AUTHFAIL251,8807
#define PPPERR_PROTOCOL PPPERR_PROTOCOL252,8873
#define PPPCTLG_UPSTATUS PPPCTLG_UPSTATUS261,9060
#define PPPCTLS_ERRCODE PPPCTLS_ERRCODE262,9130
#define PPPCTLG_ERRCODE PPPCTLG_ERRCODE263,9184
#define PPPCTLG_FD PPPCTLG_FD264,9238
struct protent {protent274,9491
    u_short protocol;       /* PPP protocol number */protocol275,9508
    void (*init) (int unit);init277,9597
    void (*input) (int unit, u_char *pkt, int len);input279,9662
    void (*protrej) (int unit);protrej281,9759
    void (*lowerup) (int unit);lowerup283,9825
    void (*lowerdown) (int unit);lowerdown285,9893
    void (*open) (int unit);open287,9955
    void (*close) (int unit, char *reason);close289,10013
    int  (*printpkt) (u_char *pkt, int len,printpkt292,10128
    void (*datainput) (int unit, u_char *pkt, int len);datainput296,10292
    int  enabled_flag;      /* 0 if protocol is disabled */enabled_flag298,10386
    char *name;         /* Text name of protocol */name299,10446
    void (*check_options) (u_long);check_options302,10578
    int  (*demand_conf) (int unit);demand_conf304,10660
    int  (*active_pkt) (u_char *pkt, int len);active_pkt306,10748
struct ppp_idle {ppp_idle314,10949
  u_short xmit_idle;      /* seconds since last NP packet sent */xmit_idle315,10967
  u_short recv_idle;      /* seconds since last NP packet received */recv_idle316,11033
struct ppp_settings {ppp_settings319,11107
  u_int  disable_defaultip : 1;       /* Don't use hostname for default IP addrs */disable_defaultip321,11130
  u_int  auth_required     : 1;       /* Peer is required to authenticate */auth_required322,11214
  u_int  explicit_remote   : 1;       /* remote_name specified with remotename opt */explicit_remote323,11291
  u_int  refuse_pap        : 1;       /* Don't wanna auth. ourselves with PAP */refuse_pap324,11377
  u_int  refuse_chap       : 1;       /* Don't wanna auth. ourselves with CHAP */refuse_chap325,11458
  u_int  usehostname       : 1;       /* Use hostname for our_name */usehostname326,11540
  u_int  usepeerdns        : 1;       /* Ask peer for DNS adds */usepeerdns327,11610
  u_short idle_time_limit;            /* Shut down link if idle for this long */idle_time_limit329,11677
  int  maxconnect;                    /* Maximum connect time (seconds) */maxconnect330,11758
  char user       [MAXNAMELEN   + 1]; /* Username for PAP */user332,11834
  char passwd     [MAXSECRETLEN + 1]; /* Password for PAP, secret for CHAP */passwd333,11895
  char our_name   [MAXNAMELEN   + 1]; /* Our name for authentication purposes */our_name334,11973
  char remote_name[MAXNAMELEN   + 1]; /* Peer's name for authentication */remote_name335,12054
struct ppp_addrs {ppp_addrs338,12133
  ip_addr_t our_ipaddr, his_ipaddr, netmask, dns1, dns2;our_ipaddr339,12152
  ip_addr_t our_ipaddr, his_ipaddr, netmask, dns1, dns2;his_ipaddr339,12152
  ip_addr_t our_ipaddr, his_ipaddr, netmask, dns1, dns2;netmask339,12152
  ip_addr_t our_ipaddr, his_ipaddr, netmask, dns1, dns2;dns1339,12152
  ip_addr_t our_ipaddr, his_ipaddr, netmask, dns1, dns2;dns2339,12152
enum pppAuthType {pppAuthType380,13592
    PPPAUTHTYPE_NONE,PPPAUTHTYPE_NONE381,13611
    PPPAUTHTYPE_ANY,PPPAUTHTYPE_ANY382,13633
    PPPAUTHTYPE_PAP,PPPAUTHTYPE_PAP383,13654
    PPPAUTHTYPE_CHAPPPPAUTHTYPE_CHAP384,13675
#define pppOpen(pppOpen404,14439

netif/ppp/magic.h,32
#define MAGIC_HMAGIC_H55,2679

netif/ppp/ipcp.c,3182
ipcp_options ipcp_wantoptions[NUM_PPP];  /* Options that we want to request */ipcp_wantoptions73,3040
ipcp_options ipcp_gotoptions[NUM_PPP];   /* Options that peer ack'd */ipcp_gotoptions74,3119
ipcp_options ipcp_allowoptions[NUM_PPP]; /* Options we allow peer to request */ipcp_allowoptions75,3190
ipcp_options ipcp_hisoptions[NUM_PPP];   /* Options that we ack'd */ipcp_hisoptions76,3270
static int default_route_set[NUM_PPP]; /* Have set up a default route */default_route_set79,3357
static int cis_received[NUM_PPP];      /* # Conf-Reqs received */cis_received80,3430
fsm ipcp_fsm[NUM_PPP]; /* IPCP fsm structure */ipcp_fsm101,4425
static fsm_callbacks ipcp_callbacks = { /* IPCP callback routines */ipcp_callbacks104,4475
struct protent ipcp_protent = {ipcp_protent134,5727
#define CILEN_VOID CILEN_VOID161,6178
#define CILEN_COMPRESS CILEN_COMPRESS162,6203
#define CILEN_VJ CILEN_VJ163,6276
#define CILEN_ADDR CILEN_ADDR164,6345
#define CILEN_ADDRS CILEN_ADDRS165,6409
#define CODENAME(CODENAME168,6473
ipcp_init(int unit)ipcp_init176,6627
ipcp_open(int unit)ipcp_open218,7534
ipcp_close(int unit, char *reason)ipcp_close228,7640
ipcp_lowerup(int unit)ipcp_lowerup238,7779
ipcp_lowerdown(int unit)ipcp_lowerdown248,7904
ipcp_input(int unit, u_char *p, int len)ipcp_input258,8023
ipcp_protrej(int unit)ipcp_protrej270,8242
ipcp_resetci(fsm *f)ipcp_resetci280,8356
ipcp_cilen(fsm *f)ipcp_cilen303,8868
#define LENCIVJ(LENCIVJ309,9035
#define LENCIADDR(LENCIADDR310,9108
#define LENCIDNS(LENCIDNS311,9180
ipcp_addci(fsm *f, u_char *ucp, int *lenp)ipcp_addci348,10201
#define ADDCIVJ(ADDCIVJ353,10314
#define ADDCIADDR(ADDCIADDR370,10714
#define ADDCIDNS(ADDCIDNS389,11133
ipcp_ackci(fsm *f, u_char *p, int len)ipcp_ackci425,11865
#define ACKCIVJ(ACKCIVJ438,12220
#define ACKCIADDR(ACKCIADDR466,12852
#define ACKCIDNS(ACKCIDNS493,13415
ipcp_nakci(fsm *f, u_char *p, int len)ipcp_nakci545,14547
#define NAKCIADDR(NAKCIADDR563,15103
#define NAKCIVJ(NAKCIVJ583,15529
#define NAKCIDNS(NAKCIDNS595,15800
ipcp_rejci(fsm *f, u_char *p, int len)ipcp_rejci750,19730
#define REJCIADDR(REJCIADDR764,20157
#define REJCIVJ(REJCIVJ789,20712
#define REJCIDNS(REJCIDNS814,21285
ipcp_reqci(fsm *f, u_char *inp/* Requested CIs */,int *len/* Length of requested CIs */,int reject_if_disagree)ipcp_reqci869,22546
ipcp_up(fsm *f)ipcp_up1220,34097
ipcp_down(fsm *f)ipcp_down1310,36667
ipcp_clear_addrs(int unit)ipcp_clear_addrs1325,36928
ipcp_finished(fsm *f)ipcp_finished1343,37299
ipcp_printpkt(u_char *p, int plen, void (*printer) (void *, char *, ...), void *arg)ipcp_printpkt1350,37398
#define IP_HDRLEN IP_HDRLEN1364,37769
#define IP_OFFMASK IP_OFFMASK1365,37805
#define IPPROTO_TCP IPPROTO_TCP1366,37832
#define TCP_HDRLEN TCP_HDRLEN1367,37854
#define TH_FIN TH_FIN1368,37877
#define net_short(net_short1375,38049
#define get_iphl(get_iphl1376,38098
#define get_ipoff(get_ipoff1377,38156
#define get_ipproto(get_ipproto1378,38216
#define get_tcpoff(get_tcpoff1379,38268
#define get_tcpflags(get_tcpflags1380,38326
ip_active_pkt(u_char *pkt, int len)ip_active_pkt1383,38391

netif/ppp/ppp_oe.c,2231
#define PPPOE_ADD_16(PPPOE_ADD_1688,3945
#define PPPOE_ADD_HEADER(PPPOE_ADD_HEADER93,4121
#define PPPOE_DISC_TIMEOUT PPPOE_DISC_TIMEOUT99,4298
#define PPPOE_SLOW_RETRY PPPOE_SLOW_RETRY100,4376
#define PPPOE_DISC_MAXPADI PPPOE_DISC_MAXPADI101,4445
#define PPPOE_DISC_MAXPADR PPPOE_DISC_MAXPADR102,4520
#define IFF_PASSIVE IFF_PASSIVE107,4681
#define PPPOE_ERRORSTRING_LEN PPPOE_ERRORSTRING_LEN111,4785
static char pppoe_error_tmp[PPPOE_ERRORSTRING_LEN];pppoe_error_tmp113,4829
static struct pppoe_softc *pppoe_softc_list;pppoe_softc_list141,5843
pppoe_create(struct netif *ethif, int pd, void (*linkStatusCB)(int pd, int up), struct pppoe_softc **scptr)pppoe_create144,5895
pppoe_destroy(struct netif *ifp)pppoe_destroy172,6535
pppoe_find_softc_by_session(u_int session, struct netif *rcvif)pppoe_find_softc_by_session215,7494
pppoe_find_softc_by_hunique(u8_t *token, size_t len, struct netif *rcvif)pppoe_find_softc_by_hunique239,8033
pppoe_linkstatus_up(struct pppoe_softc *sc)pppoe_linkstatus_up278,9047
pppoe_dispatch_disc_pkt(struct netif *netif, struct pbuf *pb)pppoe_dispatch_disc_pkt285,9222
pppoe_disc_input(struct netif *netif, struct pbuf *p)pppoe_disc_input550,17240
pppoe_data_input(struct netif *netif, struct pbuf *pb)pppoe_data_input561,17479
pppoe_output(struct pppoe_softc *sc, struct pbuf *pb)pppoe_output637,19335
pppoe_send_padi(struct pppoe_softc *sc)pppoe_send_padi668,20375
pppoe_timeout(void *arg)pppoe_timeout734,22193
pppoe_connect(struct pppoe_softc *sc)pppoe_connect804,24739
pppoe_disconnect(struct pppoe_softc *sc)pppoe_disconnect829,25378
pppoe_do_disconnect(struct pppoe_softc *sc)pppoe_do_disconnect844,25767
pppoe_abort_connect(struct pppoe_softc *sc)pppoe_abort_connect875,26558
pppoe_send_padr(struct pppoe_softc *sc)pppoe_send_padr889,27006
pppoe_send_padt(struct netif *outgoing_if, u_int session, const u8_t *dest)pppoe_send_padt947,28630
pppoe_send_pado(struct pppoe_softc *sc)pppoe_send_pado977,29415
pppoe_send_pads(struct pppoe_softc *sc)pppoe_send_pads1011,30304
pppoe_xmit(struct pppoe_softc *sc, struct pbuf *pb)pppoe_xmit1053,31466
pppoe_clear_softc(struct pppoe_softc *sc, const char *message)pppoe_clear_softc1111,32963

netif/ppp/md5.h,335
#define MD5_HMD5_H41,2439
  u32_t i[2];               /* number of _bits_ handled mod 2^64 */i45,2529
  u32_t buf[4];             /* scratch buffer */buf46,2597
  unsigned char in[64];     /* input buffer */in47,2646
  unsigned char digest[16]; /* actual digest after MD5Final call */digest48,2693
} MD5_CTX;MD5_CTX49,2761

netif/ppp/lcp.c,4870
#define PPPOE_MAXMTU PPPOE_MAXMTU72,2879
LinkPhase lcp_phase[NUM_PPP];          /* Phase of link session (RFC 1661) */lcp_phase93,3372
static u_int lcp_echo_interval      = LCP_ECHOINTERVAL; /* Interval between LCP echo-requests */lcp_echo_interval94,3450
static u_int lcp_echo_fails         = LCP_MAXECHOFAILS; /* Tolerance to unanswered echo-requests */lcp_echo_fails95,3547
static fsm lcp_fsm[NUM_PPP];                            /* LCP fsm structure (global)*/lcp_fsm98,3666
lcp_options lcp_wantoptions[NUM_PPP];  /* Options that we want to request */lcp_wantoptions99,3754
lcp_options lcp_gotoptions[NUM_PPP];   /* Options that peer ack'd */lcp_gotoptions100,3831
lcp_options lcp_allowoptions[NUM_PPP]; /* Options we allow peer to request */lcp_allowoptions101,3900
lcp_options lcp_hisoptions[NUM_PPP];   /* Options that we ack'd */lcp_hisoptions102,3978
ext_accm xmit_accm[NUM_PPP];           /* extended transmit ACCM */xmit_accm103,4045
static u32_t lcp_echos_pending      = 0;                /* Number of outstanding echo msgs */lcp_echos_pending105,4114
static u32_t lcp_echo_number        = 0;                /* ID number of next echo frame */lcp_echo_number106,4208
static u32_t lcp_echo_timer_running = 0;                /* TRUE if a timer is running */lcp_echo_timer_running107,4299
static u_char nak_buffer[PPP_MRU]; /* where we construct a nak packet */ nak_buffer110,4479
static fsm_callbacks lcp_callbacks = { /* LCP callback routines */lcp_callbacks141,5861
struct protent lcp_protent = {lcp_protent167,6950
int lcp_loopbackfail = DEFLOOPBACKFAIL;lcp_loopbackfail189,7318
#define CILEN_VOID CILEN_VOID194,7425
#define CILEN_CHAR CILEN_CHAR195,7447
#define CILEN_SHORT CILEN_SHORT196,7469
#define CILEN_CHAP CILEN_CHAP197,7524
#define CILEN_LONG CILEN_LONG198,7583
#define CILEN_LQR CILEN_LQR199,7637
#define CILEN_CBCP CILEN_CBCP200,7707
#define CODENAME(CODENAME202,7730
lcp_init(int unit)lcp_init240,8518
lcp_open(int unit)lcp_open305,10742
lcp_close(int unit, char *reason)lcp_close327,11065
lcp_lowerup(int unit)lcp_lowerup353,11666
lcp_lowerdown(int unit)lcp_lowerdown385,12692
lcp_input(int unit, u_char *p, int len)lcp_input395,12807
lcp_extcode(fsm *f, int code, u_char id, u_char *inp, int len)lcp_extcode407,12968
lcp_rprotrej(fsm *f, u_char *inp, int len)lcp_rprotrej446,13696
lcp_protrej(int unit)lcp_protrej488,14690
lcp_sprotrej(int unit, u_char *p, int len)lcp_sprotrej503,14962
lcp_resetci(fsm *f)lcp_resetci518,15274
lcp_cilen(fsm *f)lcp_cilen532,15557
#define LENCIVOID(LENCIVOID536,15624
#define LENCICHAP(LENCICHAP537,15673
#define LENCISHORT(LENCISHORT538,15722
#define LENCILONG(LENCILONG539,15772
#define LENCILQR(LENCILQR540,15821
#define LENCICBCP(LENCICBCP541,15868
lcp_addci(fsm *f, u_char *ucp, int *lenp)lcp_addci562,16505
#define ADDCIVOID(ADDCIVOID567,16623
#define ADDCISHORT(ADDCISHORT573,16785
#define ADDCICHAP(ADDCICHAP580,16992
#define ADDCILONG(ADDCILONG588,17234
#define ADDCILQR(ADDCILQR595,17437
#define ADDCICHAR(ADDCICHAR603,17670
lcp_ackci(fsm *f, u_char *p, int len)lcp_ackci637,18785
#define ACKCIVOID(ACKCIVOID649,19117
#define ACKCISHORT(ACKCISHORT658,19336
#define ACKCICHAR(ACKCICHAR670,19635
#define ACKCICHAP(ACKCICHAP682,19928
#define ACKCILONG(ACKCILONG697,20304
#define ACKCILQR(ACKCILQR709,20598
lcp_nakci(fsm *f, u_char *p, int len)lcp_nakci759,22009
#define NAKCIVOID(NAKCIVOID779,22587
#define NAKCICHAP(NAKCICHAP789,22811
#define NAKCICHAR(NAKCICHAR801,23080
#define NAKCISHORT(NAKCISHORT812,23321
#define NAKCILONG(NAKCILONG823,23568
#define NAKCILQR(NAKCILQR834,23809
lcp_rejci(fsm *f, u_char *p, int len)lcp_rejci1079,30552
#define REJCIVOID(REJCIVOID1094,30950
#define REJCISHORT(REJCISHORT1104,31228
#define REJCICHAP(REJCICHAP1119,31623
#define REJCILONG(REJCILONG1136,32091
#define REJCILQR(REJCILQR1151,32478
#define REJCICBCP(REJCICBCP1167,32910
lcp_reqci(fsm *f, lcp_reqci1223,34384
lcp_up(fsm *f)lcp_up1640,47714
lcp_down(fsm *f)lcp_down1688,49112
lcp_starting(fsm *f)lcp_starting1708,49556
lcp_finished(fsm *f)lcp_finished1718,49720
print_string( char *p, int len, void (*printer) (void *, char *, ...), void *arg)print_string1730,49939
static char *lcp_codenames[] = {lcp_codenames1765,50633
lcp_printpkt( u_char *p, int plen, void (*printer) (void *, char *, ...), void *arg)lcp_printpkt1772,50807
LcpLinkFailure (fsm *f)LcpLinkFailure1937,54931
LcpEchoCheck (fsm *f)LcpEchoCheck1950,55278
LcpEchoTimeout (void *arg)LcpEchoTimeout1967,55612
lcp_received_echo_reply (fsm *f, int id, u_char *inp, int len)lcp_received_echo_reply1979,55823
LcpSendEchoRequest (fsm *f)LcpSendEchoRequest2004,56488
lcp_echo_lowerup (int unit)lcp_echo_lowerup2036,57144
lcp_echo_lowerdown (int unit)lcp_echo_lowerdown2056,57551

netif/ethernetif.c,0

netif/slipif.c,1082
#define SLIP_BLOCK SLIP_BLOCK57,2160
#define SLIP_DONTBLOCK SLIP_DONTBLOCK58,2185
#define SLIP_END SLIP_END60,2211
#define SLIP_ESC SLIP_ESC61,2248
#define SLIP_ESC_END SLIP_ESC_END62,2285
#define SLIP_ESC_ESC SLIP_ESC_ESC63,2322
#define SLIP_MAX_SIZE SLIP_MAX_SIZE65,2360
enum slipif_recv_state {slipif_recv_state67,2388
    SLIP_RECV_NORMAL,SLIP_RECV_NORMAL68,2413
    SLIP_RECV_ESCAPE,SLIP_RECV_ESCAPE69,2435
struct slipif_priv {slipif_priv72,2461
  sio_fd_t sd;sd73,2482
  struct pbuf *p, *q;p75,2580
  struct pbuf *p, *q;q75,2580
  enum slipif_recv_state state;state76,2602
  u16_t i, recved;i77,2634
  u16_t i, recved;recved77,2634
slipif_output(struct netif *netif, struct pbuf *p, ip_addr_t *ipaddr)slipif_output91,3044
slip_sio_read(sio_fd_t fd, u8_t* data, u32_t len, u8_t block)slip_sio_read142,4314
slipif_input(struct netif *netif, u8_t block)slipif_input163,4999
slipif_loop_thread(void *nf)slipif_loop_thread265,7716
slipif_init(struct netif *netif)slipif_init297,8486
slipif_poll(struct netif *netif)slipif_poll350,9844

netif/etharp.c,2595
const struct eth_addr ethbroadcast = {{0xff,0xff,0xff,0xff,0xff,0xff}};ethbroadcast65,2550
const struct eth_addr ethzero = {{0,0,0,0,0,0}};ethzero66,2622
#define ARP_MAXAGE ARP_MAXAGE74,2886
#define ARP_MAXPENDING ARP_MAXPENDING82,3185
#define HWTYPE_ETHERNET HWTYPE_ETHERNET84,3211
enum etharp_state {etharp_state86,3238
  ETHARP_STATE_EMPTY = 0,ETHARP_STATE_EMPTY87,3258
  ETHARP_STATE_PENDING,ETHARP_STATE_PENDING88,3284
  ETHARP_STATE_STABLEETHARP_STATE_STABLE89,3308
struct etharp_entry {etharp_entry92,3334
  struct etharp_q_entry *q;q95,3446
  ip_addr_t ipaddr;ipaddr100,3615
  struct eth_addr ethaddr;ethaddr101,3635
  struct netif *netif;netif103,3676
  u8_t state;state105,3722
  u8_t ctime;ctime106,3736
  u8_t static_entry;static_entry108,3784
static struct etharp_entry arp_table[ARP_TABLE_SIZE];arp_table112,3852
static u8_t etharp_cached_entry;etharp_cached_entry115,3934
#define ETHARP_FLAG_TRY_HARD ETHARP_FLAG_TRY_HARD120,4147
#define ETHARP_FLAG_FIND_ONLY ETHARP_FLAG_FIND_ONLY121,4182
#define ETHARP_FLAG_STATIC_ENTRY ETHARP_FLAG_STATIC_ENTRY122,4217
#define ETHARP_SET_HINT(ETHARP_SET_HINT125,4279
#define ETHARP_SET_HINT(ETHARP_SET_HINT128,4479
free_etharp_q(struct etharp_q_entry *q)free_etharp_q147,5011
#define free_etharp_q(free_etharp_q163,5393
free_entry(int i)free_entry169,5505
etharp_tmr(void)etharp_tmr203,6579
find_entry(ip_addr_t *ipaddr, u8_t flags)find_entry258,8636
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)etharp_send_ip410,14703
update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)update_arp_entry443,15929
etharp_add_static_entry(ip_addr_t *ipaddr, struct eth_addr *ethaddr)etharp_add_static_entry522,18792
etharp_remove_static_entry(ip_addr_t *ipaddr)etharp_remove_static_entry547,19770
etharp_find_addr(struct netif *netif, ip_addr_t *ipaddr,etharp_find_addr583,20901
etharp_ip_input(struct netif *netif, struct pbuf *p)etharp_ip_input619,21872
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)etharp_arp_input668,23616
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)etharp_output837,30576
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)etharp_query957,35301
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,etharp_raw1116,41357
etharp_request(struct netif *netif, ip_addr_t *ipaddr)etharp_request1198,44395
ethernet_input(struct pbuf *p, struct netif *netif)ethernet_input1216,45140
