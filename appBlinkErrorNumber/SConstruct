from VEnvironment import *

NON_OS = getBoolEnv("NON_OS")

haldir = getenv('HALDIR', None)
if haldir is None:
    #haldir='stm32f030xx'
    #haldir='stm32f103xb'
    #haldir='stm32f103ze_redbull'
    #haldir='stm32f103rb_pyeasycontrol'
    #haldir='stm32f103c8_xtw'
    #haldir='stm32f103cb_tiny_controller'
    haldir='stm32f407zg_eu'
    #haldir='stm32f767zi_nucleo'


config = loadHalConfig( haldir )
env = config.env

# disable some commands and reduce flash size
env.appendDefineFlags( [
    #'USE_CMD_HELP=0',
    #'USE_CMD_SCPI_IDN=0',
    #'USE_CMD_SCPI_RST=0',
    #'USE_CMD_RESET=0',
    #'USE_CMD_GPIO=0',
    #'USE_CMD_SGPIO=0',
    #'USE_CMD_LED=0',
    #'USE_CMD_DUMP=0',
    #'USE_CMD_WRITE=0',
    #'USE_CMD_MFILL=0',
    #'USE_CMD_WAIT=0',
    #'USE_CMD_WDG=0',
    #'USE_CMD_UPTIME=0',
    #'USE_CMD_SYSTEM=0',
    #'USE_CMD_MAPI=0',
    #'USE_CMD_MKBUF=0',
    #'MCUSH_FREERTOS_PEEK_API=0',
    #'configUSE_TIMERS=0',
    #'configUSE_MUTEX=0',
    #'configCHECK_FOR_STACK_OVERFLOW=0',
    #'configTOTAL_HEAP_SIZE=10240',
    #'MCUSH_STACK_SIZE=10240',
    #'SHELL_QUOTE_PARSE_ENALBE=0',
    #'USE_SHELL_EVAL_SSCANF=1',
    ] ) 

if NON_OS:
    env.appendDefineFlags( [ 'MCUSH_NON_OS=1' ] )


env.appendPath([
    '.',
    '/libFreeRTOS',
    '/libFreeRTOS/include',
    '/libFreeRTOS/portable/GCC/%s'% config.port,
    '/mcush',
    '/hal%s'% haldir,
])


env.appendGlobSource([
    '*.c',
    '/mcush/*.c',
    '/hal%s/*.c'% haldir,
])

if not NON_OS:
    env.appendGlobSource([
        '/libFreeRTOS/*.c',
        #'/libFreeRTOS/portable/MemMang/heap_1.c',  # simple malloc, no free
        #'/libFreeRTOS/portable/MemMang/heap_2.c',  # simple malloc, with free, no combine
        '/libFreeRTOS/portable/MemMang/heap_3.c',  # normal
        '/libFreeRTOS/portable/GCC/%s/port.c'% config.port,
        ])



#env.appendCompilerFlag(['-std=gnu90'])
#env.appendLinkFlag(['--specs=nano.specs'])
env.makeApp()

