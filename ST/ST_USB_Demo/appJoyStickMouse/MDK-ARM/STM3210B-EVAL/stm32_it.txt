; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\stm32_it.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\stm32_it.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -I..\..\..\..\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\..\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL ..\src\stm32_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;97     *******************************************************************************/
;;;98     void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;99     {
;;;100      /* Go to infinite loop when Bus Fault exception occurs */
;;;101      while (1)
;;;102      {
;;;103      }
;;;104    }
;;;105    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;138    *******************************************************************************/
;;;139    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;140    {
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.EXTI9_5_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI9_5_IRQHandler PROC
;;;209    #else
;;;210    void EXTI9_5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;211    #endif
;;;212    {
;;;213      if (EXTI_GetITStatus(KEY_BUTTON_EXTI_LINE) != RESET)
000002  f44f7400          MOV      r4,#0x200
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       EXTI_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d00f              BEQ      |L3.48|
;;;214      {
;;;215        /* Check if the remote wakeup feature is enabled (it could be disabled 
;;;216            by the host through ClearFeature request) */
;;;217        if (pInformation->Current_Feature & 0x20) 
000010  4808              LDR      r0,|L3.52|
000012  6802              LDR      r2,[r0,#0]  ; pInformation
000014  7a51              LDRB     r1,[r2,#9]
000016  0688              LSLS     r0,r1,#26
000018  d505              BPL      |L3.38|
;;;218        {      
;;;219          pInformation->Current_Feature &= ~0x20;  
00001a  f0210020          BIC      r0,r1,#0x20
00001e  7250              STRB     r0,[r2,#9]
;;;220          /* Exit low power mode and re-configure clocks */
;;;221          Resume(RESUME_INTERNAL);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       Resume
                  |L3.38|
;;;222        }
;;;223      
;;;224        /* Clear the EXTI line pending bit */
;;;225        EXTI_ClearITPendingBit(KEY_BUTTON_EXTI_LINE);
000026  4620              MOV      r0,r4
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      EXTI_ClearITPendingBit
                  |L3.48|
;;;226      }
;;;227    }
000030  bd10              POP      {r4,pc}
;;;228    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      pInformation

                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L4.0|
;;;67     *******************************************************************************/
;;;68     void HardFault_Handler(void)
000000  e7fe              B        |L4.0|
;;;69     {
;;;70       /* Go to infinite loop when Hard Fault exception occurs */
;;;71       while (1)
;;;72       {
;;;73       }
;;;74     }
;;;75     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L5.0|
;;;82     *******************************************************************************/
;;;83     void MemManage_Handler(void)
000000  e7fe              B        |L5.0|
;;;84     {
;;;85       /* Go to infinite loop when Memory Manage exception occurs */
;;;86       while (1)
;;;87       {
;;;88       }
;;;89     }
;;;90     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;56     *******************************************************************************/
;;;57     void NMI_Handler(void)
000000  4770              BX       lr
;;;58     {
;;;59     }
;;;60     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;149    *******************************************************************************/
;;;150    void PendSV_Handler(void)
000000  4770              BX       lr
;;;151    {
;;;152    }
;;;153    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;127    *******************************************************************************/
;;;128    void SVC_Handler(void)
000000  4770              BX       lr
;;;129    {
;;;130    }
;;;131    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;160    *******************************************************************************/
;;;161    void SysTick_Handler(void)
000000  4770              BX       lr
;;;162    {
;;;163    }
;;;164    
                          ENDP


                          AREA ||i.USBWakeUp_IRQHandler||, CODE, READONLY, ALIGN=1

                  USBWakeUp_IRQHandler PROC
;;;235    *******************************************************************************/
;;;236    void USBWakeUp_IRQHandler(void)
000000  f44f2080          MOV      r0,#0x40000
;;;237    {
;;;238      EXTI_ClearITPendingBit(EXTI_Line18);
000004  f7ffbffe          B.W      EXTI_ClearITPendingBit
;;;239    }
;;;240    
                          ENDP


                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;177    #else
;;;178    void USB_LP_CAN1_RX0_IRQHandler(void)
000000  f7ffbffe          B.W      USB_Istr
;;;179    #endif
;;;180    {
;;;181      USB_Istr();
;;;182    }
;;;183    
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L12.0|
;;;112    *******************************************************************************/
;;;113    void UsageFault_Handler(void)
000000  e7fe              B        |L12.0|
;;;114    {
;;;115      /* Go to infinite loop when Usage Fault exception occurs */
;;;116      while (1)
;;;117      {
;;;118      }
;;;119    }
;;;120    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\stm32_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_stm32_it_c_bb8ca80c____REV16|
#line 388 "..\\..\\..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_stm32_it_c_bb8ca80c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_stm32_it_c_bb8ca80c____REVSH|
#line 402
|__asm___10_stm32_it_c_bb8ca80c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_stm32_it_c_bb8ca80c____RRX|
#line 587
|__asm___10_stm32_it_c_bb8ca80c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
